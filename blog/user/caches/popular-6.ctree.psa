a:1:{s:13:"notes-records";a:1:{i:0;a:26:{s:2:"ID";s:1:"5";s:8:"SubsetID";s:1:"1";s:5:"Title";s:34:"Дизайн-система Blazor";s:4:"Text";s:14219:"DevExpress Blazor — это набор компонентов пользовательского интерфейса. Активно применяется в приложениях на платформе Blazor и предлагает мощный набор компонентов: таблицы данных, календари, планировщики, выпадающие списки, диалоговые окна и многие другие.

Задача — переосмыслить и создать дизайн-систему в Figma на основе существующих артефактов и наработок.

empty-image.jpg
<img src="/images/blog/1x/blazor-1.png" srcset="/images/blog/1x/blazor-1.png 1x, /images/blog/2x/blazor-1@2x.png 2x" class="img-fluid">

# Вводные

Blazor продукт развивался и вместе с этим росло количество и сложность компонентов. Раньше дизайнер рисовал отдельный макет под каждую задачу. Не было системного подхода и единых правил. Со временем этот подход начал приносить проблемы:
- Разработка начала сильно обгонять дизайн.
- Многие решения по краевым сценариям стали приниматься разработчиками.
- Дизайнер тратил много времени на поиск UI и UX багов на поздних этапах.
- Итоговая фича могла сильно отличаться от нарисованного макета.

Отдельной проблемой была сложность каждого компонента:
- **Разные темы**. В разных темах компонент не только меняет цвет, но и начинает обладать другими визуальными свойствами.
- **Несколько размеров**. Каждый компонент линейки представлен в трёх размерах. 
- **Дополнительные стили**. Большой набор стилистических вариантов для компонентов-атомов.

Например, одна только кнопка состоит из 150 вариантов компонента:

empty-image.jpg
<img src="/images/blog/1x/blazor-2.png" srcset="/images/blog/1x/blazor-2.png 1x, /images/blog/2x/blazor-2@2x.png 2x" class="img-fluid">

Было принято решение менять подход — разработать стандарты, правила постановки задач и проектирования.

# Задачи

Перед новой дизайн-системой поставили следующие задачи:

1. **Оптимизация работы команды на этапах дизайна и разработки.** 
Раньше, эти процессы были довольно хаотичны. Дизайнер брал в задачу в работу и изображал примерную реализацию компонента. Многие краевые сценарии не учитывались. Какие-то решения в процессе разработки менялись на ходу. В итоге, разработка затягивалась, фичи резались и итоговый результат сильно отличался от исходной картинки.
2. **Автоматизация и консистентность**. 
Большой размер и сложность компонентов сильно затрудняли внесение любых изменений в дизайн. Даже небольшие стилистические изменения в базовом компоненте, типа кнопки, приводили к огромному количеству работы со стороны дизайнера. Так как нужно было учесть разные темы, размеры и стили.
3. **Консистентность цвета**. 
Отдельно стоит отметить проблему с цветом. Многие цвета компонентов в коде рассчитывались с помощью миксинов. Это приводило ко многим проблемам, в том числе, проблемам с контрастностью.
4. **Доступность.**
Пользователи продукта стали всё чаще интересоваться, насколько компоненты доступны для разных категорий пользователей. Нужно было сформировать подход, когда дизайнер на этапе проработки компонента учитывает все WCAG 2.2 AA требования.
5. **Централизация знаний.**
Многие знания о тех или иных дизайн-решениях нигде не фиксировались. Единственным источником знания были участвующие в работе на фичей члены команды. Нужно было сформировать систему документации.
6. **UI Kit.**
Всё чаще стали приходить запросы на UI Kit от пользователей. К тому же, это уже давно было у конкурентов.

# Результат

## Компоненты в Figma переработаны с нуля

Дизайн компонентов теперь полностью повторяет функционал кодовой реализации. Учтены все редкие сценарии и краевые состояния. Перед отрисовкой каждого компоненты изучались спецификация+API компонента и все сценарии его использования.

### **Пример реализации компонента Grid**

Компонент Grid — один из самых больших и популярных в линейке Blazor. Представляет собой решение для отображения данных в табличном формате. Включает множество функций для управления данными. Например: фильтрация, группировка, пагинация, сортировка и многое другое.

Основную сложность представляет его размер:

empty-image.jpg
<img src="/images/blog/1x/blazor-3.png" srcset="/images/blog/1x/blazor-3.png 1x, /images/blog/2x/blazor-3@2x.png 2x" class="img-fluid">

Компонент достаточно гибок в настройке. Так как пользователи используют его по-разному. Всё это отражено в дизайне. 

Чтобы отрисовать такой компонент в Figma, задачу разбили на этапе: 

- Изучить решения конкурентов.
- Изучить и собрать файл со скриншотами всех состояний компонента.
- Собрать все под-компоненты.
- Собрать итоговый компонент с разными сценариями использования.

Собранный в Figma компонент сильно упростил разработку новых фич для грида. Также, упростило создание прототипов для проработки различных сценариев.

empty-image.jpg
<img src="/images/blog/1x/blazor-4.png" srcset="/images/blog/1x/blazor-4.png 1x, /images/blog/2x/blazor-4@2x.png 2x" class="img-fluid">

## Отрисованы новые компоненты

Создание новых компонентов включает следующие шаги: 

- Обсудить требования с ПМом.
- Исследовать решения на рынке.
- Утвердить список фич.
- Найти грамотный подход по клавиатурной навигации (поддержка A11Y).
- Отрисовать компонент и все его составляющие.
- Описать компонент в дизайн-токенах.
- Проработать сценарии для демо-стендов.

### **Пример реализации компонента TreeList**

Компонент TreeList — показывает табличные данные в виде древовидной структуры. Пользователи могут сворачивать и разворачивать данные, как им удобно. 

При подготовке к работе был произведен ресёрч конкурентов, собран список идей и их примерные способы реализации. На каждом этапе приходили синхронизационные встречи с менеджером продукта, разработчиками и другими заинтересованными лицами:

empty-image.jpg
<img src="/images/blog/1x/blazor-5.png" srcset="/images/blog/1x/blazor-5.png 1x, /images/blog/2x/blazor-5@2x.png 2x" class="img-fluid">

Собранный в Figma компонент учитывает все сценарии использовании и состоянии:

empty-image.jpg
<img src="/images/blog/1x/blazor-6.png" srcset="/images/blog/1x/blazor-6.png 1x, /images/blog/2x/blazor-6@2x.png 2x" class="img-fluid">

# **Токенизация**

Каждый компонент представлен в разных темах. Руками отрисовать или исправлять компонент в каждой теме очень дорого и ресурсозатратно.  

Было принято решение использовать дизайн-токены:

- Чтобы быстро обновлять стили компонента под любую тему.
- Гарантировать единообразие решений.
- Использовать токены как мостик между дизайном и разработкой.

Была проведена большая работа над созданием архитектуры и структуры дизайн-токенов:

empty-image.jpg
<img src="/images/blog/1x/blazor-7.png" srcset="/images/blog/1x/blazor-7.png 1x, /images/blog/2x/blazor-7@2x.png 2x" class="img-fluid">

Каждый компонент имеет полное покрытие токенами:

- color,
- font-weight,
- letter-spacing,
- line-height,
- border-radius,
- border-width,
- font-size,
- text-transform,
- opacity,
- box-shadow,
- size.

Такой подход позволяет быстро создавать новые темы, просто выставляя новые значения в токенах. Для работы использовался плагин Tokens Studio for Figma. Потому что он позволяет покрыть большое количество типов токенов, в отличии от встроенного Figma Variables.

В итоге, любой компонент в Figma легко протестировать с другими стилистическими настройками. А разработчики могут передавать значения токенов из Figma напрямую в свои стили.

# **Документирование**

Дизайн-система описывает себя тремя основными способами:

- **Компоненты и сценарии в Figma.** Главная точка входа в дизайн-систему.
- **Дизайн-токены.** Служат мостом между дизайном и кодом.
- **Внутренняя документация.** Содержит договоренности и рекомендации по разным аспектам дизайна: правила наименования, структура токенов, правила отрисовки иконок и так далее. Тут же можно найти результаты ресёрчей относящихся к различным дизайн-задачам.

# **UI Kit**

Одним из результатов работы над дизайн-системой стал выпуск UI кита в Figma.

empty-image.jpg
<img src="/images/blog/1x/blazor-8.png" srcset="/images/blog/1x/blazor-8.png 1x, /images/blog/2x/blazor-8@2x.png 2x" class="img-fluid">

# **Результаты**

- Получилось собрать крепкий каркас дизайн-системы в Figma.
- Сильно улучшилась коммуникация дизайна и продукт-менеджеров.
    - Появились еженедельные созвоны с продукт-менеджерами.
    - Работа над задачами стала идти быстрее, на всех этапах.
- Работа между дизайном и разработкой стала эффективнее.
    - Макеты стали намного подробнее.
    - Дополнительный слой информации передают дизайн-токены.
- Появилась внутренняя документация.
<<<<<<< HEAD
- Пользователи получили UI kit.";s:7:"Summary";s:0:"";s:11:"FormatterID";s:7:"neasden";s:13:"OriginalAlias";s:6:"blazor";s:7:"Uploads";s:439:"a:11:{i:0;s:33:"/images/1x/maxim-petrov-photo.png";i:1;s:28:"/images/blog/1x/blazor-2.png";i:2;s:28:"/images/blog/1x/blazor-1.png";i:3;s:15:"empty-image.jpg";i:4;s:28:"/images/blog/1x/blazor-3.png";i:5;s:28:"/images/blog/1x/blazor-4.png";i:6;s:28:"/images/blog/1x/blazor-5.png";i:7;s:27:"/images/blog/1x/blazor6.png";i:8;s:28:"/images/blog/1x/blazor-6.png";i:9;s:28:"/images/blog/1x/blazor-7.png";i:10;s:28:"/images/blog/1x/blazor-8.png";}";s:11:"IsPublished";s:1:"1";s:13:"IsCommentable";s:1:"0";s:9:"IsVisible";s:1:"1";s:11:"IsFavourite";s:1:"1";s:5:"Stamp";s:10:"1711384202";s:12:"LastModified";s:10:"1711827676";s:6:"Offset";s:5:"14400";s:5:"IsDST";s:1:"0";s:9:"IsIndexed";s:1:"1";s:10:"IsExternal";s:1:"0";s:9:"ReadCount";s:3:"242";s:8:"SourceID";s:1:"0";s:12:"SourceNoteID";s:1:"0";s:13:"SourceNoteURL";s:0:"";s:17:"SourceNoteJSONURL";s:0:"";s:14:"SourceNoteData";s:0:"";s:8:"EntityID";s:1:"5";s:18:"AggregateReadCount";s:2:"15";}}}
=======
- Пользователи получили UI kit.";s:7:"Summary";s:0:"";s:11:"FormatterID";s:7:"neasden";s:13:"OriginalAlias";s:6:"blazor";s:7:"Uploads";s:439:"a:11:{i:0;s:33:"/images/1x/maxim-petrov-photo.png";i:1;s:28:"/images/blog/1x/blazor-2.png";i:2;s:28:"/images/blog/1x/blazor-1.png";i:3;s:15:"empty-image.jpg";i:4;s:28:"/images/blog/1x/blazor-3.png";i:5;s:28:"/images/blog/1x/blazor-4.png";i:6;s:28:"/images/blog/1x/blazor-5.png";i:7;s:27:"/images/blog/1x/blazor6.png";i:8;s:28:"/images/blog/1x/blazor-6.png";i:9;s:28:"/images/blog/1x/blazor-7.png";i:10;s:28:"/images/blog/1x/blazor-8.png";}";s:11:"IsPublished";s:1:"1";s:13:"IsCommentable";s:1:"0";s:9:"IsVisible";s:1:"1";s:11:"IsFavourite";s:1:"1";s:5:"Stamp";s:10:"1711384202";s:12:"LastModified";s:10:"1711827676";s:6:"Offset";s:5:"14400";s:5:"IsDST";s:1:"0";s:9:"IsIndexed";s:1:"1";s:10:"IsExternal";s:1:"0";s:9:"ReadCount";s:2:"15";s:8:"SourceID";s:1:"0";s:12:"SourceNoteID";s:1:"0";s:13:"SourceNoteURL";s:0:"";s:17:"SourceNoteJSONURL";s:0:"";s:14:"SourceNoteData";s:0:"";s:8:"EntityID";s:1:"5";s:18:"AggregateReadCount";s:2:"15";}}}
>>>>>>> origin/main
