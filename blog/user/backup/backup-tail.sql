UPDATE `e2BlogNotes` SET `SubsetID`='1', `Title`='Дизайн-система Blazor', `Text`='DevExpress Blazor — это набор компонентов пользовательского интерфейса. Продукт активно используется в приложениях на платформе Blazor и предлагают мощный набор компонентов: таблицы данных, календари и планировщики, выпадающие списки, диалоговые окна и многие другие. \r\n\r\nЗадача — переосмыслить и создать дизайн-систему в Figma на основе существующих артефактов и наработок.\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/blazor-1.png\" srcset=\"/images/blog/1x/blazor-1.png 1x, /images/blog/2x/blazor-1@2x.png 2x\" class=\"img-fluid\">\r\n\r\n# Вводные\r\n\r\nПо мере развития продукта, стало увеличиваться количество выпускаемых компонентов и их сложность. Предыдущий подход, когда дизайнер рисовал отдельный макет под каждую задачу стал приносить заметные неудобства для команды. Разработка начала сильно обгонять дизайн и многие решения по краевым сценариям стали принимать сами разработчки. Дизайнеру тратил много времени на поиск визуальных и UX багов на поздних этапах разработки компонента или фичи.\r\n\r\nОтдельной проблемой была сложность каждого компонента:\r\n- **Разные темы**. В разных темах компонент не только меняет цвет, но и начинает обладать другими визуальными свойствами.\r\n- **Несколько размеров**. Каждый компонент линейки представлен в трёх размерах. \r\n- **Дополнительные стили**. Большой набор стилистических вариантов для компонентов-атомов.\r\n\r\nНапример, одна только кнопка состоит из 150 вариантов компонента:\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/blazor-2.png\" srcset=\"/images/blog/1x/blazor-2.png 1x, /images/blog/2x/blazor-2@2x.png 2x\" class=\"img-fluid\">\r\n\r\nБыло принято решение менять подход — разработать стандарты, правила постановки задач и проектирования.\r\n\r\n# Цели\r\n\r\nКоманда выделила ресурсы на внедрение полноценной дизайн-системы и поставил перед ней решение следующих проблем:\r\n1. **Оптимизировать работу команды на этапах дизайна и разработки.**\r\nРаньше, эти процессы были довольно хаотичны. Дизайнер брал в задачу в работу и изображал примерную реализацию компонента. Многие краевые сценарии не учитывались. Какие-то решения в процессе разработки менялись на ходу. В итоге, разработка затягивалась, фичи резались и итоговый результат сильно отличался от исходной картинки.\r\n2. **Автоматизация и консистентность**.\r\nБольшой размер и сложность компонентов сильно усложняли внесение любых изменений в дизайн. Даже небольшие стилистические изменения в базовом компоненте типа кнопки приводили к огромному количеству работы со стороны дизайнера. Так нужно было учесть разные темы, размеры и стили.\r\n3. **Консистентность цвета**.\r\nОтдельно стоит отметить проблему с цветом. Многие цвета компонентов в коде рассчитывались с помощью миксинов. Это приводило ко многим проблемам, в том числе, проблемам с контрастностью.\r\n4. **Доступность**\r\nПользователи продукта стали всё чаще интересоваться, насколько компоненты доступны для разных категорий пользователей. Нужно было сформировать подход, как дизайнер должен заказывать грамотные A11Y на этапе проектирования дизайна.\r\n5. **Централизация знаний**\r\nМногие знания о тех или иных дизайн-решениях нигде не фиксировались. Единственным источником знания были участвующие в работе на фичей члены команды.\r\n6. **UI Kit**\r\nЧасть пользователей жаловалась на отсутствие UI кита. Плюс, у конкурентов он уже давно был.\r\n\r\n# Переработка компонентов в Figma с нуля\r\n\r\nДизайн существующих компонентов полностью повторяет функционал кодовой реализации. Учтены все редкие сценарии и пограничные состояния компонентов. Перед отрисовкой изучается API компонента и все сценарии его использования.\r\n\r\n## Пример реализации компонента Grid\r\n\r\nКомпонент Grid является одним из больших и одним из самых популярным компонентов в линейке Blazor. Grid представляет собой компонент для отображения данных в табличном формате, который включает в себя множество функций для управления данными, их представления и настройки, таких как фильтрация, группировка, пагинация, сортировка и многое другое.\r\n\r\nОсновную сложность представляет его размер:\r\n\r\nТак как разные пользователи использую грид по-разному, то компонент получается достаточно гибким по функционалу и возможностям. Всё это отражено в дизайне.\r\n\r\nДля того, чтобы отрисовать такой в Figma пришлось сначала изучить и собрать файл со скриншотами всех состояний компонента. Для этого были изучены демо стенды компоненты, описывающие его стили и API.\r\n\r\nВ итоге, реализованный макет компонента помогает быстрее решать новые задачи и прикидывать прототипы с разными сценариями использования. \r\n\r\n# Разработка новых компонентов\r\n\r\nРазработка дизайна новых компонентов включает в себя исследование решений на рынке, лучшие практики, клавиатурную навигацию, идея для демо стендов, и обсуждение требований с ПМом. В зависимости от задачи, количество пунктов может быть больше или меньше.\r\n\r\n## Пример реализации компонента TreeList\r\n\r\nКомпонент TreeList предназначен для отображения иерархическими данными в виде расширенного списка, который сочетает в себе функциональные возможности древовидной структуры (TreeView) и таблицы (Grid). Это позволяет пользователям легко просматривать, сортировать, фильтровать и редактировать иерархические данные с возможностью разворачивания и сворачивания уровней вложенности данных для удобства восприятия.\r\n\r\nКомпонент TreeList часто используется в приложениях для управления содержимым, файловыми системами, а также в любых приложениях, где требуется эффективная работа с иерархическими данными.\r\n\r\nПеред началом отрисовки компонента был произведен ресёрч реализации решений у других вендоров. Собран список идей и примерные способы реализации. В конце каждого этапа происходили синхрозиционны встречи с ПМом, разработчиками и другими заинтересованными лицами.\r\n\r\n# Токенизация\r\n\r\nКаждый компонент представлен в разных темах. Руками отрисовать каждый компонент в каждой теме очень дорого и ресурсозатратно. Плюс, цена ошибки в таком случае очень высока.\r\n\r\nБыло принято решение использовать дизайн-токены:\r\n- Чтобы быстро обновлять стили компонента под любую тему.\r\n- Гарантировать консистентность решений.\r\n- Использовать как мостик между дизайном и разработкой.\r\n\r\nБыла проведена большая работа над созданием архитектуры и структуры дизайн-токенов:\r\n\r\nК сожалению, для создания грамотной архитектуры, в данном случае, встроенные Figma Variables не подошли. Для работы с токсинами использует Tokens Studio.\r\n\r\nКаждый компонент имеет полное покрытие токенами. Это касается как цветов, так других стилей: бордер, авто-лейаут, тени. \r\n\r\nВ итоге, любой компонент в Fimga легко протестировать с другими стилистическими настройками. А разработчики могут использовать токены для использованиях их значений в файлах стилей.\r\n\r\n# Документирование\r\n\r\nДокументирование покрывается несколькими факторами:\r\n- Сама реализации компонентов в Figma\r\n- Дизайн-токены\r\n- Внутренняя документация\r\n\r\nВнутренняя документация представляет собой правил и рекомендаций: \r\n- правила оформления\r\n- правила работы с дизайн-токенами\r\n- требования по иконкам\r\n- работа с цветовой палитрой\r\n\r\nТут же собраны результаты ресёрчей по тем или иным задач. А также, приятные решения по ним. Это помогает всем членам команды понимать, куда нужно обращаться в первую очередь чтобы найти такую информацию.\r\n\r\n# UI Kit\r\n\r\nРезультатом работы над дизайн-системой послужил выпуск UI кита в Figma. Комьюнити положительно оценило выпуск кита, особенно те пользователи которые просили об этом раньше.  \r\n\r\n# Результаты \r\n\r\nКак результат, получилось собрать крепкий каркас дизайн-системы, которая помогает дизайнерам намного быстрее решать задачи и дальше развивать UX/UI компонентов, а разработчикам использовать дизайн систему как единый источник знаний.', `Summary`='', `FormatterID`='neasden', `OriginalAlias`='blazor', `Uploads`='a:6:{i:0;s:15:\"blazor-1@2x.jpg\";i:1;s:15:\"blazor-2@2x.jpg\";i:2;s:33:\"/images/1x/maxim-petrov-photo.png\";i:3;s:28:\"/images/blog/1x/blazor-2.png\";i:4;s:28:\"/images/blog/1x/blazor-1.png\";i:5;s:15:\"empty-image.jpg\";}', `IsPublished`='1', `IsCommentable`='0', `IsVisible`='1', `IsFavourite`='1', `Stamp`='1711384202', `LastModified`='1711487080', `Offset`='14400', `IsDST`='0', `IsIndexed`='1', `IsExternal`='0', `ReadCount`='1', `SourceID`='0', `SourceNoteID`='0', `SourceNoteURL`='', `SourceNoteJSONURL`='', `SourceNoteData`='' WHERE `SubsetID`=1 AND (`ID`=5);

UPDATE `e2BlogNotes` SET `SubsetID`='1', `Title`='XAF', `Text`='DevExpress XAF — это фреймворк для создания бизнес-приложений. С его помощью можно делать как десктоп, так веб-приложения. Помогает разработчикам сосредоточится на бизнес-логике, а не на деталях реализации интерфейса или архитектуры приложения.\r\n\r\nСо своей стороны, занимался проектированием, развитием и поддержкой UX/UI приложения в связке с ПМом. Разработкой новых фич, улучшение существующих, работой с обратной связью от пользователей.', `Summary`='', `FormatterID`='neasden', `OriginalAlias`='xaf', `Uploads`='a:0:{}', `IsPublished`='1', `IsCommentable`='0', `IsVisible`='1', `IsFavourite`='1', `Stamp`='1711383936', `LastModified`='1711784312', `Offset`='14400', `IsDST`='0', `IsIndexed`='1', `IsExternal`='0', `ReadCount`='1', `SourceID`='0', `SourceNoteID`='0', `SourceNoteURL`='', `SourceNoteJSONURL`='', `SourceNoteData`='' WHERE `SubsetID`=1 AND (`ID`=6);

UPDATE `e2BlogNotes` SET `SubsetID`='1', `Title`='Documentation', `Text`='DevExpress Documentation — одна из самый объемных документации на рынке. Содержит несколько сотен тысяч статей и АПИ. Внутри для её работы создана целая экосистема, включающая в себя множество отдельных компонентов.\r\n\r\n# Вводная\r\n\r\nДолгое время единой системы документации не было. Всё состояло из отдельных проектов и отдавалось пользователям в формате довольно простых HTML файлов, либо в CHM формате.\r\n\r\nС развитием продуктовой линейки и увеличение штата технических писателей такой подход стал приносить неудобства как для сотрудников, так и для пользователей.\r\n\r\nУчитывай количество и объем документов, было принято решение сделать собственную систему документации.\r\n\r\n# Задачи\r\n\r\nСистема документации состоит из различных функциональных компонентов. При разработке дизайна нужно было учесть следующие факторы:\r\n\r\n- **Огромное количество написанных топиков.** Разные топики были написаны разными людьми, в разное время. Поэтому, сильно отличались по структуре. Нужно было найти такой подход к стилям, чтобы старые документы не ломали внешний вид страниц.\r\n- **Документацию читают с разных устройств.** Нужно было сделать документацию такой, чтобы её можно было читать на любом экране.\r\n- **Сделать навигацию по документу удобной.** Документы могут быть большими и сложными. Нужно сделать так, чтобы пользователю было удобно по ним навигироваться.\r\n- **Навигацию по проекту должна быть удобно.** Структура каждого проекта документации древовидна, один проект может быть вложен в другой и так далее. Нужно сделать так, чтобы пользователь понимал, на каком уровне он находится и мог легко навигироваться между документами.\r\n- **Сделать разводящую страницу по проектам.** Новая система документации собирает все проекты в рамках одного сайта. Важно было сделать страницу, где пользователь может выбрать нужный ему проект.\r\n- **Содержимое документа может варьировать от версии продукта и его платформы.**\r\n- **Совместно с техническими писателями подготовить гайдлайны по оформлению топиков.**\r\n- **Учесть оффлайн документацию.** Часть пользователей, в свете специфики бизнеса, используют активно оффлайн версию документации. А именно, CHM. Поэтому, нужно было подготовить стили для оффлайн документации. Учитывая, что CHM поддерживает CSS уровня Internet Explorer 7 (и то не всегда) — это было очень непростой задачей.\r\n- **Поддержать интеграцию с саппорт-центром.** Сегмент пользователей читающих документацию и создающих тикеты в саппорт-центре тесно связан. Важно было найти такое решение, чтобы пользователь имел возможность создать тикет прямо из документации, если ему не понятен какой-то из топиков. И наоборот, если ссылку на топик дал сотрудник саппорт-центра, то нужно иметь возможность дополнительно уточнить у пользователя, помог ли ему этот топик.\r\n- **Сделать документацию доступной.** Сайт документации должен удовлетворять требования A11Y, чтобы им было удобно пользоваться всем пользователям.\r\n\r\n# Результат\r\n\r\nНовая система документации получила положительный фидбек как со стороны пользователей, так и со стороны технических писателей. Основная часть задач была решения в рамках основной работы над проектом, многие дополнительные фичи — в рамках доработок по проекту.\r\n\r\nКроме работы непосредственно над дизайном, я внёс большой вклад во фронденд составляющую сайта:\r\n\r\n- Написал несколько функциональных фич.\r\n- Обновил семантику сайта, для решения проблем связанных с доступностью.\r\n- Активно работал со стилям в коде.\r\n\r\n## Стили, которые работают для разных топиков\r\n\r\n## Доступность со всех устройств\r\n\r\n## Навигация по документу\r\n\r\n## Разводящая страница\r\n\r\n## Версионность\r\n\r\n## Интеграция с саппорт-центром\r\n\r\n## Оффлайн документация\r\n\r\n## Доступность', `Summary`='', `FormatterID`='neasden', `OriginalAlias`='documentation', `Uploads`='a:0:{}', `IsPublished`='1', `IsCommentable`='0', `IsVisible`='1', `IsFavourite`='1', `Stamp`='1711383886', `LastModified`='1711783823', `Offset`='14400', `IsDST`='0', `IsIndexed`='1', `IsExternal`='0', `ReadCount`='1', `SourceID`='0', `SourceNoteID`='0', `SourceNoteURL`='', `SourceNoteJSONURL`='', `SourceNoteData`='' WHERE `SubsetID`=1 AND (`ID`=4);

UPDATE `e2BlogNotes` SET `SubsetID`='1', `Title`='Localization', `Text`='Обновлен устаревший интерфейс. В рамках улучшений было изучено, как пользователи пользуются сервисом. И уже на основе этих данных вносились корректировки в интерфейс. ', `Summary`='', `FormatterID`='neasden', `OriginalAlias`='localization', `Uploads`='a:0:{}', `IsPublished`='1', `IsCommentable`='0', `IsVisible`='1', `IsFavourite`='0', `Stamp`='1711383872', `LastModified`='1711784525', `Offset`='14400', `IsDST`='0', `IsIndexed`='1', `IsExternal`='0', `ReadCount`='1', `SourceID`='0', `SourceNoteID`='0', `SourceNoteURL`='', `SourceNoteJSONURL`='', `SourceNoteData`='' WHERE `SubsetID`=1 AND (`ID`=3);

UPDATE `e2BlogNotes` SET `SubsetID`='1', `Title`='Cloud4RPi', `Text`='Cloud4RPi — это платформа для интернета вещей (IoT), предлагает разработчикам инструменты для быстрого создания и управления IoT устройствами. Поддерживает множество аппаратных платформ, включая Arduino, Raspberry Pi, ESP8266, ESP32 и другие.\r\n\r\nВ рамках работы на проект был разработан интерфейс и сценарии работы с панелью управления IoT девайсами. ', `Summary`='', `FormatterID`='neasden', `OriginalAlias`='cloud4rpi', `Uploads`='a:0:{}', `IsPublished`='1', `IsCommentable`='0', `IsVisible`='1', `IsFavourite`='0', `Stamp`='1711383857', `LastModified`='1711785206', `Offset`='14400', `IsDST`='0', `IsIndexed`='1', `IsExternal`='0', `ReadCount`='2', `SourceID`='0', `SourceNoteID`='0', `SourceNoteURL`='', `SourceNoteJSONURL`='', `SourceNoteData`='' WHERE `SubsetID`=1 AND (`ID`=2);

UPDATE `e2BlogNotes` SET `SubsetID`='1', `Title`='Support Center', `Text`='Система поддержки пользователей, которая включает различные информационные ресурсы: вопросы от пользователей, статьи в базе знаний и истории версий.\r\n\r\nЕжедневно в Support Center создаются сотни новых вопросов и на них отвечают десятки саппорт-инженеров. За годы работы старый интерфейс устарел как внешне, так и с точки зрения удобства и функциональности. Пришла задача полностью переработать платформу, с учётом всех бизнес-требований.\r\n\r\n# Вводная\r\n\r\nСистема состоит из трёх основных порталов:\r\n\r\n- Клиентский портал\r\n- Внутренний портал для сотрудников\r\n- Админ-панель\r\n\r\nКаждым порталом пользуется свой сегмент пользователей. Клиенты компании ожидают простой и понятный интерфейс . В то время как саппорт-инженеры привыкли к определенным сценариям, которые тоже нужно было сохранить.\r\n\r\n# Клиентский портал\r\n\r\nНа этот ресурс были задействованы основные силы. Клиентский портал даёт возможность клиентам задавать вопросы технического характера и получать на них ответы. \r\n\r\nПеред редизайном ставились следующие задачи:\r\n\r\n- **Снизить нагрузку на саппорт-инженеров.** Помочь пользователям находить ответы самостоятельно, если на вопрос уже отвечали ранее или решение описано в документации.\r\n- **Улучшить UX.** Накопился список проблем, которые нужно было решать:\r\n    - **Пользователи выбирают неверный продукт при создании вопроса.** DevExpress разрабатывает и поддерживает десятки продуктов. У каждого продукта могут быть разные платформы и версии. Иногда важно знать, какая ОС установлена у пользователя, каким IDE он пользуется. Нужно было сделать так, чтобы у пользователя не возникали проблемы при выборе нужных значений. Помочь ему на этом пути.\r\n    - **Возникают проблемы при форматировании текста.** Пользователи приходят в поддержку с техническими проблемами. Описание проблемы содержит куски кода или целые архивы с проектами. В старой версии сайта пользователи путались в текстовом редакторе и отправляли не отформатированные куски куда, которые сливались с обычным текстом. Также, пользователи не всегда понимали как аттачить файлы. Всё это приводило к дополнительной нагрузке на саппорт-инженеров.\r\n    - **Пользователи не замечают уведомления об ответах в их тикете.** Проблема касалась как веб-интерфейса, так и уведомлений приходящих пользователю на почту. Пользователи либо не замечали уведомления, либо не понимали к чему они относятся, либо ранее отключали уведомления и забывали об этом. В связи с этим, среднее время на решение таких тикетов значительно увеличивалось.\r\n    - **Клиенты из одной и той же компании не видят вопросы друг друга.** Большинство клиентов предпочитает оставлять свои вопросы приватно. Чтобы их могли видеть только саппорт-инженеры. Из-за этого возникала проблема, что вопросы становились приватными полностью и их не могли видеть даже сотрудники одной и той же компании с разных аккаунтов.\r\n    - **Неудобные фильтры.** Пользователи, что на странице со списком публичных тикетов невозможно ничего найти. Фильтров мало, а то, что есть не всегда работает очевидным образом.\r\n- **Переосмыслить встроенный инструмент “Version History”.**\r\n- **Улучшить аналитику.**\r\n- **Освежить внешний вид.**\r\n\r\n## Подготовка к работе\r\n\r\nПеред началом работы над редизайном была проведена подготовительная работы. Подготовлен общий план работы и проведены встречи со всеми заинтересованными лицами. Был подготовлен итоговый бриф проекта. \r\n\r\nЧасть работ, которые были проведены на этом этапе:\r\n\r\n- **Анализ текущего дизайна.** UX-тестирование текущего сайта, поиск проблем.\r\n- **Ресёрч конкурентов.** Изучение как прямых конкурентов, так и решений крупных платформ. Например, Zendesk, Freshdesk, Zoho Desk.\r\n- **Сбор и анализ существующего фидбека.** За годы работы, накопилось большое количество тикетов, комментарием и другой обратной связи касаемо работы портала. Была проведена большая работу по сбору всей это информации в один документ, её анализу и приоритизации.\r\n- **Сбор информации от саппорт-инженеров.** Инженеры поддержки активнее всего общаются с пользователями и знают детали и проблемы, которые могут быть неизвестны и неочевидны другим членам команды.\r\n- **Изучение текущих данных аналитики и список того, что хотим собирать ещё в новом дизайне.** Для работы с данными использовались:  Google Analytics (+Google Tag Manager), Matomo, внутренние инструменты.\r\n- **Сбор требований от заказчиков и всех заинтересованных лиц.**\r\n- **Подготовка брифа.** Описание проблем, целей и задач. Развёрнутый ответ на вопрос, что мы будем считать успешным редизайном.\r\n\r\n## Процесс\r\n\r\nРабота над сайтом строилась 2-4 недельными спринтами. В конце каждого спринта проводились синхронизационные встречи с заказчиками. \r\n\r\nВ начале работы над дизайном была согласована общая концепция. Отрисованы низко детализированные прототипы с решением основных UX проблем. Найден общий подход к внешнему виду.  \r\n\r\nЧтобы работа над новым дизайном была эффективной и обратная связь поступала как можно быстрее был принят рад мер:\r\n\r\n- Продукт менеджер продукта показывал прототипы и просто картинки небольшой выборке самых активных и заинтересованных пользователей саппорт-центра. Благодаря этому получалось очень быстро собрать много полезной информации, которая помогала намного быстрее замечать точки роста.\r\n- Тесное общение с разработчиками. Так дизайн значительно обгонял разработку, нужно было сразу учитывать технические ограничения. Для этого проводились постоянные встречи между разработчикам, заказчиками и дизайнером. Так мы оценивали техническую сложность каждой фичи и на основе этого принимали решение, будем мы брать её в работу или нет.\r\n- На этапе, когда появилась первая работающая версия сайта, его стали тестировать сотрудники. В первую очередь, к тестированию подключались саппорт-инженеры. На этом этапе было собрано большое количество фидбека как по техническим багам, визуальным багам, так и просто по неудачным UX-решениям.\r\n- На следующем этапе снова к фидбеку снова были подключены активные клиенты. Которые были готовы дать развёрнутый фидбек.\r\n- На одном из финальных этапов сайт стал доступен для всех пользователей, но в виде бета-версии. При этом, каждый пользователь мог вернуться к старой версии сайта. Со временем, пользователей вернувшихся на старый сайт становилось меньше. Также, мы старались собирать фидбек от таких пользователей. Чтобы понять, почему они вернулись на старую версию сайта.\r\n- К новой версии сайта была прикручена продвинутая аналитика.\r\n\r\n## Примеры реализации\r\n\r\n### Релевантные подсказки при создании тикета\r\n\r\n### Подсказки при заполнении деталей, на основе подписки пользователя и прошлых тикетов\r\n\r\n### Упрощена навигация по дискуссии с ветвистой иерархией\r\n\r\n### Обновлён текстовый редактор\r\n\r\n### Обновлены инструменты фильтра на странице со списком тикетов\r\n\r\n### Обновлены почтовые уведомлению, улучшения подписка на уведомления на самом сайте\r\n\r\n# Внутренний портал и админ-панель\r\n\r\nОтдельной крупной задачей была необходимость сделать внутренний портал для сотрудников. Главным вызовом было задача учесть флоу саппорт-инженеров из разных команд. Ингода оно сильно отличалось и нужно было найти решения, которые устроят всех.\r\n\r\nДля этого проводилось множество сложных встреч с саппорт-инженерами из разных команд и топ-саппортом. По каким-то сценариям приходилось идти на компромиссы, по каким-то — выбирать один вариант и убеждать в правильности этого варианта остальных.\r\n\r\nВ результате, судя по опросам и личным разговорам, большая часть сотрудников осталась довольна новой системой.\r\n\r\nТакже, для более гибкой работы и настройки системы под текущие нужды бизнеса была спроектирована админ-панель, где можно точечно настроить различные параметры системы.\r\n\r\nТак как решения внутренние, вдаваться в подробности и показывать скриншоты я не могу.  \r\n\r\n# Результаты\r\n\r\nВ итоге, полный переход на новую версию получился безболезненным. На каждой итерации выявлялись проблемные места и не учтённые сценарий. Большая часть из них решалась, от небольшой части осознанно отказывались.\r\n\r\nСтарая версия сайта постепенно была отключена, когда количество её пользователей стало совсем небольшим.\r\n\r\nОбщая оценка редизайна была оценена как успешная. Как со стороны клиентов, так и со стороны сотрудников. Поставленные перед редизайном цели были достигнуты:\r\n\r\n- **Уменьшилась нагрузка на саппорт-инженеров.**\r\n    - Пользователи стали чаще находить решения самостоятельно: улучшен движок поиска, предлагаются релевантные ссылки при создании тикета, улучшена фильтрация.\r\n    - Пользователи стали реже ошибаться с выбором платформы/продукта и других деталей при создании тикета.\r\n    - Во внутреннем портале появились инструменты, помогающие саппорт-инженерам быстрее отвечать на тикеты, ответ на которые уже давался ранее.\r\n- **Не отформатированные тикеты появляются гораздо реже.** Решилась проблема с тем, что пользователи не понимали, как отправлять аттачи.\r\n- **Уменьшилось количество проблем, когда пользователи не получают уведомления вовремя.**\r\n    - В настройках уведомлений появился отдельный чекбокс, для получения уведомлений от саппорт-центра (раньше был единый чекбокс, для всех почтовых рассылок).\r\n    - Даже если пользователь отключил уведомления от таких рассылок, то саппорт-инженер будет об этом знать. И, если у пользователя возникают с этим проблемы, подсказать варианты решения.\r\n    - Сами почтовые уведомления стали понятнее, появилась возможность подключить браузерные уведомления.\r\n    - Появилась возможность подписать на рассылку на любой тикет со страницы этого тикета.\r\n- **Более точечно настроена аналитика.**\r\n    - Саппорт-инженер теперь может видеть карточку пользователя с историей посещений тикетов и документов в документации. Так инженер поддержки сразу может понять, какие ссылки есть смысл советовать, а какие — нет, так как пользователь их уже посещал.\r\n    - Добавлены ивенты на целевые действия.\r\n    - Созданный внутренние дашборды с анализом различных данных, необходимых для оценки поступаемого  количества тикетов и оценки эффективности саппорта.\r\n- **Поиск по тикетам стал гибче и проще.**\r\n    - Были докручены мета-теги, чтобы тикеты лучше искались поисковиками.\r\n    - Переосмыслены фильтры, добавлены готовые пресеты и возможность подписаться на созданный фильтр.\r\n    - Оптимизирована внутренняя страница поиска.\r\n- **Сделана мобильная версия клиентского портала.**', `Summary`='', `FormatterID`='neasden', `OriginalAlias`='support-center', `Uploads`='a:0:{}', `IsPublished`='1', `IsCommentable`='0', `IsVisible`='1', `IsFavourite`='1', `Stamp`='1711383800', `LastModified`='1711728680', `Offset`='14400', `IsDST`='0', `IsIndexed`='1', `IsExternal`='0', `ReadCount`='1', `SourceID`='0', `SourceNoteID`='0', `SourceNoteURL`='', `SourceNoteJSONURL`='', `SourceNoteData`='' WHERE `SubsetID`=1 AND (`ID`=1);

UPDATE `e2BlogKeywords` SET `IsFavourite`='1' WHERE `SubsetID`=1 AND (`ID`=5);

UPDATE `e2BlogKeywords` SET `IsFavourite`='1' WHERE `SubsetID`=1 AND (`ID`=2);

UPDATE `e2BlogKeywords` SET `IsFavourite`='1' WHERE `SubsetID`=1 AND (`ID`=4);

UPDATE `e2BlogKeywords` SET `IsFavourite`='1' WHERE `SubsetID`=1 AND (`ID`=1);

UPDATE `e2BlogKeywords` SET `IsFavourite`='1' WHERE `SubsetID`=1 AND (`ID`=3);

UPDATE `e2BlogAliases` SET `EntityType`='n', `EntityID`='5', `Alias`='blazor', `Stamp`='1711787150' WHERE `SubsetID`=1 AND (`ID`=6);

UPDATE `e2BlogNotes` SET `SubsetID`='1', `Title`='Дизайн-система Blazor', `Text`='DevExpress Blazor — это набор компонентов пользовательского интерфейса. Продукт активно используется в приложениях на платформе Blazor и предлагают мощный набор компонентов: таблицы данных, календари и планировщики, выпадающие списки, диалоговые окна и многие другие. \r\n\r\nЗадача — переосмыслить и создать дизайн-систему в Figma на основе существующих артефактов и наработок.\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/blazor-1.png\" srcset=\"/images/blog/1x/blazor-1.png 1x, /images/blog/2x/blazor-1@2x.png 2x\" class=\"img-fluid\">\r\n\r\n# Вводные\r\n\r\nПо мере развития продукта, стало увеличиваться количество выпускаемых компонентов и их сложность. Предыдущий подход, когда дизайнер рисовал отдельный макет под каждую задачу стал приносить заметные неудобства для команды. Разработка начала сильно обгонять дизайн и многие решения по краевым сценариям стали принимать сами разработчки. Дизайнеру тратил много времени на поиск визуальных и UX багов на поздних этапах разработки компонента или фичи.\r\n\r\nОтдельной проблемой была сложность каждого компонента:\r\n- **Разные темы**. В разных темах компонент не только меняет цвет, но и начинает обладать другими визуальными свойствами.\r\n- **Несколько размеров**. Каждый компонент линейки представлен в трёх размерах. \r\n- **Дополнительные стили**. Большой набор стилистических вариантов для компонентов-атомов.\r\n\r\nНапример, одна только кнопка состоит из 150 вариантов компонента:\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/blazor-2.png\" srcset=\"/images/blog/1x/blazor-2.png 1x, /images/blog/2x/blazor-2@2x.png 2x\" class=\"img-fluid\">\r\n\r\nБыло принято решение менять подход — разработать стандарты, правила постановки задач и проектирования.\r\n\r\n# Цели\r\n\r\nКоманда выделила ресурсы на внедрение полноценной дизайн-системы и поставил перед ней решение следующих проблем:\r\n1. **Оптимизировать работу команды на этапах дизайна и разработки.**\r\nРаньше, эти процессы были довольно хаотичны. Дизайнер брал в задачу в работу и изображал примерную реализацию компонента. Многие краевые сценарии не учитывались. Какие-то решения в процессе разработки менялись на ходу. В итоге, разработка затягивалась, фичи резались и итоговый результат сильно отличался от исходной картинки.\r\n2. **Автоматизация и консистентность**.\r\nБольшой размер и сложность компонентов сильно усложняли внесение любых изменений в дизайн. Даже небольшие стилистические изменения в базовом компоненте типа кнопки приводили к огромному количеству работы со стороны дизайнера. Так нужно было учесть разные темы, размеры и стили.\r\n3. **Консистентность цвета**.\r\nОтдельно стоит отметить проблему с цветом. Многие цвета компонентов в коде рассчитывались с помощью миксинов. Это приводило ко многим проблемам, в том числе, проблемам с контрастностью.\r\n4. **Доступность**\r\nПользователи продукта стали всё чаще интересоваться, насколько компоненты доступны для разных категорий пользователей. Нужно было сформировать подход, как дизайнер должен заказывать грамотные A11Y на этапе проектирования дизайна.\r\n5. **Централизация знаний**\r\nМногие знания о тех или иных дизайн-решениях нигде не фиксировались. Единственным источником знания были участвующие в работе на фичей члены команды.\r\n6. **UI Kit**\r\nЧасть пользователей жаловалась на отсутствие UI кита. Плюс, у конкурентов он уже давно был.\r\n\r\n# Переработка компонентов в Figma с нуля\r\n\r\nДизайн существующих компонентов полностью повторяет функционал кодовой реализации. Учтены все редкие сценарии и пограничные состояния компонентов. Перед отрисовкой изучается API компонента и все сценарии его использования.\r\n\r\n## Пример реализации компонента Grid\r\n\r\nКомпонент Grid является одним из больших и одним из самых популярным компонентов в линейке Blazor. Grid представляет собой компонент для отображения данных в табличном формате, который включает в себя множество функций для управления данными, их представления и настройки, таких как фильтрация, группировка, пагинация, сортировка и многое другое.\r\n\r\nОсновную сложность представляет его размер:\r\n\r\nТак как разные пользователи использую грид по-разному, то компонент получается достаточно гибким по функционалу и возможностям. Всё это отражено в дизайне.\r\n\r\nДля того, чтобы отрисовать такой в Figma пришлось сначала изучить и собрать файл со скриншотами всех состояний компонента. Для этого были изучены демо стенды компоненты, описывающие его стили и API.\r\n\r\nВ итоге, реализованный макет компонента помогает быстрее решать новые задачи и прикидывать прототипы с разными сценариями использования. \r\n\r\n# Разработка новых компонентов\r\n\r\nРазработка дизайна новых компонентов включает в себя исследование решений на рынке, лучшие практики, клавиатурную навигацию, идея для демо стендов, и обсуждение требований с ПМом. В зависимости от задачи, количество пунктов может быть больше или меньше.\r\n\r\n## Пример реализации компонента TreeList\r\n\r\nКомпонент TreeList предназначен для отображения иерархическими данными в виде расширенного списка, который сочетает в себе функциональные возможности древовидной структуры (TreeView) и таблицы (Grid). Это позволяет пользователям легко просматривать, сортировать, фильтровать и редактировать иерархические данные с возможностью разворачивания и сворачивания уровней вложенности данных для удобства восприятия.\r\n\r\nКомпонент TreeList часто используется в приложениях для управления содержимым, файловыми системами, а также в любых приложениях, где требуется эффективная работа с иерархическими данными.\r\n\r\nПеред началом отрисовки компонента был произведен ресёрч реализации решений у других вендоров. Собран список идей и примерные способы реализации. В конце каждого этапа происходили синхрозиционны встречи с ПМом, разработчиками и другими заинтересованными лицами.\r\n\r\n# Токенизация\r\n\r\nКаждый компонент представлен в разных темах. Руками отрисовать каждый компонент в каждой теме очень дорого и ресурсозатратно. Плюс, цена ошибки в таком случае очень высока.\r\n\r\nБыло принято решение использовать дизайн-токены:\r\n- Чтобы быстро обновлять стили компонента под любую тему.\r\n- Гарантировать консистентность решений.\r\n- Использовать как мостик между дизайном и разработкой.\r\n\r\nБыла проведена большая работа над созданием архитектуры и структуры дизайн-токенов:\r\n\r\nК сожалению, для создания грамотной архитектуры, в данном случае, встроенные Figma Variables не подошли. Для работы с токсинами использует Tokens Studio.\r\n\r\nКаждый компонент имеет полное покрытие токенами. Это касается как цветов, так других стилей: бордер, авто-лейаут, тени. \r\n\r\nВ итоге, любой компонент в Fimga легко протестировать с другими стилистическими настройками. А разработчики могут использовать токены для использованиях их значений в файлах стилей.\r\n\r\n# Документирование\r\n\r\nДокументирование покрывается несколькими факторами:\r\n- Сама реализации компонентов в Figma\r\n- Дизайн-токены\r\n- Внутренняя документация\r\n\r\nВнутренняя документация представляет собой правил и рекомендаций: \r\n- правила оформления\r\n- правила работы с дизайн-токенами\r\n- требования по иконкам\r\n- работа с цветовой палитрой\r\n\r\nТут же собраны результаты ресёрчей по тем или иным задач. А также, приятные решения по ним. Это помогает всем членам команды понимать, куда нужно обращаться в первую очередь чтобы найти такую информацию.\r\n\r\n# UI Kit\r\n\r\nРезультатом работы над дизайн-системой послужил выпуск UI кита в Figma. Комьюнити положительно оценило выпуск кита, особенно те пользователи которые просили об этом раньше.  \r\n\r\n# Результаты \r\n\r\nКак результат, получилось собрать крепкий каркас дизайн-системы, которая помогает дизайнерам намного быстрее решать задачи и дальше развивать UX/UI компонентов, а разработчикам использовать дизайн систему как единый источник знаний.', `Summary`='', `FormatterID`='neasden', `OriginalAlias`='blazor', `Uploads`='a:6:{i:0;s:15:\"blazor-1@2x.jpg\";i:1;s:15:\"blazor-2@2x.jpg\";i:2;s:33:\"/images/1x/maxim-petrov-photo.png\";i:3;s:28:\"/images/blog/1x/blazor-2.png\";i:4;s:28:\"/images/blog/1x/blazor-1.png\";i:5;s:15:\"empty-image.jpg\";}', `IsPublished`='1', `IsCommentable`='0', `IsVisible`='1', `IsFavourite`='1', `Stamp`='1711384202', `LastModified`='1711787150', `Offset`='14400', `IsDST`='0', `IsIndexed`='0', `IsExternal`='0', `ReadCount`='1', `SourceID`='0', `SourceNoteID`='0', `SourceNoteURL`='', `SourceNoteJSONURL`='', `SourceNoteData`='' WHERE `SubsetID`=1 AND (`ID`=5);

UPDATE `e2BlogNotes` SET `SubsetID`='1', `Title`='Дизайн-система Blazor', `Text`='DevExpress Blazor — это набор компонентов пользовательского интерфейса. Продукт активно используется в приложениях на платформе Blazor и предлагают мощный набор компонентов: таблицы данных, календари и планировщики, выпадающие списки, диалоговые окна и многие другие. \r\n\r\nЗадача — переосмыслить и создать дизайн-систему в Figma на основе существующих артефактов и наработок.\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/blazor-1.png\" srcset=\"/images/blog/1x/blazor-1.png 1x, /images/blog/2x/blazor-1@2x.png 2x\" class=\"img-fluid\">\r\n\r\n# Вводные\r\n\r\nПо мере развития продукта, стало увеличиваться количество выпускаемых компонентов и их сложность. Предыдущий подход, когда дизайнер рисовал отдельный макет под каждую задачу стал приносить заметные неудобства для команды. Разработка начала сильно обгонять дизайн и многие решения по краевым сценариям стали принимать сами разработчки. Дизайнеру тратил много времени на поиск визуальных и UX багов на поздних этапах разработки компонента или фичи.\r\n\r\nОтдельной проблемой была сложность каждого компонента:\r\n- **Разные темы**. В разных темах компонент не только меняет цвет, но и начинает обладать другими визуальными свойствами.\r\n- **Несколько размеров**. Каждый компонент линейки представлен в трёх размерах. \r\n- **Дополнительные стили**. Большой набор стилистических вариантов для компонентов-атомов.\r\n\r\nНапример, одна только кнопка состоит из 150 вариантов компонента:\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/blazor-2.png\" srcset=\"/images/blog/1x/blazor-2.png 1x, /images/blog/2x/blazor-2@2x.png 2x\" class=\"img-fluid\">\r\n\r\nБыло принято решение менять подход — разработать стандарты, правила постановки задач и проектирования.\r\n\r\n# Цели\r\n\r\nКоманда выделила ресурсы на внедрение полноценной дизайн-системы и поставил перед ней решение следующих проблем:\r\n1. **Оптимизировать работу команды на этапах дизайна и разработки.**\r\nРаньше, эти процессы были довольно хаотичны. Дизайнер брал в задачу в работу и изображал примерную реализацию компонента. Многие краевые сценарии не учитывались. Какие-то решения в процессе разработки менялись на ходу. В итоге, разработка затягивалась, фичи резались и итоговый результат сильно отличался от исходной картинки.\r\n2. **Автоматизация и консистентность**.\r\nБольшой размер и сложность компонентов сильно усложняли внесение любых изменений в дизайн. Даже небольшие стилистические изменения в базовом компоненте типа кнопки приводили к огромному количеству работы со стороны дизайнера. Так нужно было учесть разные темы, размеры и стили.\r\n3. **Консистентность цвета**.\r\nОтдельно стоит отметить проблему с цветом. Многие цвета компонентов в коде рассчитывались с помощью миксинов. Это приводило ко многим проблемам, в том числе, проблемам с контрастностью.\r\n4. **Доступность**\r\nПользователи продукта стали всё чаще интересоваться, насколько компоненты доступны для разных категорий пользователей. Нужно было сформировать подход, как дизайнер должен заказывать грамотные A11Y на этапе проектирования дизайна.\r\n5. **Централизация знаний**\r\nМногие знания о тех или иных дизайн-решениях нигде не фиксировались. Единственным источником знания были участвующие в работе на фичей члены команды.\r\n6. **UI Kit**\r\nЧасть пользователей жаловалась на отсутствие UI кита. Плюс, у конкурентов он уже давно был.\r\n\r\n# Переработка компонентов в Figma с нуля\r\n\r\nДизайн существующих компонентов полностью повторяет функционал кодовой реализации. Учтены все редкие сценарии и пограничные состояния компонентов. Перед отрисовкой изучается API компонента и все сценарии его использования.\r\n\r\n## Пример реализации компонента Grid\r\n\r\nКомпонент Grid является одним из больших и одним из самых популярным компонентов в линейке Blazor. Grid представляет собой компонент для отображения данных в табличном формате, который включает в себя множество функций для управления данными, их представления и настройки, таких как фильтрация, группировка, пагинация, сортировка и многое другое.\r\n\r\nОсновную сложность представляет его размер:\r\n\r\nТак как разные пользователи использую грид по-разному, то компонент получается достаточно гибким по функционалу и возможностям. Всё это отражено в дизайне.\r\n\r\nДля того, чтобы отрисовать такой в Figma пришлось сначала изучить и собрать файл со скриншотами всех состояний компонента. Для этого были изучены демо стенды компоненты, описывающие его стили и API.\r\n\r\nВ итоге, реализованный макет компонента помогает быстрее решать новые задачи и прикидывать прототипы с разными сценариями использования. \r\n\r\n# Разработка новых компонентов\r\n\r\nРазработка дизайна новых компонентов включает в себя исследование решений на рынке, лучшие практики, клавиатурную навигацию, идея для демо стендов, и обсуждение требований с ПМом. В зависимости от задачи, количество пунктов может быть больше или меньше.\r\n\r\n## Пример реализации компонента TreeList\r\n\r\nКомпонент TreeList предназначен для отображения иерархическими данными в виде расширенного списка, который сочетает в себе функциональные возможности древовидной структуры (TreeView) и таблицы (Grid). Это позволяет пользователям легко просматривать, сортировать, фильтровать и редактировать иерархические данные с возможностью разворачивания и сворачивания уровней вложенности данных для удобства восприятия.\r\n\r\nКомпонент TreeList часто используется в приложениях для управления содержимым, файловыми системами, а также в любых приложениях, где требуется эффективная работа с иерархическими данными.\r\n\r\nПеред началом отрисовки компонента был произведен ресёрч реализации решений у других вендоров. Собран список идей и примерные способы реализации. В конце каждого этапа происходили синхрозиционны встречи с ПМом, разработчиками и другими заинтересованными лицами.\r\n\r\n# Токенизация\r\n\r\nКаждый компонент представлен в разных темах. Руками отрисовать каждый компонент в каждой теме очень дорого и ресурсозатратно. Плюс, цена ошибки в таком случае очень высока.\r\n\r\nБыло принято решение использовать дизайн-токены:\r\n- Чтобы быстро обновлять стили компонента под любую тему.\r\n- Гарантировать консистентность решений.\r\n- Использовать как мостик между дизайном и разработкой.\r\n\r\nБыла проведена большая работа над созданием архитектуры и структуры дизайн-токенов:\r\n\r\nК сожалению, для создания грамотной архитектуры, в данном случае, встроенные Figma Variables не подошли. Для работы с токсинами использует Tokens Studio.\r\n\r\nКаждый компонент имеет полное покрытие токенами. Это касается как цветов, так других стилей: бордер, авто-лейаут, тени. \r\n\r\nВ итоге, любой компонент в Fimga легко протестировать с другими стилистическими настройками. А разработчики могут использовать токены для использованиях их значений в файлах стилей.\r\n\r\n# Документирование\r\n\r\nДокументирование покрывается несколькими факторами:\r\n- Сама реализации компонентов в Figma\r\n- Дизайн-токены\r\n- Внутренняя документация\r\n\r\nВнутренняя документация представляет собой правил и рекомендаций: \r\n- правила оформления\r\n- правила работы с дизайн-токенами\r\n- требования по иконкам\r\n- работа с цветовой палитрой\r\n\r\nТут же собраны результаты ресёрчей по тем или иным задач. А также, приятные решения по ним. Это помогает всем членам команды понимать, куда нужно обращаться в первую очередь чтобы найти такую информацию.\r\n\r\n# UI Kit\r\n\r\nРезультатом работы над дизайн-системой послужил выпуск UI кита в Figma. Комьюнити положительно оценило выпуск кита, особенно те пользователи которые просили об этом раньше.  \r\n\r\n# Результаты \r\n\r\nКак результат, получилось собрать крепкий каркас дизайн-системы, которая помогает дизайнерам намного быстрее решать задачи и дальше развивать UX/UI компонентов, а разработчикам использовать дизайн систему как единый источник знаний.', `Summary`='', `FormatterID`='neasden', `OriginalAlias`='blazor', `Uploads`='a:6:{i:0;s:15:\"blazor-1@2x.jpg\";i:1;s:15:\"blazor-2@2x.jpg\";i:2;s:33:\"/images/1x/maxim-petrov-photo.png\";i:3;s:28:\"/images/blog/1x/blazor-2.png\";i:4;s:28:\"/images/blog/1x/blazor-1.png\";i:5;s:15:\"empty-image.jpg\";}', `IsPublished`='1', `IsCommentable`='0', `IsVisible`='1', `IsFavourite`='1', `Stamp`='1711384202', `LastModified`='1711787150', `Offset`='14400', `IsDST`='0', `IsIndexed`='1', `IsExternal`='0', `ReadCount`='1', `SourceID`='0', `SourceNoteID`='0', `SourceNoteURL`='', `SourceNoteJSONURL`='', `SourceNoteData`='' WHERE `SubsetID`=1 AND (`ID`=5);

DELETE FROM `e2BlogNotesKeywords` WHERE `SubsetID`=1 AND `NoteID`='5';

INSERT INTO `e2BlogKeywords` (`SubsetID`, `Keyword`, `OriginalAlias`, `Description`, `IsVisible`) VALUES (1, 'Blazor', 'blazor-2', '', '1');

INSERT INTO `e2BlogAliases` (`SubsetID`, `EntityType`, `EntityID`, `Alias`, `Stamp`) VALUES (1, 't', '6', 'blazor-2', '1711787150');

INSERT INTO `e2BlogNotesKeywords` (`SubsetID`, `NoteID`, `KeywordID`) VALUES (1, 5, 6);

UPDATE `e2BlogKeywords` SET `IsFavourite`='1' WHERE `SubsetID`=1 AND (`ID`=6);

UPDATE `e2BlogAliases` SET `EntityType`='n', `EntityID`='5', `Alias`='blazor', `Stamp`='1711787632' WHERE `SubsetID`=1 AND (`ID`=6);

UPDATE `e2BlogNotes` SET `SubsetID`='1', `Title`='Дизайн-система Blazor', `Text`='DevExpress Blazor — это набор компонентов пользовательского интерфейса. Продукт активно используется в приложениях на платформе Blazor и предлагают мощный набор компонентов: таблицы данных, календари и планировщики, выпадающие списки, диалоговые окна и многие другие. \r\n\r\nЗадача — переосмыслить и создать дизайн-систему в Figma на основе существующих артефактов и наработок.\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/blazor-1.png\" srcset=\"/images/blog/1x/blazor-1.png 1x, /images/blog/2x/blazor-1@2x.png 2x\" class=\"img-fluid\">\r\n\r\n# Вводные\r\n\r\nПо мере развития продукта, стало увеличиваться количество выпускаемых компонентов и их сложность. Предыдущий подход, когда дизайнер рисовал отдельный макет под каждую задачу стал приносить заметные неудобства для команды. Разработка начала сильно обгонять дизайн и многие решения по краевым сценариям стали принимать сами разработчки. Дизайнеру тратил много времени на поиск визуальных и UX багов на поздних этапах разработки компонента или фичи.\r\n\r\nОтдельной проблемой была сложность каждого компонента:\r\n- **Разные темы**. В разных темах компонент не только меняет цвет, но и начинает обладать другими визуальными свойствами.\r\n- **Несколько размеров**. Каждый компонент линейки представлен в трёх размерах. \r\n- **Дополнительные стили**. Большой набор стилистических вариантов для компонентов-атомов.\r\n\r\nНапример, одна только кнопка состоит из 150 вариантов компонента:\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/blazor-2.png\" srcset=\"/images/blog/1x/blazor-2.png 1x, /images/blog/2x/blazor-2@2x.png 2x\" class=\"img-fluid\">\r\n\r\nБыло принято решение менять подход — разработать стандарты, правила постановки задач и проектирования.\r\n\r\n# Цели\r\n\r\nКоманда выделила ресурсы на внедрение полноценной дизайн-системы и поставил перед ней решение следующих проблем:\r\n1. **Оптимизировать работу команды на этапах дизайна и разработки.**\r\nРаньше, эти процессы были довольно хаотичны. Дизайнер брал в задачу в работу и изображал примерную реализацию компонента. Многие краевые сценарии не учитывались. Какие-то решения в процессе разработки менялись на ходу. В итоге, разработка затягивалась, фичи резались и итоговый результат сильно отличался от исходной картинки.\r\n2. **Автоматизация и консистентность**.\r\nБольшой размер и сложность компонентов сильно усложняли внесение любых изменений в дизайн. Даже небольшие стилистические изменения в базовом компоненте типа кнопки приводили к огромному количеству работы со стороны дизайнера. Так нужно было учесть разные темы, размеры и стили.\r\n3. **Консистентность цвета**.\r\nОтдельно стоит отметить проблему с цветом. Многие цвета компонентов в коде рассчитывались с помощью миксинов. Это приводило ко многим проблемам, в том числе, проблемам с контрастностью.\r\n4. **Доступность**\r\nПользователи продукта стали всё чаще интересоваться, насколько компоненты доступны для разных категорий пользователей. Нужно было сформировать подход, как дизайнер должен заказывать грамотные A11Y на этапе проектирования дизайна.\r\n5. **Централизация знаний**\r\nМногие знания о тех или иных дизайн-решениях нигде не фиксировались. Единственным источником знания были участвующие в работе на фичей члены команды.\r\n6. **UI Kit**\r\nЧасть пользователей жаловалась на отсутствие UI кита. Плюс, у конкурентов он уже давно был.\r\n\r\n# Переработка компонентов в Figma с нуля\r\n\r\nДизайн существующих компонентов полностью повторяет функционал кодовой реализации. Учтены все редкие сценарии и пограничные состояния компонентов. Перед отрисовкой изучается API компонента и все сценарии его использования.\r\n\r\n## Пример реализации компонента Grid\r\n\r\nКомпонент Grid является одним из больших и одним из самых популярным компонентов в линейке Blazor. Grid представляет собой компонент для отображения данных в табличном формате, который включает в себя множество функций для управления данными, их представления и настройки, таких как фильтрация, группировка, пагинация, сортировка и многое другое.\r\n\r\nОсновную сложность представляет его размер:\r\n\r\nТак как разные пользователи использую грид по-разному, то компонент получается достаточно гибким по функционалу и возможностям. Всё это отражено в дизайне.\r\n\r\nДля того, чтобы отрисовать такой в Figma пришлось сначала изучить и собрать файл со скриншотами всех состояний компонента. Для этого были изучены демо стенды компоненты, описывающие его стили и API.\r\n\r\nВ итоге, реализованный макет компонента помогает быстрее решать новые задачи и прикидывать прототипы с разными сценариями использования. \r\n\r\n# Разработка новых компонентов\r\n\r\nРазработка дизайна новых компонентов включает в себя исследование решений на рынке, лучшие практики, клавиатурную навигацию, идея для демо стендов, и обсуждение требований с ПМом. В зависимости от задачи, количество пунктов может быть больше или меньше.\r\n\r\n## Пример реализации компонента TreeList\r\n\r\nКомпонент TreeList предназначен для отображения иерархическими данными в виде расширенного списка, который сочетает в себе функциональные возможности древовидной структуры (TreeView) и таблицы (Grid). Это позволяет пользователям легко просматривать, сортировать, фильтровать и редактировать иерархические данные с возможностью разворачивания и сворачивания уровней вложенности данных для удобства восприятия.\r\n\r\nКомпонент TreeList часто используется в приложениях для управления содержимым, файловыми системами, а также в любых приложениях, где требуется эффективная работа с иерархическими данными.\r\n\r\nПеред началом отрисовки компонента был произведен ресёрч реализации решений у других вендоров. Собран список идей и примерные способы реализации. В конце каждого этапа происходили синхрозиционны встречи с ПМом, разработчиками и другими заинтересованными лицами.\r\n\r\n# Токенизация\r\n\r\nКаждый компонент представлен в разных темах. Руками отрисовать каждый компонент в каждой теме очень дорого и ресурсозатратно. Плюс, цена ошибки в таком случае очень высока.\r\n\r\nБыло принято решение использовать дизайн-токены:\r\n- Чтобы быстро обновлять стили компонента под любую тему.\r\n- Гарантировать консистентность решений.\r\n- Использовать как мостик между дизайном и разработкой.\r\n\r\nБыла проведена большая работа над созданием архитектуры и структуры дизайн-токенов:\r\n\r\nК сожалению, для создания грамотной архитектуры, в данном случае, встроенные Figma Variables не подошли. Для работы с токсинами использует Tokens Studio.\r\n\r\nКаждый компонент имеет полное покрытие токенами. Это касается как цветов, так других стилей: бордер, авто-лейаут, тени. \r\n\r\nВ итоге, любой компонент в Fimga легко протестировать с другими стилистическими настройками. А разработчики могут использовать токены для использованиях их значений в файлах стилей.\r\n\r\n# Документирование\r\n\r\nДокументирование покрывается несколькими факторами:\r\n- Сама реализации компонентов в Figma\r\n- Дизайн-токены\r\n- Внутренняя документация\r\n\r\nВнутренняя документация представляет собой правил и рекомендаций: \r\n- правила оформления\r\n- правила работы с дизайн-токенами\r\n- требования по иконкам\r\n- работа с цветовой палитрой\r\n\r\nТут же собраны результаты ресёрчей по тем или иным задач. А также, приятные решения по ним. Это помогает всем членам команды понимать, куда нужно обращаться в первую очередь чтобы найти такую информацию.\r\n\r\n# UI Kit\r\n\r\nРезультатом работы над дизайн-системой послужил выпуск UI кита в Figma. Комьюнити положительно оценило выпуск кита, особенно те пользователи которые просили об этом раньше.  \r\n\r\n# Результаты \r\n\r\nКак результат, получилось собрать крепкий каркас дизайн-системы, которая помогает дизайнерам намного быстрее решать задачи и дальше развивать UX/UI компонентов, а разработчикам использовать дизайн систему как единый источник знаний.', `Summary`='', `FormatterID`='neasden', `OriginalAlias`='blazor', `Uploads`='a:6:{i:0;s:15:\"blazor-1@2x.jpg\";i:1;s:15:\"blazor-2@2x.jpg\";i:2;s:33:\"/images/1x/maxim-petrov-photo.png\";i:3;s:28:\"/images/blog/1x/blazor-2.png\";i:4;s:28:\"/images/blog/1x/blazor-1.png\";i:5;s:15:\"empty-image.jpg\";}', `IsPublished`='1', `IsCommentable`='0', `IsVisible`='1', `IsFavourite`='1', `Stamp`='1711384202', `LastModified`='1711787632', `Offset`='14400', `IsDST`='0', `IsIndexed`='0', `IsExternal`='0', `ReadCount`='1', `SourceID`='0', `SourceNoteID`='0', `SourceNoteURL`='', `SourceNoteJSONURL`='', `SourceNoteData`='' WHERE `SubsetID`=1 AND (`ID`=5);

UPDATE `e2BlogNotes` SET `SubsetID`='1', `Title`='Дизайн-система Blazor', `Text`='DevExpress Blazor — это набор компонентов пользовательского интерфейса. Продукт активно используется в приложениях на платформе Blazor и предлагают мощный набор компонентов: таблицы данных, календари и планировщики, выпадающие списки, диалоговые окна и многие другие. \r\n\r\nЗадача — переосмыслить и создать дизайн-систему в Figma на основе существующих артефактов и наработок.\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/blazor-1.png\" srcset=\"/images/blog/1x/blazor-1.png 1x, /images/blog/2x/blazor-1@2x.png 2x\" class=\"img-fluid\">\r\n\r\n# Вводные\r\n\r\nПо мере развития продукта, стало увеличиваться количество выпускаемых компонентов и их сложность. Предыдущий подход, когда дизайнер рисовал отдельный макет под каждую задачу стал приносить заметные неудобства для команды. Разработка начала сильно обгонять дизайн и многие решения по краевым сценариям стали принимать сами разработчки. Дизайнеру тратил много времени на поиск визуальных и UX багов на поздних этапах разработки компонента или фичи.\r\n\r\nОтдельной проблемой была сложность каждого компонента:\r\n- **Разные темы**. В разных темах компонент не только меняет цвет, но и начинает обладать другими визуальными свойствами.\r\n- **Несколько размеров**. Каждый компонент линейки представлен в трёх размерах. \r\n- **Дополнительные стили**. Большой набор стилистических вариантов для компонентов-атомов.\r\n\r\nНапример, одна только кнопка состоит из 150 вариантов компонента:\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/blazor-2.png\" srcset=\"/images/blog/1x/blazor-2.png 1x, /images/blog/2x/blazor-2@2x.png 2x\" class=\"img-fluid\">\r\n\r\nБыло принято решение менять подход — разработать стандарты, правила постановки задач и проектирования.\r\n\r\n# Цели\r\n\r\nКоманда выделила ресурсы на внедрение полноценной дизайн-системы и поставил перед ней решение следующих проблем:\r\n1. **Оптимизировать работу команды на этапах дизайна и разработки.**\r\nРаньше, эти процессы были довольно хаотичны. Дизайнер брал в задачу в работу и изображал примерную реализацию компонента. Многие краевые сценарии не учитывались. Какие-то решения в процессе разработки менялись на ходу. В итоге, разработка затягивалась, фичи резались и итоговый результат сильно отличался от исходной картинки.\r\n2. **Автоматизация и консистентность**.\r\nБольшой размер и сложность компонентов сильно усложняли внесение любых изменений в дизайн. Даже небольшие стилистические изменения в базовом компоненте типа кнопки приводили к огромному количеству работы со стороны дизайнера. Так нужно было учесть разные темы, размеры и стили.\r\n3. **Консистентность цвета**.\r\nОтдельно стоит отметить проблему с цветом. Многие цвета компонентов в коде рассчитывались с помощью миксинов. Это приводило ко многим проблемам, в том числе, проблемам с контрастностью.\r\n4. **Доступность**\r\nПользователи продукта стали всё чаще интересоваться, насколько компоненты доступны для разных категорий пользователей. Нужно было сформировать подход, как дизайнер должен заказывать грамотные A11Y на этапе проектирования дизайна.\r\n5. **Централизация знаний**\r\nМногие знания о тех или иных дизайн-решениях нигде не фиксировались. Единственным источником знания были участвующие в работе на фичей члены команды.\r\n6. **UI Kit**\r\nЧасть пользователей жаловалась на отсутствие UI кита. Плюс, у конкурентов он уже давно был.\r\n\r\n# Переработка компонентов в Figma с нуля\r\n\r\nДизайн существующих компонентов полностью повторяет функционал кодовой реализации. Учтены все редкие сценарии и пограничные состояния компонентов. Перед отрисовкой изучается API компонента и все сценарии его использования.\r\n\r\n## Пример реализации компонента Grid\r\n\r\nКомпонент Grid является одним из больших и одним из самых популярным компонентов в линейке Blazor. Grid представляет собой компонент для отображения данных в табличном формате, который включает в себя множество функций для управления данными, их представления и настройки, таких как фильтрация, группировка, пагинация, сортировка и многое другое.\r\n\r\nОсновную сложность представляет его размер:\r\n\r\nТак как разные пользователи использую грид по-разному, то компонент получается достаточно гибким по функционалу и возможностям. Всё это отражено в дизайне.\r\n\r\nДля того, чтобы отрисовать такой в Figma пришлось сначала изучить и собрать файл со скриншотами всех состояний компонента. Для этого были изучены демо стенды компоненты, описывающие его стили и API.\r\n\r\nВ итоге, реализованный макет компонента помогает быстрее решать новые задачи и прикидывать прототипы с разными сценариями использования. \r\n\r\n# Разработка новых компонентов\r\n\r\nРазработка дизайна новых компонентов включает в себя исследование решений на рынке, лучшие практики, клавиатурную навигацию, идея для демо стендов, и обсуждение требований с ПМом. В зависимости от задачи, количество пунктов может быть больше или меньше.\r\n\r\n## Пример реализации компонента TreeList\r\n\r\nКомпонент TreeList предназначен для отображения иерархическими данными в виде расширенного списка, который сочетает в себе функциональные возможности древовидной структуры (TreeView) и таблицы (Grid). Это позволяет пользователям легко просматривать, сортировать, фильтровать и редактировать иерархические данные с возможностью разворачивания и сворачивания уровней вложенности данных для удобства восприятия.\r\n\r\nКомпонент TreeList часто используется в приложениях для управления содержимым, файловыми системами, а также в любых приложениях, где требуется эффективная работа с иерархическими данными.\r\n\r\nПеред началом отрисовки компонента был произведен ресёрч реализации решений у других вендоров. Собран список идей и примерные способы реализации. В конце каждого этапа происходили синхрозиционны встречи с ПМом, разработчиками и другими заинтересованными лицами.\r\n\r\n# Токенизация\r\n\r\nКаждый компонент представлен в разных темах. Руками отрисовать каждый компонент в каждой теме очень дорого и ресурсозатратно. Плюс, цена ошибки в таком случае очень высока.\r\n\r\nБыло принято решение использовать дизайн-токены:\r\n- Чтобы быстро обновлять стили компонента под любую тему.\r\n- Гарантировать консистентность решений.\r\n- Использовать как мостик между дизайном и разработкой.\r\n\r\nБыла проведена большая работа над созданием архитектуры и структуры дизайн-токенов:\r\n\r\nК сожалению, для создания грамотной архитектуры, в данном случае, встроенные Figma Variables не подошли. Для работы с токсинами использует Tokens Studio.\r\n\r\nКаждый компонент имеет полное покрытие токенами. Это касается как цветов, так других стилей: бордер, авто-лейаут, тени. \r\n\r\nВ итоге, любой компонент в Fimga легко протестировать с другими стилистическими настройками. А разработчики могут использовать токены для использованиях их значений в файлах стилей.\r\n\r\n# Документирование\r\n\r\nДокументирование покрывается несколькими факторами:\r\n- Сама реализации компонентов в Figma\r\n- Дизайн-токены\r\n- Внутренняя документация\r\n\r\nВнутренняя документация представляет собой правил и рекомендаций: \r\n- правила оформления\r\n- правила работы с дизайн-токенами\r\n- требования по иконкам\r\n- работа с цветовой палитрой\r\n\r\nТут же собраны результаты ресёрчей по тем или иным задач. А также, приятные решения по ним. Это помогает всем членам команды понимать, куда нужно обращаться в первую очередь чтобы найти такую информацию.\r\n\r\n# UI Kit\r\n\r\nРезультатом работы над дизайн-системой послужил выпуск UI кита в Figma. Комьюнити положительно оценило выпуск кита, особенно те пользователи которые просили об этом раньше.  \r\n\r\n# Результаты \r\n\r\nКак результат, получилось собрать крепкий каркас дизайн-системы, которая помогает дизайнерам намного быстрее решать задачи и дальше развивать UX/UI компонентов, а разработчикам использовать дизайн систему как единый источник знаний.', `Summary`='', `FormatterID`='neasden', `OriginalAlias`='blazor', `Uploads`='a:6:{i:0;s:15:\"blazor-1@2x.jpg\";i:1;s:15:\"blazor-2@2x.jpg\";i:2;s:33:\"/images/1x/maxim-petrov-photo.png\";i:3;s:28:\"/images/blog/1x/blazor-2.png\";i:4;s:28:\"/images/blog/1x/blazor-1.png\";i:5;s:15:\"empty-image.jpg\";}', `IsPublished`='1', `IsCommentable`='0', `IsVisible`='1', `IsFavourite`='1', `Stamp`='1711384202', `LastModified`='1711787632', `Offset`='14400', `IsDST`='0', `IsIndexed`='1', `IsExternal`='0', `ReadCount`='1', `SourceID`='0', `SourceNoteID`='0', `SourceNoteURL`='', `SourceNoteJSONURL`='', `SourceNoteData`='' WHERE `SubsetID`=1 AND (`ID`=5);

UPDATE `e2BlogNotes` SET `Uploads`='a:7:{i:0;s:15:"blazor-1@2x.jpg";i:1;s:15:"blazor-2@2x.jpg";i:2;s:33:"/images/1x/maxim-petrov-photo.png";i:3;s:28:"/images/blog/1x/blazor-2.png";i:4;s:28:"/images/blog/1x/blazor-1.png";i:5;s:15:"empty-image.jpg";i:6;s:19:"blazor-3@2x.png.jpg";}' WHERE `SubsetID`=1 AND `ID`=5;

UPDATE `e2BlogNotes` SET `Uploads`='a:6:{i:1;s:15:"blazor-2@2x.jpg";i:2;s:33:"/images/1x/maxim-petrov-photo.png";i:3;s:28:"/images/blog/1x/blazor-2.png";i:4;s:28:"/images/blog/1x/blazor-1.png";i:5;s:15:"empty-image.jpg";i:6;s:19:"blazor-3@2x.png.jpg";}' WHERE `SubsetID`=1 AND `ID`=5;

UPDATE `e2BlogNotes` SET `Uploads`='a:5:{i:2;s:33:"/images/1x/maxim-petrov-photo.png";i:3;s:28:"/images/blog/1x/blazor-2.png";i:4;s:28:"/images/blog/1x/blazor-1.png";i:5;s:15:"empty-image.jpg";i:6;s:19:"blazor-3@2x.png.jpg";}' WHERE `SubsetID`=1 AND `ID`=5;

UPDATE `e2BlogNotes` SET `Uploads`='a:4:{i:2;s:33:"/images/1x/maxim-petrov-photo.png";i:3;s:28:"/images/blog/1x/blazor-2.png";i:4;s:28:"/images/blog/1x/blazor-1.png";i:5;s:15:"empty-image.jpg";}' WHERE `SubsetID`=1 AND `ID`=5;

UPDATE `e2BlogAliases` SET `EntityType`='n', `EntityID`='5', `Alias`='blazor', `Stamp`='1711790223' WHERE `SubsetID`=1 AND (`ID`=6);

UPDATE `e2BlogNotes` SET `SubsetID`='1', `Title`='Дизайн-система Blazor', `Text`='DevExpress Blazor — это набор компонентов пользовательского интерфейса. Продукт активно используется в приложениях на платформе Blazor и предлагают мощный набор компонентов: таблицы данных, календари и планировщики, выпадающие списки, диалоговые окна и многие другие. \r\n\r\nЗадача — переосмыслить и создать дизайн-систему в Figma на основе существующих артефактов и наработок.\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/blazor-1.png\" srcset=\"/images/blog/1x/blazor-1.png 1x, /images/blog/2x/blazor-1@2x.png 2x\" class=\"img-fluid\">\r\n\r\n# Вводные\r\n\r\nПо мере развития продукта, стало увеличиваться количество выпускаемых компонентов и их сложность. Предыдущий подход, когда дизайнер рисовал отдельный макет под каждую задачу стал приносить заметные неудобства для команды. Разработка начала сильно обгонять дизайн и многие решения по краевым сценариям стали принимать сами разработчки. Дизайнеру тратил много времени на поиск визуальных и UX багов на поздних этапах разработки компонента или фичи.\r\n\r\nОтдельной проблемой была сложность каждого компонента:\r\n- **Разные темы**. В разных темах компонент не только меняет цвет, но и начинает обладать другими визуальными свойствами.\r\n- **Несколько размеров**. Каждый компонент линейки представлен в трёх размерах. \r\n- **Дополнительные стили**. Большой набор стилистических вариантов для компонентов-атомов.\r\n\r\nНапример, одна только кнопка состоит из 150 вариантов компонента:\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/blazor-2.png\" srcset=\"/images/blog/1x/blazor-2.png 1x, /images/blog/2x/blazor-2@2x.png 2x\" class=\"img-fluid\">\r\n\r\nБыло принято решение менять подход — разработать стандарты, правила постановки задач и проектирования.\r\n\r\n# Цели\r\n\r\nКоманда выделила ресурсы на внедрение полноценной дизайн-системы и поставил перед ней решение следующих проблем:\r\n1. **Оптимизировать работу команды на этапах дизайна и разработки.**\r\nРаньше, эти процессы были довольно хаотичны. Дизайнер брал в задачу в работу и изображал примерную реализацию компонента. Многие краевые сценарии не учитывались. Какие-то решения в процессе разработки менялись на ходу. В итоге, разработка затягивалась, фичи резались и итоговый результат сильно отличался от исходной картинки.\r\n2. **Автоматизация и консистентность**.\r\nБольшой размер и сложность компонентов сильно усложняли внесение любых изменений в дизайн. Даже небольшие стилистические изменения в базовом компоненте типа кнопки приводили к огромному количеству работы со стороны дизайнера. Так нужно было учесть разные темы, размеры и стили.\r\n3. **Консистентность цвета**.\r\nОтдельно стоит отметить проблему с цветом. Многие цвета компонентов в коде рассчитывались с помощью миксинов. Это приводило ко многим проблемам, в том числе, проблемам с контрастностью.\r\n4. **Доступность**\r\nПользователи продукта стали всё чаще интересоваться, насколько компоненты доступны для разных категорий пользователей. Нужно было сформировать подход, как дизайнер должен заказывать грамотные A11Y на этапе проектирования дизайна.\r\n5. **Централизация знаний**\r\nМногие знания о тех или иных дизайн-решениях нигде не фиксировались. Единственным источником знания были участвующие в работе на фичей члены команды.\r\n6. **UI Kit**\r\nЧасть пользователей жаловалась на отсутствие UI кита. Плюс, у конкурентов он уже давно был.\r\n\r\n# Переработка компонентов в Figma с нуля\r\n\r\nДизайн существующих компонентов полностью повторяет функционал кодовой реализации. Учтены все редкие сценарии и пограничные состояния компонентов. Перед отрисовкой изучается API компонента и все сценарии его использования.\r\n\r\n## Пример реализации компонента Grid\r\n\r\nКомпонент Grid является одним из больших и одним из самых популярным компонентов в линейке Blazor. Grid представляет собой компонент для отображения данных в табличном формате, который включает в себя множество функций для управления данными, их представления и настройки, таких как фильтрация, группировка, пагинация, сортировка и многое другое.\r\n\r\nОсновную сложность представляет его размер:\r\n\r\nТак как разные пользователи использую грид по-разному, то компонент получается достаточно гибким по функционалу и возможностям. Всё это отражено в дизайне.\r\n\r\nДля того, чтобы отрисовать такой в Figma пришлось сначала изучить и собрать файл со скриншотами всех состояний компонента. Для этого были изучены демо стенды компоненты, описывающие его стили и API.\r\n\r\nВ итоге, реализованный макет компонента помогает быстрее решать новые задачи и прикидывать прототипы с разными сценариями использования. \r\n\r\n# Разработка новых компонентов\r\n\r\nРазработка дизайна новых компонентов включает в себя исследование решений на рынке, лучшие практики, клавиатурную навигацию, идея для демо стендов, и обсуждение требований с ПМом. В зависимости от задачи, количество пунктов может быть больше или меньше.\r\n\r\n## Пример реализации компонента TreeList\r\n\r\nКомпонент TreeList предназначен для отображения иерархическими данными в виде расширенного списка, который сочетает в себе функциональные возможности древовидной структуры (TreeView) и таблицы (Grid). Это позволяет пользователям легко просматривать, сортировать, фильтровать и редактировать иерархические данные с возможностью разворачивания и сворачивания уровней вложенности данных для удобства восприятия.\r\n\r\nКомпонент TreeList часто используется в приложениях для управления содержимым, файловыми системами, а также в любых приложениях, где требуется эффективная работа с иерархическими данными.\r\n\r\nПеред началом отрисовки компонента был произведен ресёрч реализации решений у других вендоров. Собран список идей и примерные способы реализации. В конце каждого этапа происходили синхрозиционны встречи с ПМом, разработчиками и другими заинтересованными лицами.\r\n\r\n# Токенизация\r\n\r\nКаждый компонент представлен в разных темах. Руками отрисовать каждый компонент в каждой теме очень дорого и ресурсозатратно. Плюс, цена ошибки в таком случае очень высока.\r\n\r\nБыло принято решение использовать дизайн-токены:\r\n- Чтобы быстро обновлять стили компонента под любую тему.\r\n- Гарантировать консистентность решений.\r\n- Использовать как мостик между дизайном и разработкой.\r\n\r\nБыла проведена большая работа над созданием архитектуры и структуры дизайн-токенов:\r\n\r\nК сожалению, для создания грамотной архитектуры, в данном случае, встроенные Figma Variables не подошли. Для работы с токсинами использует Tokens Studio.\r\n\r\nКаждый компонент имеет полное покрытие токенами. Это касается как цветов, так других стилей: бордер, авто-лейаут, тени. \r\n\r\nВ итоге, любой компонент в Fimga легко протестировать с другими стилистическими настройками. А разработчики могут использовать токены для использованиях их значений в файлах стилей.\r\n\r\n# Документирование\r\n\r\nДокументирование покрывается несколькими факторами:\r\n- Сама реализации компонентов в Figma\r\n- Дизайн-токены\r\n- Внутренняя документация\r\n\r\nВнутренняя документация представляет собой правил и рекомендаций: \r\n- правила оформления\r\n- правила работы с дизайн-токенами\r\n- требования по иконкам\r\n- работа с цветовой палитрой\r\n\r\nТут же собраны результаты ресёрчей по тем или иным задач. А также, приятные решения по ним. Это помогает всем членам команды понимать, куда нужно обращаться в первую очередь чтобы найти такую информацию.\r\n\r\n# UI Kit\r\n\r\nРезультатом работы над дизайн-системой послужил выпуск UI кита в Figma. Комьюнити положительно оценило выпуск кита, особенно те пользователи которые просили об этом раньше.  \r\n\r\n# Результаты \r\n\r\nКак результат, получилось собрать крепкий каркас дизайн-системы, которая помогает дизайнерам намного быстрее решать задачи и дальше развивать UX/UI компонентов, а разработчикам использовать дизайн систему как единый источник знаний.', `Summary`='', `FormatterID`='neasden', `OriginalAlias`='blazor', `Uploads`='a:4:{i:2;s:33:\"/images/1x/maxim-petrov-photo.png\";i:3;s:28:\"/images/blog/1x/blazor-2.png\";i:4;s:28:\"/images/blog/1x/blazor-1.png\";i:5;s:15:\"empty-image.jpg\";}', `IsPublished`='1', `IsCommentable`='0', `IsVisible`='1', `IsFavourite`='1', `Stamp`='1711384202', `LastModified`='1711790223', `Offset`='14400', `IsDST`='0', `IsIndexed`='0', `IsExternal`='0', `ReadCount`='1', `SourceID`='0', `SourceNoteID`='0', `SourceNoteURL`='', `SourceNoteJSONURL`='', `SourceNoteData`='' WHERE `SubsetID`=1 AND (`ID`=5);

UPDATE `e2BlogNotes` SET `SubsetID`='1', `Title`='Дизайн-система Blazor', `Text`='DevExpress Blazor — это набор компонентов пользовательского интерфейса. Продукт активно используется в приложениях на платформе Blazor и предлагают мощный набор компонентов: таблицы данных, календари и планировщики, выпадающие списки, диалоговые окна и многие другие. \r\n\r\nЗадача — переосмыслить и создать дизайн-систему в Figma на основе существующих артефактов и наработок.\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/blazor-1.png\" srcset=\"/images/blog/1x/blazor-1.png 1x, /images/blog/2x/blazor-1@2x.png 2x\" class=\"img-fluid\">\r\n\r\n# Вводные\r\n\r\nПо мере развития продукта, стало увеличиваться количество выпускаемых компонентов и их сложность. Предыдущий подход, когда дизайнер рисовал отдельный макет под каждую задачу стал приносить заметные неудобства для команды. Разработка начала сильно обгонять дизайн и многие решения по краевым сценариям стали принимать сами разработчки. Дизайнеру тратил много времени на поиск визуальных и UX багов на поздних этапах разработки компонента или фичи.\r\n\r\nОтдельной проблемой была сложность каждого компонента:\r\n- **Разные темы**. В разных темах компонент не только меняет цвет, но и начинает обладать другими визуальными свойствами.\r\n- **Несколько размеров**. Каждый компонент линейки представлен в трёх размерах. \r\n- **Дополнительные стили**. Большой набор стилистических вариантов для компонентов-атомов.\r\n\r\nНапример, одна только кнопка состоит из 150 вариантов компонента:\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/blazor-2.png\" srcset=\"/images/blog/1x/blazor-2.png 1x, /images/blog/2x/blazor-2@2x.png 2x\" class=\"img-fluid\">\r\n\r\nБыло принято решение менять подход — разработать стандарты, правила постановки задач и проектирования.\r\n\r\n# Цели\r\n\r\nКоманда выделила ресурсы на внедрение полноценной дизайн-системы и поставил перед ней решение следующих проблем:\r\n1. **Оптимизировать работу команды на этапах дизайна и разработки.**\r\nРаньше, эти процессы были довольно хаотичны. Дизайнер брал в задачу в работу и изображал примерную реализацию компонента. Многие краевые сценарии не учитывались. Какие-то решения в процессе разработки менялись на ходу. В итоге, разработка затягивалась, фичи резались и итоговый результат сильно отличался от исходной картинки.\r\n2. **Автоматизация и консистентность**.\r\nБольшой размер и сложность компонентов сильно усложняли внесение любых изменений в дизайн. Даже небольшие стилистические изменения в базовом компоненте типа кнопки приводили к огромному количеству работы со стороны дизайнера. Так нужно было учесть разные темы, размеры и стили.\r\n3. **Консистентность цвета**.\r\nОтдельно стоит отметить проблему с цветом. Многие цвета компонентов в коде рассчитывались с помощью миксинов. Это приводило ко многим проблемам, в том числе, проблемам с контрастностью.\r\n4. **Доступность**\r\nПользователи продукта стали всё чаще интересоваться, насколько компоненты доступны для разных категорий пользователей. Нужно было сформировать подход, как дизайнер должен заказывать грамотные A11Y на этапе проектирования дизайна.\r\n5. **Централизация знаний**\r\nМногие знания о тех или иных дизайн-решениях нигде не фиксировались. Единственным источником знания были участвующие в работе на фичей члены команды.\r\n6. **UI Kit**\r\nЧасть пользователей жаловалась на отсутствие UI кита. Плюс, у конкурентов он уже давно был.\r\n\r\n# Переработка компонентов в Figma с нуля\r\n\r\nДизайн существующих компонентов полностью повторяет функционал кодовой реализации. Учтены все редкие сценарии и пограничные состояния компонентов. Перед отрисовкой изучается API компонента и все сценарии его использования.\r\n\r\n## Пример реализации компонента Grid\r\n\r\nКомпонент Grid является одним из больших и одним из самых популярным компонентов в линейке Blazor. Grid представляет собой компонент для отображения данных в табличном формате, который включает в себя множество функций для управления данными, их представления и настройки, таких как фильтрация, группировка, пагинация, сортировка и многое другое.\r\n\r\nОсновную сложность представляет его размер:\r\n\r\nТак как разные пользователи использую грид по-разному, то компонент получается достаточно гибким по функционалу и возможностям. Всё это отражено в дизайне.\r\n\r\nДля того, чтобы отрисовать такой в Figma пришлось сначала изучить и собрать файл со скриншотами всех состояний компонента. Для этого были изучены демо стенды компоненты, описывающие его стили и API.\r\n\r\nВ итоге, реализованный макет компонента помогает быстрее решать новые задачи и прикидывать прототипы с разными сценариями использования. \r\n\r\n# Разработка новых компонентов\r\n\r\nРазработка дизайна новых компонентов включает в себя исследование решений на рынке, лучшие практики, клавиатурную навигацию, идея для демо стендов, и обсуждение требований с ПМом. В зависимости от задачи, количество пунктов может быть больше или меньше.\r\n\r\n## Пример реализации компонента TreeList\r\n\r\nКомпонент TreeList предназначен для отображения иерархическими данными в виде расширенного списка, который сочетает в себе функциональные возможности древовидной структуры (TreeView) и таблицы (Grid). Это позволяет пользователям легко просматривать, сортировать, фильтровать и редактировать иерархические данные с возможностью разворачивания и сворачивания уровней вложенности данных для удобства восприятия.\r\n\r\nКомпонент TreeList часто используется в приложениях для управления содержимым, файловыми системами, а также в любых приложениях, где требуется эффективная работа с иерархическими данными.\r\n\r\nПеред началом отрисовки компонента был произведен ресёрч реализации решений у других вендоров. Собран список идей и примерные способы реализации. В конце каждого этапа происходили синхрозиционны встречи с ПМом, разработчиками и другими заинтересованными лицами.\r\n\r\n# Токенизация\r\n\r\nКаждый компонент представлен в разных темах. Руками отрисовать каждый компонент в каждой теме очень дорого и ресурсозатратно. Плюс, цена ошибки в таком случае очень высока.\r\n\r\nБыло принято решение использовать дизайн-токены:\r\n- Чтобы быстро обновлять стили компонента под любую тему.\r\n- Гарантировать консистентность решений.\r\n- Использовать как мостик между дизайном и разработкой.\r\n\r\nБыла проведена большая работа над созданием архитектуры и структуры дизайн-токенов:\r\n\r\nК сожалению, для создания грамотной архитектуры, в данном случае, встроенные Figma Variables не подошли. Для работы с токсинами использует Tokens Studio.\r\n\r\nКаждый компонент имеет полное покрытие токенами. Это касается как цветов, так других стилей: бордер, авто-лейаут, тени. \r\n\r\nВ итоге, любой компонент в Fimga легко протестировать с другими стилистическими настройками. А разработчики могут использовать токены для использованиях их значений в файлах стилей.\r\n\r\n# Документирование\r\n\r\nДокументирование покрывается несколькими факторами:\r\n- Сама реализации компонентов в Figma\r\n- Дизайн-токены\r\n- Внутренняя документация\r\n\r\nВнутренняя документация представляет собой правил и рекомендаций: \r\n- правила оформления\r\n- правила работы с дизайн-токенами\r\n- требования по иконкам\r\n- работа с цветовой палитрой\r\n\r\nТут же собраны результаты ресёрчей по тем или иным задач. А также, приятные решения по ним. Это помогает всем членам команды понимать, куда нужно обращаться в первую очередь чтобы найти такую информацию.\r\n\r\n# UI Kit\r\n\r\nРезультатом работы над дизайн-системой послужил выпуск UI кита в Figma. Комьюнити положительно оценило выпуск кита, особенно те пользователи которые просили об этом раньше.  \r\n\r\n# Результаты \r\n\r\nКак результат, получилось собрать крепкий каркас дизайн-системы, которая помогает дизайнерам намного быстрее решать задачи и дальше развивать UX/UI компонентов, а разработчикам использовать дизайн систему как единый источник знаний.', `Summary`='', `FormatterID`='neasden', `OriginalAlias`='blazor', `Uploads`='a:4:{i:2;s:33:\"/images/1x/maxim-petrov-photo.png\";i:3;s:28:\"/images/blog/1x/blazor-2.png\";i:4;s:28:\"/images/blog/1x/blazor-1.png\";i:5;s:15:\"empty-image.jpg\";}', `IsPublished`='1', `IsCommentable`='0', `IsVisible`='1', `IsFavourite`='1', `Stamp`='1711384202', `LastModified`='1711790223', `Offset`='14400', `IsDST`='0', `IsIndexed`='1', `IsExternal`='0', `ReadCount`='1', `SourceID`='0', `SourceNoteID`='0', `SourceNoteURL`='', `SourceNoteJSONURL`='', `SourceNoteData`='' WHERE `SubsetID`=1 AND (`ID`=5);

UPDATE `e2BlogNotes` SET `SubsetID`='1', `Title`='Дизайн-система Blazor', `Text`='DevExpress Blazor — это набор компонентов пользовательского интерфейса. Продукт активно используется в приложениях на платформе Blazor и предлагают мощный набор компонентов: таблицы данных, календари и планировщики, выпадающие списки, диалоговые окна и многие другие. \r\n\r\nЗадача — переосмыслить и создать дизайн-систему в Figma на основе существующих артефактов и наработок.\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/blazor-1.png\" srcset=\"/images/blog/1x/blazor-1.png 1x, /images/blog/2x/blazor-1@2x.png 2x\" class=\"img-fluid\">\r\n\r\n# Вводные\r\n\r\nПо мере развития продукта, стало увеличиваться количество выпускаемых компонентов и их сложность. Предыдущий подход, когда дизайнер рисовал отдельный макет под каждую задачу стал приносить заметные неудобства для команды. Разработка начала сильно обгонять дизайн и многие решения по краевым сценариям стали принимать сами разработчки. Дизайнеру тратил много времени на поиск визуальных и UX багов на поздних этапах разработки компонента или фичи.\r\n\r\nОтдельной проблемой была сложность каждого компонента:\r\n- **Разные темы**. В разных темах компонент не только меняет цвет, но и начинает обладать другими визуальными свойствами.\r\n- **Несколько размеров**. Каждый компонент линейки представлен в трёх размерах. \r\n- **Дополнительные стили**. Большой набор стилистических вариантов для компонентов-атомов.\r\n\r\nНапример, одна только кнопка состоит из 150 вариантов компонента:\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/blazor-2.png\" srcset=\"/images/blog/1x/blazor-2.png 1x, /images/blog/2x/blazor-2@2x.png 2x\" class=\"img-fluid\">\r\n\r\nБыло принято решение менять подход — разработать стандарты, правила постановки задач и проектирования.\r\n\r\n# Цели\r\n\r\nКоманда выделила ресурсы на внедрение полноценной дизайн-системы и поставил перед ней решение следующих проблем:\r\n1. **Оптимизировать работу команды на этапах дизайна и разработки.**\r\nРаньше, эти процессы были довольно хаотичны. Дизайнер брал в задачу в работу и изображал примерную реализацию компонента. Многие краевые сценарии не учитывались. Какие-то решения в процессе разработки менялись на ходу. В итоге, разработка затягивалась, фичи резались и итоговый результат сильно отличался от исходной картинки.\r\n2. **Автоматизация и консистентность**.\r\nБольшой размер и сложность компонентов сильно усложняли внесение любых изменений в дизайн. Даже небольшие стилистические изменения в базовом компоненте типа кнопки приводили к огромному количеству работы со стороны дизайнера. Так нужно было учесть разные темы, размеры и стили.\r\n3. **Консистентность цвета**.\r\nОтдельно стоит отметить проблему с цветом. Многие цвета компонентов в коде рассчитывались с помощью миксинов. Это приводило ко многим проблемам, в том числе, проблемам с контрастностью.\r\n4. **Доступность**\r\nПользователи продукта стали всё чаще интересоваться, насколько компоненты доступны для разных категорий пользователей. Нужно было сформировать подход, как дизайнер должен заказывать грамотные A11Y на этапе проектирования дизайна.\r\n5. **Централизация знаний**\r\nМногие знания о тех или иных дизайн-решениях нигде не фиксировались. Единственным источником знания были участвующие в работе на фичей члены команды.\r\n6. **UI Kit**\r\nЧасть пользователей жаловалась на отсутствие UI кита. Плюс, у конкурентов он уже давно был.\r\n\r\n# Переработка компонентов в Figma с нуля\r\n\r\nДизайн существующих компонентов полностью повторяет функционал кодовой реализации. Учтены все редкие сценарии и пограничные состояния компонентов. Перед отрисовкой изучается API компонента и все сценарии его использования.\r\n\r\n## Пример реализации компонента Grid\r\n\r\nКомпонент Grid является одним из больших и одним из самых популярным компонентов в линейке Blazor. Grid представляет собой компонент для отображения данных в табличном формате, который включает в себя множество функций для управления данными, их представления и настройки, таких как фильтрация, группировка, пагинация, сортировка и многое другое.\r\n\r\nОсновную сложность представляет его размер:\r\n\r\nТак как разные пользователи использую грид по-разному, то компонент получается достаточно гибким по функционалу и возможностям. Всё это отражено в дизайне.\r\n\r\nДля того, чтобы отрисовать такой в Figma пришлось сначала изучить и собрать файл со скриншотами всех состояний компонента. Для этого были изучены демо стенды компоненты, описывающие его стили и API.\r\n\r\nВ итоге, реализованный макет компонента помогает быстрее решать новые задачи и прикидывать прототипы с разными сценариями использования. \r\n\r\n# Разработка новых компонентов\r\n\r\nРазработка дизайна новых компонентов включает в себя исследование решений на рынке, лучшие практики, клавиатурную навигацию, идея для демо стендов, и обсуждение требований с ПМом. В зависимости от задачи, количество пунктов может быть больше или меньше.\r\n\r\n## Пример реализации компонента TreeList\r\n\r\nКомпонент TreeList предназначен для отображения иерархическими данными в виде расширенного списка, который сочетает в себе функциональные возможности древовидной структуры (TreeView) и таблицы (Grid). Это позволяет пользователям легко просматривать, сортировать, фильтровать и редактировать иерархические данные с возможностью разворачивания и сворачивания уровней вложенности данных для удобства восприятия.\r\n\r\nКомпонент TreeList часто используется в приложениях для управления содержимым, файловыми системами, а также в любых приложениях, где требуется эффективная работа с иерархическими данными.\r\n\r\nПеред началом отрисовки компонента был произведен ресёрч реализации решений у других вендоров. Собран список идей и примерные способы реализации. В конце каждого этапа происходили синхрозиционны встречи с ПМом, разработчиками и другими заинтересованными лицами.\r\n\r\n# Токенизация\r\n\r\nКаждый компонент представлен в разных темах. Руками отрисовать каждый компонент в каждой теме очень дорого и ресурсозатратно. Плюс, цена ошибки в таком случае очень высока.\r\n\r\nБыло принято решение использовать дизайн-токены:\r\n- Чтобы быстро обновлять стили компонента под любую тему.\r\n- Гарантировать консистентность решений.\r\n- Использовать как мостик между дизайном и разработкой.\r\n\r\nБыла проведена большая работа над созданием архитектуры и структуры дизайн-токенов:\r\n\r\nК сожалению, для создания грамотной архитектуры, в данном случае, встроенные Figma Variables не подошли. Для работы с токсинами использует Tokens Studio.\r\n\r\nКаждый компонент имеет полное покрытие токенами. Это касается как цветов, так других стилей: бордер, авто-лейаут, тени. \r\n\r\nВ итоге, любой компонент в Fimga легко протестировать с другими стилистическими настройками. А разработчики могут использовать токены для использованиях их значений в файлах стилей.\r\n\r\n# Документирование\r\n\r\nДокументирование покрывается несколькими факторами:\r\n- Сама реализации компонентов в Figma\r\n- Дизайн-токены\r\n- Внутренняя документация\r\n\r\nВнутренняя документация представляет собой правил и рекомендаций: \r\n- правила оформления\r\n- правила работы с дизайн-токенами\r\n- требования по иконкам\r\n- работа с цветовой палитрой\r\n\r\nТут же собраны результаты ресёрчей по тем или иным задач. А также, приятные решения по ним. Это помогает всем членам команды понимать, куда нужно обращаться в первую очередь чтобы найти такую информацию.\r\n\r\n# UI Kit\r\n\r\nРезультатом работы над дизайн-системой послужил выпуск UI кита в Figma. Комьюнити положительно оценило выпуск кита, особенно те пользователи которые просили об этом раньше.  \r\n\r\n# Результаты \r\n\r\nКак результат, получилось собрать крепкий каркас дизайн-системы, которая помогает дизайнерам намного быстрее решать задачи и дальше развивать UX/UI компонентов, а разработчикам использовать дизайн систему как единый источник знаний.', `Summary`='', `FormatterID`='neasden', `OriginalAlias`='blazor', `Uploads`='a:4:{i:0;s:33:\"/images/1x/maxim-petrov-photo.png\";i:1;s:28:\"/images/blog/1x/blazor-2.png\";i:2;s:28:\"/images/blog/1x/blazor-1.png\";i:3;s:15:\"empty-image.jpg\";}', `IsPublished`='1', `IsCommentable`='0', `IsVisible`='1', `IsFavourite`='1', `Stamp`='1711384202', `LastModified`='1711790223', `Offset`='14400', `IsDST`='0', `IsIndexed`='1', `IsExternal`='0', `ReadCount`='1', `SourceID`='0', `SourceNoteID`='0', `SourceNoteURL`='', `SourceNoteJSONURL`='', `SourceNoteData`='' WHERE `SubsetID`=1 AND (`ID`=5);

UPDATE `e2BlogAliases` SET `EntityType`='n', `EntityID`='5', `Alias`='blazor', `Stamp`='1711790310' WHERE `SubsetID`=1 AND (`ID`=6);

UPDATE `e2BlogNotes` SET `SubsetID`='1', `Title`='Дизайн-система Blazor', `Text`='DevExpress Blazor — это набор компонентов пользовательского интерфейса. Продукт активно используется в приложениях на платформе Blazor и предлагают мощный набор компонентов: таблицы данных, календари и планировщики, выпадающие списки, диалоговые окна и многие другие. \r\n\r\nЗадача — переосмыслить и создать дизайн-систему в Figma на основе существующих артефактов и наработок.\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/blazor-1.png\" srcset=\"/images/blog/1x/blazor-1.png 1x, /images/blog/2x/blazor-1@2x.png 2x\" class=\"img-fluid\">\r\n\r\n# Вводные\r\n\r\nПо мере развития продукта, стало увеличиваться количество выпускаемых компонентов и их сложность. Предыдущий подход, когда дизайнер рисовал отдельный макет под каждую задачу стал приносить заметные неудобства для команды. Разработка начала сильно обгонять дизайн и многие решения по краевым сценариям стали принимать сами разработчки. Дизайнеру тратил много времени на поиск визуальных и UX багов на поздних этапах разработки компонента или фичи.\r\n\r\nОтдельной проблемой была сложность каждого компонента:\r\n- **Разные темы**. В разных темах компонент не только меняет цвет, но и начинает обладать другими визуальными свойствами.\r\n- **Несколько размеров**. Каждый компонент линейки представлен в трёх размерах. \r\n- **Дополнительные стили**. Большой набор стилистических вариантов для компонентов-атомов.\r\n\r\nНапример, одна только кнопка состоит из 150 вариантов компонента:\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/blazor-2.png\" srcset=\"/images/blog/1x/blazor-2.png 1x, /images/blog/2x/blazor-2@2x.png 2x\" class=\"img-fluid\">\r\n\r\nБыло принято решение менять подход — разработать стандарты, правила постановки задач и проектирования.\r\n\r\n# Цели\r\n\r\nКоманда выделила ресурсы на внедрение полноценной дизайн-системы и поставил перед ней решение следующих проблем:\r\n1. **Оптимизировать работу команды на этапах дизайна и разработки.**\r\nРаньше, эти процессы были довольно хаотичны. Дизайнер брал в задачу в работу и изображал примерную реализацию компонента. Многие краевые сценарии не учитывались. Какие-то решения в процессе разработки менялись на ходу. В итоге, разработка затягивалась, фичи резались и итоговый результат сильно отличался от исходной картинки.\r\n2. **Автоматизация и консистентность**.\r\nБольшой размер и сложность компонентов сильно усложняли внесение любых изменений в дизайн. Даже небольшие стилистические изменения в базовом компоненте типа кнопки приводили к огромному количеству работы со стороны дизайнера. Так нужно было учесть разные темы, размеры и стили.\r\n3. **Консистентность цвета**.\r\nОтдельно стоит отметить проблему с цветом. Многие цвета компонентов в коде рассчитывались с помощью миксинов. Это приводило ко многим проблемам, в том числе, проблемам с контрастностью.\r\n4. **Доступность**\r\nПользователи продукта стали всё чаще интересоваться, насколько компоненты доступны для разных категорий пользователей. Нужно было сформировать подход, как дизайнер должен заказывать грамотные A11Y на этапе проектирования дизайна.\r\n5. **Централизация знаний**\r\nМногие знания о тех или иных дизайн-решениях нигде не фиксировались. Единственным источником знания были участвующие в работе на фичей члены команды.\r\n6. **UI Kit**\r\nЧасть пользователей жаловалась на отсутствие UI кита. Плюс, у конкурентов он уже давно был.\r\n\r\n# Переработка компонентов в Figma с нуля\r\n\r\nДизайн существующих компонентов полностью повторяет функционал кодовой реализации. Учтены все редкие сценарии и пограничные состояния компонентов. Перед отрисовкой изучается API компонента и все сценарии его использования.\r\n\r\n## Пример реализации компонента Grid\r\n\r\nКомпонент Grid является одним из больших и одним из самых популярным компонентов в линейке Blazor. Grid представляет собой компонент для отображения данных в табличном формате, который включает в себя множество функций для управления данными, их представления и настройки, таких как фильтрация, группировка, пагинация, сортировка и многое другое.\r\n\r\nОсновную сложность представляет его размер:\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/blazor-3.png\" srcset=\"/images/blog/1x/blazor-2.png 1x, /images/blog/2x/blazor-3@2x.png 2x\" class=\"img-fluid\">\r\n\r\nТак как разные пользователи использую грид по-разному, то компонент получается достаточно гибким по функционалу и возможностям. Всё это отражено в дизайне.\r\n\r\nДля того, чтобы отрисовать такой в Figma пришлось сначала изучить и собрать файл со скриншотами всех состояний компонента. Для этого были изучены демо стенды компоненты, описывающие его стили и API.\r\n\r\nВ итоге, реализованный макет компонента помогает быстрее решать новые задачи и прикидывать прототипы с разными сценариями использования. \r\n\r\n# Разработка новых компонентов\r\n\r\nРазработка дизайна новых компонентов включает в себя исследование решений на рынке, лучшие практики, клавиатурную навигацию, идея для демо стендов, и обсуждение требований с ПМом. В зависимости от задачи, количество пунктов может быть больше или меньше.\r\n\r\n## Пример реализации компонента TreeList\r\n\r\nКомпонент TreeList предназначен для отображения иерархическими данными в виде расширенного списка, который сочетает в себе функциональные возможности древовидной структуры (TreeView) и таблицы (Grid). Это позволяет пользователям легко просматривать, сортировать, фильтровать и редактировать иерархические данные с возможностью разворачивания и сворачивания уровней вложенности данных для удобства восприятия.\r\n\r\nКомпонент TreeList часто используется в приложениях для управления содержимым, файловыми системами, а также в любых приложениях, где требуется эффективная работа с иерархическими данными.\r\n\r\nПеред началом отрисовки компонента был произведен ресёрч реализации решений у других вендоров. Собран список идей и примерные способы реализации. В конце каждого этапа происходили синхрозиционны встречи с ПМом, разработчиками и другими заинтересованными лицами.\r\n\r\n# Токенизация\r\n\r\nКаждый компонент представлен в разных темах. Руками отрисовать каждый компонент в каждой теме очень дорого и ресурсозатратно. Плюс, цена ошибки в таком случае очень высока.\r\n\r\nБыло принято решение использовать дизайн-токены:\r\n- Чтобы быстро обновлять стили компонента под любую тему.\r\n- Гарантировать консистентность решений.\r\n- Использовать как мостик между дизайном и разработкой.\r\n\r\nБыла проведена большая работа над созданием архитектуры и структуры дизайн-токенов:\r\n\r\nК сожалению, для создания грамотной архитектуры, в данном случае, встроенные Figma Variables не подошли. Для работы с токсинами использует Tokens Studio.\r\n\r\nКаждый компонент имеет полное покрытие токенами. Это касается как цветов, так других стилей: бордер, авто-лейаут, тени. \r\n\r\nВ итоге, любой компонент в Fimga легко протестировать с другими стилистическими настройками. А разработчики могут использовать токены для использованиях их значений в файлах стилей.\r\n\r\n# Документирование\r\n\r\nДокументирование покрывается несколькими факторами:\r\n- Сама реализации компонентов в Figma\r\n- Дизайн-токены\r\n- Внутренняя документация\r\n\r\nВнутренняя документация представляет собой правил и рекомендаций: \r\n- правила оформления\r\n- правила работы с дизайн-токенами\r\n- требования по иконкам\r\n- работа с цветовой палитрой\r\n\r\nТут же собраны результаты ресёрчей по тем или иным задач. А также, приятные решения по ним. Это помогает всем членам команды понимать, куда нужно обращаться в первую очередь чтобы найти такую информацию.\r\n\r\n# UI Kit\r\n\r\nРезультатом работы над дизайн-системой послужил выпуск UI кита в Figma. Комьюнити положительно оценило выпуск кита, особенно те пользователи которые просили об этом раньше.  \r\n\r\n# Результаты \r\n\r\nКак результат, получилось собрать крепкий каркас дизайн-системы, которая помогает дизайнерам намного быстрее решать задачи и дальше развивать UX/UI компонентов, а разработчикам использовать дизайн систему как единый источник знаний.', `Summary`='', `FormatterID`='neasden', `OriginalAlias`='blazor', `Uploads`='a:4:{i:0;s:33:\"/images/1x/maxim-petrov-photo.png\";i:1;s:28:\"/images/blog/1x/blazor-2.png\";i:2;s:28:\"/images/blog/1x/blazor-1.png\";i:3;s:15:\"empty-image.jpg\";}', `IsPublished`='1', `IsCommentable`='0', `IsVisible`='1', `IsFavourite`='1', `Stamp`='1711384202', `LastModified`='1711790310', `Offset`='14400', `IsDST`='0', `IsIndexed`='0', `IsExternal`='0', `ReadCount`='1', `SourceID`='0', `SourceNoteID`='0', `SourceNoteURL`='', `SourceNoteJSONURL`='', `SourceNoteData`='' WHERE `SubsetID`=1 AND (`ID`=5);

UPDATE `e2BlogNotes` SET `Uploads`='a:5:{i:0;s:33:"/images/1x/maxim-petrov-photo.png";i:1;s:28:"/images/blog/1x/blazor-2.png";i:2;s:28:"/images/blog/1x/blazor-1.png";i:3;s:15:"empty-image.jpg";i:4;s:28:"/images/blog/1x/blazor-3.png";}' WHERE `SubsetID`=1 AND `ID`=5;

UPDATE `e2BlogNotes` SET `SubsetID`='1', `Title`='Дизайн-система Blazor', `Text`='DevExpress Blazor — это набор компонентов пользовательского интерфейса. Продукт активно используется в приложениях на платформе Blazor и предлагают мощный набор компонентов: таблицы данных, календари и планировщики, выпадающие списки, диалоговые окна и многие другие. \r\n\r\nЗадача — переосмыслить и создать дизайн-систему в Figma на основе существующих артефактов и наработок.\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/blazor-1.png\" srcset=\"/images/blog/1x/blazor-1.png 1x, /images/blog/2x/blazor-1@2x.png 2x\" class=\"img-fluid\">\r\n\r\n# Вводные\r\n\r\nПо мере развития продукта, стало увеличиваться количество выпускаемых компонентов и их сложность. Предыдущий подход, когда дизайнер рисовал отдельный макет под каждую задачу стал приносить заметные неудобства для команды. Разработка начала сильно обгонять дизайн и многие решения по краевым сценариям стали принимать сами разработчки. Дизайнеру тратил много времени на поиск визуальных и UX багов на поздних этапах разработки компонента или фичи.\r\n\r\nОтдельной проблемой была сложность каждого компонента:\r\n- **Разные темы**. В разных темах компонент не только меняет цвет, но и начинает обладать другими визуальными свойствами.\r\n- **Несколько размеров**. Каждый компонент линейки представлен в трёх размерах. \r\n- **Дополнительные стили**. Большой набор стилистических вариантов для компонентов-атомов.\r\n\r\nНапример, одна только кнопка состоит из 150 вариантов компонента:\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/blazor-2.png\" srcset=\"/images/blog/1x/blazor-2.png 1x, /images/blog/2x/blazor-2@2x.png 2x\" class=\"img-fluid\">\r\n\r\nБыло принято решение менять подход — разработать стандарты, правила постановки задач и проектирования.\r\n\r\n# Цели\r\n\r\nКоманда выделила ресурсы на внедрение полноценной дизайн-системы и поставил перед ней решение следующих проблем:\r\n1. **Оптимизировать работу команды на этапах дизайна и разработки.**\r\nРаньше, эти процессы были довольно хаотичны. Дизайнер брал в задачу в работу и изображал примерную реализацию компонента. Многие краевые сценарии не учитывались. Какие-то решения в процессе разработки менялись на ходу. В итоге, разработка затягивалась, фичи резались и итоговый результат сильно отличался от исходной картинки.\r\n2. **Автоматизация и консистентность**.\r\nБольшой размер и сложность компонентов сильно усложняли внесение любых изменений в дизайн. Даже небольшие стилистические изменения в базовом компоненте типа кнопки приводили к огромному количеству работы со стороны дизайнера. Так нужно было учесть разные темы, размеры и стили.\r\n3. **Консистентность цвета**.\r\nОтдельно стоит отметить проблему с цветом. Многие цвета компонентов в коде рассчитывались с помощью миксинов. Это приводило ко многим проблемам, в том числе, проблемам с контрастностью.\r\n4. **Доступность**\r\nПользователи продукта стали всё чаще интересоваться, насколько компоненты доступны для разных категорий пользователей. Нужно было сформировать подход, как дизайнер должен заказывать грамотные A11Y на этапе проектирования дизайна.\r\n5. **Централизация знаний**\r\nМногие знания о тех или иных дизайн-решениях нигде не фиксировались. Единственным источником знания были участвующие в работе на фичей члены команды.\r\n6. **UI Kit**\r\nЧасть пользователей жаловалась на отсутствие UI кита. Плюс, у конкурентов он уже давно был.\r\n\r\n# Переработка компонентов в Figma с нуля\r\n\r\nДизайн существующих компонентов полностью повторяет функционал кодовой реализации. Учтены все редкие сценарии и пограничные состояния компонентов. Перед отрисовкой изучается API компонента и все сценарии его использования.\r\n\r\n## Пример реализации компонента Grid\r\n\r\nКомпонент Grid является одним из больших и одним из самых популярным компонентов в линейке Blazor. Grid представляет собой компонент для отображения данных в табличном формате, который включает в себя множество функций для управления данными, их представления и настройки, таких как фильтрация, группировка, пагинация, сортировка и многое другое.\r\n\r\nОсновную сложность представляет его размер:\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/blazor-3.png\" srcset=\"/images/blog/1x/blazor-2.png 1x, /images/blog/2x/blazor-3@2x.png 2x\" class=\"img-fluid\">\r\n\r\nТак как разные пользователи использую грид по-разному, то компонент получается достаточно гибким по функционалу и возможностям. Всё это отражено в дизайне.\r\n\r\nДля того, чтобы отрисовать такой в Figma пришлось сначала изучить и собрать файл со скриншотами всех состояний компонента. Для этого были изучены демо стенды компоненты, описывающие его стили и API.\r\n\r\nВ итоге, реализованный макет компонента помогает быстрее решать новые задачи и прикидывать прототипы с разными сценариями использования. \r\n\r\n# Разработка новых компонентов\r\n\r\nРазработка дизайна новых компонентов включает в себя исследование решений на рынке, лучшие практики, клавиатурную навигацию, идея для демо стендов, и обсуждение требований с ПМом. В зависимости от задачи, количество пунктов может быть больше или меньше.\r\n\r\n## Пример реализации компонента TreeList\r\n\r\nКомпонент TreeList предназначен для отображения иерархическими данными в виде расширенного списка, который сочетает в себе функциональные возможности древовидной структуры (TreeView) и таблицы (Grid). Это позволяет пользователям легко просматривать, сортировать, фильтровать и редактировать иерархические данные с возможностью разворачивания и сворачивания уровней вложенности данных для удобства восприятия.\r\n\r\nКомпонент TreeList часто используется в приложениях для управления содержимым, файловыми системами, а также в любых приложениях, где требуется эффективная работа с иерархическими данными.\r\n\r\nПеред началом отрисовки компонента был произведен ресёрч реализации решений у других вендоров. Собран список идей и примерные способы реализации. В конце каждого этапа происходили синхрозиционны встречи с ПМом, разработчиками и другими заинтересованными лицами.\r\n\r\n# Токенизация\r\n\r\nКаждый компонент представлен в разных темах. Руками отрисовать каждый компонент в каждой теме очень дорого и ресурсозатратно. Плюс, цена ошибки в таком случае очень высока.\r\n\r\nБыло принято решение использовать дизайн-токены:\r\n- Чтобы быстро обновлять стили компонента под любую тему.\r\n- Гарантировать консистентность решений.\r\n- Использовать как мостик между дизайном и разработкой.\r\n\r\nБыла проведена большая работа над созданием архитектуры и структуры дизайн-токенов:\r\n\r\nК сожалению, для создания грамотной архитектуры, в данном случае, встроенные Figma Variables не подошли. Для работы с токсинами использует Tokens Studio.\r\n\r\nКаждый компонент имеет полное покрытие токенами. Это касается как цветов, так других стилей: бордер, авто-лейаут, тени. \r\n\r\nВ итоге, любой компонент в Fimga легко протестировать с другими стилистическими настройками. А разработчики могут использовать токены для использованиях их значений в файлах стилей.\r\n\r\n# Документирование\r\n\r\nДокументирование покрывается несколькими факторами:\r\n- Сама реализации компонентов в Figma\r\n- Дизайн-токены\r\n- Внутренняя документация\r\n\r\nВнутренняя документация представляет собой правил и рекомендаций: \r\n- правила оформления\r\n- правила работы с дизайн-токенами\r\n- требования по иконкам\r\n- работа с цветовой палитрой\r\n\r\nТут же собраны результаты ресёрчей по тем или иным задач. А также, приятные решения по ним. Это помогает всем членам команды понимать, куда нужно обращаться в первую очередь чтобы найти такую информацию.\r\n\r\n# UI Kit\r\n\r\nРезультатом работы над дизайн-системой послужил выпуск UI кита в Figma. Комьюнити положительно оценило выпуск кита, особенно те пользователи которые просили об этом раньше.  \r\n\r\n# Результаты \r\n\r\nКак результат, получилось собрать крепкий каркас дизайн-системы, которая помогает дизайнерам намного быстрее решать задачи и дальше развивать UX/UI компонентов, а разработчикам использовать дизайн систему как единый источник знаний.', `Summary`='', `FormatterID`='neasden', `OriginalAlias`='blazor', `Uploads`='a:4:{i:0;s:33:\"/images/1x/maxim-petrov-photo.png\";i:1;s:28:\"/images/blog/1x/blazor-2.png\";i:2;s:28:\"/images/blog/1x/blazor-1.png\";i:3;s:15:\"empty-image.jpg\";}', `IsPublished`='1', `IsCommentable`='0', `IsVisible`='1', `IsFavourite`='1', `Stamp`='1711384202', `LastModified`='1711790310', `Offset`='14400', `IsDST`='0', `IsIndexed`='1', `IsExternal`='0', `ReadCount`='1', `SourceID`='0', `SourceNoteID`='0', `SourceNoteURL`='', `SourceNoteJSONURL`='', `SourceNoteData`='' WHERE `SubsetID`=1 AND (`ID`=5);

UPDATE `e2BlogNotes` SET `SubsetID`='1', `Title`='Дизайн-система Blazor', `Text`='DevExpress Blazor — это набор компонентов пользовательского интерфейса. Продукт активно используется в приложениях на платформе Blazor и предлагают мощный набор компонентов: таблицы данных, календари и планировщики, выпадающие списки, диалоговые окна и многие другие. \r\n\r\nЗадача — переосмыслить и создать дизайн-систему в Figma на основе существующих артефактов и наработок.\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/blazor-1.png\" srcset=\"/images/blog/1x/blazor-1.png 1x, /images/blog/2x/blazor-1@2x.png 2x\" class=\"img-fluid\">\r\n\r\n# Вводные\r\n\r\nПо мере развития продукта, стало увеличиваться количество выпускаемых компонентов и их сложность. Предыдущий подход, когда дизайнер рисовал отдельный макет под каждую задачу стал приносить заметные неудобства для команды. Разработка начала сильно обгонять дизайн и многие решения по краевым сценариям стали принимать сами разработчки. Дизайнеру тратил много времени на поиск визуальных и UX багов на поздних этапах разработки компонента или фичи.\r\n\r\nОтдельной проблемой была сложность каждого компонента:\r\n- **Разные темы**. В разных темах компонент не только меняет цвет, но и начинает обладать другими визуальными свойствами.\r\n- **Несколько размеров**. Каждый компонент линейки представлен в трёх размерах. \r\n- **Дополнительные стили**. Большой набор стилистических вариантов для компонентов-атомов.\r\n\r\nНапример, одна только кнопка состоит из 150 вариантов компонента:\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/blazor-2.png\" srcset=\"/images/blog/1x/blazor-2.png 1x, /images/blog/2x/blazor-2@2x.png 2x\" class=\"img-fluid\">\r\n\r\nБыло принято решение менять подход — разработать стандарты, правила постановки задач и проектирования.\r\n\r\n# Цели\r\n\r\nКоманда выделила ресурсы на внедрение полноценной дизайн-системы и поставил перед ней решение следующих проблем:\r\n1. **Оптимизировать работу команды на этапах дизайна и разработки.**\r\nРаньше, эти процессы были довольно хаотичны. Дизайнер брал в задачу в работу и изображал примерную реализацию компонента. Многие краевые сценарии не учитывались. Какие-то решения в процессе разработки менялись на ходу. В итоге, разработка затягивалась, фичи резались и итоговый результат сильно отличался от исходной картинки.\r\n2. **Автоматизация и консистентность**.\r\nБольшой размер и сложность компонентов сильно усложняли внесение любых изменений в дизайн. Даже небольшие стилистические изменения в базовом компоненте типа кнопки приводили к огромному количеству работы со стороны дизайнера. Так нужно было учесть разные темы, размеры и стили.\r\n3. **Консистентность цвета**.\r\nОтдельно стоит отметить проблему с цветом. Многие цвета компонентов в коде рассчитывались с помощью миксинов. Это приводило ко многим проблемам, в том числе, проблемам с контрастностью.\r\n4. **Доступность**\r\nПользователи продукта стали всё чаще интересоваться, насколько компоненты доступны для разных категорий пользователей. Нужно было сформировать подход, как дизайнер должен заказывать грамотные A11Y на этапе проектирования дизайна.\r\n5. **Централизация знаний**\r\nМногие знания о тех или иных дизайн-решениях нигде не фиксировались. Единственным источником знания были участвующие в работе на фичей члены команды.\r\n6. **UI Kit**\r\nЧасть пользователей жаловалась на отсутствие UI кита. Плюс, у конкурентов он уже давно был.\r\n\r\n# Переработка компонентов в Figma с нуля\r\n\r\nДизайн существующих компонентов полностью повторяет функционал кодовой реализации. Учтены все редкие сценарии и пограничные состояния компонентов. Перед отрисовкой изучается API компонента и все сценарии его использования.\r\n\r\n## Пример реализации компонента Grid\r\n\r\nКомпонент Grid является одним из больших и одним из самых популярным компонентов в линейке Blazor. Grid представляет собой компонент для отображения данных в табличном формате, который включает в себя множество функций для управления данными, их представления и настройки, таких как фильтрация, группировка, пагинация, сортировка и многое другое.\r\n\r\nОсновную сложность представляет его размер:\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/blazor-3.png\" srcset=\"/images/blog/1x/blazor-2.png 1x, /images/blog/2x/blazor-3@2x.png 2x\" class=\"img-fluid\">\r\n\r\nТак как разные пользователи использую грид по-разному, то компонент получается достаточно гибким по функционалу и возможностям. Всё это отражено в дизайне.\r\n\r\nДля того, чтобы отрисовать такой в Figma пришлось сначала изучить и собрать файл со скриншотами всех состояний компонента. Для этого были изучены демо стенды компоненты, описывающие его стили и API.\r\n\r\nВ итоге, реализованный макет компонента помогает быстрее решать новые задачи и прикидывать прототипы с разными сценариями использования. \r\n\r\n# Разработка новых компонентов\r\n\r\nРазработка дизайна новых компонентов включает в себя исследование решений на рынке, лучшие практики, клавиатурную навигацию, идея для демо стендов, и обсуждение требований с ПМом. В зависимости от задачи, количество пунктов может быть больше или меньше.\r\n\r\n## Пример реализации компонента TreeList\r\n\r\nКомпонент TreeList предназначен для отображения иерархическими данными в виде расширенного списка, который сочетает в себе функциональные возможности древовидной структуры (TreeView) и таблицы (Grid). Это позволяет пользователям легко просматривать, сортировать, фильтровать и редактировать иерархические данные с возможностью разворачивания и сворачивания уровней вложенности данных для удобства восприятия.\r\n\r\nКомпонент TreeList часто используется в приложениях для управления содержимым, файловыми системами, а также в любых приложениях, где требуется эффективная работа с иерархическими данными.\r\n\r\nПеред началом отрисовки компонента был произведен ресёрч реализации решений у других вендоров. Собран список идей и примерные способы реализации. В конце каждого этапа происходили синхрозиционны встречи с ПМом, разработчиками и другими заинтересованными лицами.\r\n\r\n# Токенизация\r\n\r\nКаждый компонент представлен в разных темах. Руками отрисовать каждый компонент в каждой теме очень дорого и ресурсозатратно. Плюс, цена ошибки в таком случае очень высока.\r\n\r\nБыло принято решение использовать дизайн-токены:\r\n- Чтобы быстро обновлять стили компонента под любую тему.\r\n- Гарантировать консистентность решений.\r\n- Использовать как мостик между дизайном и разработкой.\r\n\r\nБыла проведена большая работа над созданием архитектуры и структуры дизайн-токенов:\r\n\r\nК сожалению, для создания грамотной архитектуры, в данном случае, встроенные Figma Variables не подошли. Для работы с токсинами использует Tokens Studio.\r\n\r\nКаждый компонент имеет полное покрытие токенами. Это касается как цветов, так других стилей: бордер, авто-лейаут, тени. \r\n\r\nВ итоге, любой компонент в Fimga легко протестировать с другими стилистическими настройками. А разработчики могут использовать токены для использованиях их значений в файлах стилей.\r\n\r\n# Документирование\r\n\r\nДокументирование покрывается несколькими факторами:\r\n- Сама реализации компонентов в Figma\r\n- Дизайн-токены\r\n- Внутренняя документация\r\n\r\nВнутренняя документация представляет собой правил и рекомендаций: \r\n- правила оформления\r\n- правила работы с дизайн-токенами\r\n- требования по иконкам\r\n- работа с цветовой палитрой\r\n\r\nТут же собраны результаты ресёрчей по тем или иным задач. А также, приятные решения по ним. Это помогает всем членам команды понимать, куда нужно обращаться в первую очередь чтобы найти такую информацию.\r\n\r\n# UI Kit\r\n\r\nРезультатом работы над дизайн-системой послужил выпуск UI кита в Figma. Комьюнити положительно оценило выпуск кита, особенно те пользователи которые просили об этом раньше.  \r\n\r\n# Результаты \r\n\r\nКак результат, получилось собрать крепкий каркас дизайн-системы, которая помогает дизайнерам намного быстрее решать задачи и дальше развивать UX/UI компонентов, а разработчикам использовать дизайн систему как единый источник знаний.', `Summary`='', `FormatterID`='neasden', `OriginalAlias`='blazor', `Uploads`='a:5:{i:0;s:33:\"/images/1x/maxim-petrov-photo.png\";i:1;s:28:\"/images/blog/1x/blazor-2.png\";i:2;s:28:\"/images/blog/1x/blazor-1.png\";i:3;s:15:\"empty-image.jpg\";i:6;s:28:\"/images/blog/1x/blazor-3.png\";}', `IsPublished`='1', `IsCommentable`='0', `IsVisible`='1', `IsFavourite`='1', `Stamp`='1711384202', `LastModified`='1711790310', `Offset`='14400', `IsDST`='0', `IsIndexed`='1', `IsExternal`='0', `ReadCount`='1', `SourceID`='0', `SourceNoteID`='0', `SourceNoteURL`='', `SourceNoteJSONURL`='', `SourceNoteData`='' WHERE `SubsetID`=1 AND (`ID`=5);

UPDATE `e2BlogAliases` SET `EntityType`='n', `EntityID`='5', `Alias`='blazor', `Stamp`='1711790349' WHERE `SubsetID`=1 AND (`ID`=6);

UPDATE `e2BlogNotes` SET `SubsetID`='1', `Title`='Дизайн-система Blazor', `Text`='DevExpress Blazor — это набор компонентов пользовательского интерфейса. Продукт активно используется в приложениях на платформе Blazor и предлагают мощный набор компонентов: таблицы данных, календари и планировщики, выпадающие списки, диалоговые окна и многие другие. \r\n\r\nЗадача — переосмыслить и создать дизайн-систему в Figma на основе существующих артефактов и наработок.\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/blazor-1.png\" srcset=\"/images/blog/1x/blazor-1.png 1x, /images/blog/2x/blazor-1@2x.png 2x\" class=\"img-fluid\">\r\n\r\n# Вводные\r\n\r\nПо мере развития продукта, стало увеличиваться количество выпускаемых компонентов и их сложность. Предыдущий подход, когда дизайнер рисовал отдельный макет под каждую задачу стал приносить заметные неудобства для команды. Разработка начала сильно обгонять дизайн и многие решения по краевым сценариям стали принимать сами разработчки. Дизайнеру тратил много времени на поиск визуальных и UX багов на поздних этапах разработки компонента или фичи.\r\n\r\nОтдельной проблемой была сложность каждого компонента:\r\n- **Разные темы**. В разных темах компонент не только меняет цвет, но и начинает обладать другими визуальными свойствами.\r\n- **Несколько размеров**. Каждый компонент линейки представлен в трёх размерах. \r\n- **Дополнительные стили**. Большой набор стилистических вариантов для компонентов-атомов.\r\n\r\nНапример, одна только кнопка состоит из 150 вариантов компонента:\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/blazor-2.png\" srcset=\"/images/blog/1x/blazor-2.png 1x, /images/blog/2x/blazor-2@2x.png 2x\" class=\"img-fluid\">\r\n\r\nБыло принято решение менять подход — разработать стандарты, правила постановки задач и проектирования.\r\n\r\n# Цели\r\n\r\nКоманда выделила ресурсы на внедрение полноценной дизайн-системы и поставил перед ней решение следующих проблем:\r\n1. **Оптимизировать работу команды на этапах дизайна и разработки.**\r\nРаньше, эти процессы были довольно хаотичны. Дизайнер брал в задачу в работу и изображал примерную реализацию компонента. Многие краевые сценарии не учитывались. Какие-то решения в процессе разработки менялись на ходу. В итоге, разработка затягивалась, фичи резались и итоговый результат сильно отличался от исходной картинки.\r\n2. **Автоматизация и консистентность**.\r\nБольшой размер и сложность компонентов сильно усложняли внесение любых изменений в дизайн. Даже небольшие стилистические изменения в базовом компоненте типа кнопки приводили к огромному количеству работы со стороны дизайнера. Так нужно было учесть разные темы, размеры и стили.\r\n3. **Консистентность цвета**.\r\nОтдельно стоит отметить проблему с цветом. Многие цвета компонентов в коде рассчитывались с помощью миксинов. Это приводило ко многим проблемам, в том числе, проблемам с контрастностью.\r\n4. **Доступность**\r\nПользователи продукта стали всё чаще интересоваться, насколько компоненты доступны для разных категорий пользователей. Нужно было сформировать подход, как дизайнер должен заказывать грамотные A11Y на этапе проектирования дизайна.\r\n5. **Централизация знаний**\r\nМногие знания о тех или иных дизайн-решениях нигде не фиксировались. Единственным источником знания были участвующие в работе на фичей члены команды.\r\n6. **UI Kit**\r\nЧасть пользователей жаловалась на отсутствие UI кита. Плюс, у конкурентов он уже давно был.\r\n\r\n# Переработка компонентов в Figma с нуля\r\n\r\nДизайн существующих компонентов полностью повторяет функционал кодовой реализации. Учтены все редкие сценарии и пограничные состояния компонентов. Перед отрисовкой изучается API компонента и все сценарии его использования.\r\n\r\n## Пример реализации компонента Grid\r\n\r\nКомпонент Grid является одним из больших и одним из самых популярным компонентов в линейке Blazor. Grid представляет собой компонент для отображения данных в табличном формате, который включает в себя множество функций для управления данными, их представления и настройки, таких как фильтрация, группировка, пагинация, сортировка и многое другое.\r\n\r\nОсновную сложность представляет его размер:\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/blazor-3.png\" srcset=\"/images/blog/1x/blazor-3.png 1x, /images/blog/2x/blazor-3@2x.png 2x\" class=\"img-fluid\">\r\n\r\nТак как разные пользователи использую грид по-разному, то компонент получается достаточно гибким по функционалу и возможностям. Всё это отражено в дизайне.\r\n\r\nДля того, чтобы отрисовать такой в Figma пришлось сначала изучить и собрать файл со скриншотами всех состояний компонента. Для этого были изучены демо стенды компоненты, описывающие его стили и API.\r\n\r\nВ итоге, реализованный макет компонента помогает быстрее решать новые задачи и прикидывать прототипы с разными сценариями использования. \r\n\r\n# Разработка новых компонентов\r\n\r\nРазработка дизайна новых компонентов включает в себя исследование решений на рынке, лучшие практики, клавиатурную навигацию, идея для демо стендов, и обсуждение требований с ПМом. В зависимости от задачи, количество пунктов может быть больше или меньше.\r\n\r\n## Пример реализации компонента TreeList\r\n\r\nКомпонент TreeList предназначен для отображения иерархическими данными в виде расширенного списка, который сочетает в себе функциональные возможности древовидной структуры (TreeView) и таблицы (Grid). Это позволяет пользователям легко просматривать, сортировать, фильтровать и редактировать иерархические данные с возможностью разворачивания и сворачивания уровней вложенности данных для удобства восприятия.\r\n\r\nКомпонент TreeList часто используется в приложениях для управления содержимым, файловыми системами, а также в любых приложениях, где требуется эффективная работа с иерархическими данными.\r\n\r\nПеред началом отрисовки компонента был произведен ресёрч реализации решений у других вендоров. Собран список идей и примерные способы реализации. В конце каждого этапа происходили синхрозиционны встречи с ПМом, разработчиками и другими заинтересованными лицами.\r\n\r\n# Токенизация\r\n\r\nКаждый компонент представлен в разных темах. Руками отрисовать каждый компонент в каждой теме очень дорого и ресурсозатратно. Плюс, цена ошибки в таком случае очень высока.\r\n\r\nБыло принято решение использовать дизайн-токены:\r\n- Чтобы быстро обновлять стили компонента под любую тему.\r\n- Гарантировать консистентность решений.\r\n- Использовать как мостик между дизайном и разработкой.\r\n\r\nБыла проведена большая работа над созданием архитектуры и структуры дизайн-токенов:\r\n\r\nК сожалению, для создания грамотной архитектуры, в данном случае, встроенные Figma Variables не подошли. Для работы с токсинами использует Tokens Studio.\r\n\r\nКаждый компонент имеет полное покрытие токенами. Это касается как цветов, так других стилей: бордер, авто-лейаут, тени. \r\n\r\nВ итоге, любой компонент в Fimga легко протестировать с другими стилистическими настройками. А разработчики могут использовать токены для использованиях их значений в файлах стилей.\r\n\r\n# Документирование\r\n\r\nДокументирование покрывается несколькими факторами:\r\n- Сама реализации компонентов в Figma\r\n- Дизайн-токены\r\n- Внутренняя документация\r\n\r\nВнутренняя документация представляет собой правил и рекомендаций: \r\n- правила оформления\r\n- правила работы с дизайн-токенами\r\n- требования по иконкам\r\n- работа с цветовой палитрой\r\n\r\nТут же собраны результаты ресёрчей по тем или иным задач. А также, приятные решения по ним. Это помогает всем членам команды понимать, куда нужно обращаться в первую очередь чтобы найти такую информацию.\r\n\r\n# UI Kit\r\n\r\nРезультатом работы над дизайн-системой послужил выпуск UI кита в Figma. Комьюнити положительно оценило выпуск кита, особенно те пользователи которые просили об этом раньше.  \r\n\r\n# Результаты \r\n\r\nКак результат, получилось собрать крепкий каркас дизайн-системы, которая помогает дизайнерам намного быстрее решать задачи и дальше развивать UX/UI компонентов, а разработчикам использовать дизайн систему как единый источник знаний.', `Summary`='', `FormatterID`='neasden', `OriginalAlias`='blazor', `Uploads`='a:5:{i:0;s:33:\"/images/1x/maxim-petrov-photo.png\";i:1;s:28:\"/images/blog/1x/blazor-2.png\";i:2;s:28:\"/images/blog/1x/blazor-1.png\";i:3;s:15:\"empty-image.jpg\";i:6;s:28:\"/images/blog/1x/blazor-3.png\";}', `IsPublished`='1', `IsCommentable`='0', `IsVisible`='1', `IsFavourite`='1', `Stamp`='1711384202', `LastModified`='1711790349', `Offset`='14400', `IsDST`='0', `IsIndexed`='0', `IsExternal`='0', `ReadCount`='1', `SourceID`='0', `SourceNoteID`='0', `SourceNoteURL`='', `SourceNoteJSONURL`='', `SourceNoteData`='' WHERE `SubsetID`=1 AND (`ID`=5);

UPDATE `e2BlogNotes` SET `SubsetID`='1', `Title`='Дизайн-система Blazor', `Text`='DevExpress Blazor — это набор компонентов пользовательского интерфейса. Продукт активно используется в приложениях на платформе Blazor и предлагают мощный набор компонентов: таблицы данных, календари и планировщики, выпадающие списки, диалоговые окна и многие другие. \r\n\r\nЗадача — переосмыслить и создать дизайн-систему в Figma на основе существующих артефактов и наработок.\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/blazor-1.png\" srcset=\"/images/blog/1x/blazor-1.png 1x, /images/blog/2x/blazor-1@2x.png 2x\" class=\"img-fluid\">\r\n\r\n# Вводные\r\n\r\nПо мере развития продукта, стало увеличиваться количество выпускаемых компонентов и их сложность. Предыдущий подход, когда дизайнер рисовал отдельный макет под каждую задачу стал приносить заметные неудобства для команды. Разработка начала сильно обгонять дизайн и многие решения по краевым сценариям стали принимать сами разработчки. Дизайнеру тратил много времени на поиск визуальных и UX багов на поздних этапах разработки компонента или фичи.\r\n\r\nОтдельной проблемой была сложность каждого компонента:\r\n- **Разные темы**. В разных темах компонент не только меняет цвет, но и начинает обладать другими визуальными свойствами.\r\n- **Несколько размеров**. Каждый компонент линейки представлен в трёх размерах. \r\n- **Дополнительные стили**. Большой набор стилистических вариантов для компонентов-атомов.\r\n\r\nНапример, одна только кнопка состоит из 150 вариантов компонента:\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/blazor-2.png\" srcset=\"/images/blog/1x/blazor-2.png 1x, /images/blog/2x/blazor-2@2x.png 2x\" class=\"img-fluid\">\r\n\r\nБыло принято решение менять подход — разработать стандарты, правила постановки задач и проектирования.\r\n\r\n# Цели\r\n\r\nКоманда выделила ресурсы на внедрение полноценной дизайн-системы и поставил перед ней решение следующих проблем:\r\n1. **Оптимизировать работу команды на этапах дизайна и разработки.**\r\nРаньше, эти процессы были довольно хаотичны. Дизайнер брал в задачу в работу и изображал примерную реализацию компонента. Многие краевые сценарии не учитывались. Какие-то решения в процессе разработки менялись на ходу. В итоге, разработка затягивалась, фичи резались и итоговый результат сильно отличался от исходной картинки.\r\n2. **Автоматизация и консистентность**.\r\nБольшой размер и сложность компонентов сильно усложняли внесение любых изменений в дизайн. Даже небольшие стилистические изменения в базовом компоненте типа кнопки приводили к огромному количеству работы со стороны дизайнера. Так нужно было учесть разные темы, размеры и стили.\r\n3. **Консистентность цвета**.\r\nОтдельно стоит отметить проблему с цветом. Многие цвета компонентов в коде рассчитывались с помощью миксинов. Это приводило ко многим проблемам, в том числе, проблемам с контрастностью.\r\n4. **Доступность**\r\nПользователи продукта стали всё чаще интересоваться, насколько компоненты доступны для разных категорий пользователей. Нужно было сформировать подход, как дизайнер должен заказывать грамотные A11Y на этапе проектирования дизайна.\r\n5. **Централизация знаний**\r\nМногие знания о тех или иных дизайн-решениях нигде не фиксировались. Единственным источником знания были участвующие в работе на фичей члены команды.\r\n6. **UI Kit**\r\nЧасть пользователей жаловалась на отсутствие UI кита. Плюс, у конкурентов он уже давно был.\r\n\r\n# Переработка компонентов в Figma с нуля\r\n\r\nДизайн существующих компонентов полностью повторяет функционал кодовой реализации. Учтены все редкие сценарии и пограничные состояния компонентов. Перед отрисовкой изучается API компонента и все сценарии его использования.\r\n\r\n## Пример реализации компонента Grid\r\n\r\nКомпонент Grid является одним из больших и одним из самых популярным компонентов в линейке Blazor. Grid представляет собой компонент для отображения данных в табличном формате, который включает в себя множество функций для управления данными, их представления и настройки, таких как фильтрация, группировка, пагинация, сортировка и многое другое.\r\n\r\nОсновную сложность представляет его размер:\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/blazor-3.png\" srcset=\"/images/blog/1x/blazor-3.png 1x, /images/blog/2x/blazor-3@2x.png 2x\" class=\"img-fluid\">\r\n\r\nТак как разные пользователи использую грид по-разному, то компонент получается достаточно гибким по функционалу и возможностям. Всё это отражено в дизайне.\r\n\r\nДля того, чтобы отрисовать такой в Figma пришлось сначала изучить и собрать файл со скриншотами всех состояний компонента. Для этого были изучены демо стенды компоненты, описывающие его стили и API.\r\n\r\nВ итоге, реализованный макет компонента помогает быстрее решать новые задачи и прикидывать прототипы с разными сценариями использования. \r\n\r\n# Разработка новых компонентов\r\n\r\nРазработка дизайна новых компонентов включает в себя исследование решений на рынке, лучшие практики, клавиатурную навигацию, идея для демо стендов, и обсуждение требований с ПМом. В зависимости от задачи, количество пунктов может быть больше или меньше.\r\n\r\n## Пример реализации компонента TreeList\r\n\r\nКомпонент TreeList предназначен для отображения иерархическими данными в виде расширенного списка, который сочетает в себе функциональные возможности древовидной структуры (TreeView) и таблицы (Grid). Это позволяет пользователям легко просматривать, сортировать, фильтровать и редактировать иерархические данные с возможностью разворачивания и сворачивания уровней вложенности данных для удобства восприятия.\r\n\r\nКомпонент TreeList часто используется в приложениях для управления содержимым, файловыми системами, а также в любых приложениях, где требуется эффективная работа с иерархическими данными.\r\n\r\nПеред началом отрисовки компонента был произведен ресёрч реализации решений у других вендоров. Собран список идей и примерные способы реализации. В конце каждого этапа происходили синхрозиционны встречи с ПМом, разработчиками и другими заинтересованными лицами.\r\n\r\n# Токенизация\r\n\r\nКаждый компонент представлен в разных темах. Руками отрисовать каждый компонент в каждой теме очень дорого и ресурсозатратно. Плюс, цена ошибки в таком случае очень высока.\r\n\r\nБыло принято решение использовать дизайн-токены:\r\n- Чтобы быстро обновлять стили компонента под любую тему.\r\n- Гарантировать консистентность решений.\r\n- Использовать как мостик между дизайном и разработкой.\r\n\r\nБыла проведена большая работа над созданием архитектуры и структуры дизайн-токенов:\r\n\r\nК сожалению, для создания грамотной архитектуры, в данном случае, встроенные Figma Variables не подошли. Для работы с токсинами использует Tokens Studio.\r\n\r\nКаждый компонент имеет полное покрытие токенами. Это касается как цветов, так других стилей: бордер, авто-лейаут, тени. \r\n\r\nВ итоге, любой компонент в Fimga легко протестировать с другими стилистическими настройками. А разработчики могут использовать токены для использованиях их значений в файлах стилей.\r\n\r\n# Документирование\r\n\r\nДокументирование покрывается несколькими факторами:\r\n- Сама реализации компонентов в Figma\r\n- Дизайн-токены\r\n- Внутренняя документация\r\n\r\nВнутренняя документация представляет собой правил и рекомендаций: \r\n- правила оформления\r\n- правила работы с дизайн-токенами\r\n- требования по иконкам\r\n- работа с цветовой палитрой\r\n\r\nТут же собраны результаты ресёрчей по тем или иным задач. А также, приятные решения по ним. Это помогает всем членам команды понимать, куда нужно обращаться в первую очередь чтобы найти такую информацию.\r\n\r\n# UI Kit\r\n\r\nРезультатом работы над дизайн-системой послужил выпуск UI кита в Figma. Комьюнити положительно оценило выпуск кита, особенно те пользователи которые просили об этом раньше.  \r\n\r\n# Результаты \r\n\r\nКак результат, получилось собрать крепкий каркас дизайн-системы, которая помогает дизайнерам намного быстрее решать задачи и дальше развивать UX/UI компонентов, а разработчикам использовать дизайн систему как единый источник знаний.', `Summary`='', `FormatterID`='neasden', `OriginalAlias`='blazor', `Uploads`='a:5:{i:0;s:33:\"/images/1x/maxim-petrov-photo.png\";i:1;s:28:\"/images/blog/1x/blazor-2.png\";i:2;s:28:\"/images/blog/1x/blazor-1.png\";i:3;s:15:\"empty-image.jpg\";i:6;s:28:\"/images/blog/1x/blazor-3.png\";}', `IsPublished`='1', `IsCommentable`='0', `IsVisible`='1', `IsFavourite`='1', `Stamp`='1711384202', `LastModified`='1711790349', `Offset`='14400', `IsDST`='0', `IsIndexed`='1', `IsExternal`='0', `ReadCount`='1', `SourceID`='0', `SourceNoteID`='0', `SourceNoteURL`='', `SourceNoteJSONURL`='', `SourceNoteData`='' WHERE `SubsetID`=1 AND (`ID`=5);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1711789200', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1709199355);

UPDATE `e2BlogNotes` SET `SubsetID`='1', `Title`='Дизайн-система Blazor', `Text`='DevExpress Blazor — это набор компонентов пользовательского интерфейса. Продукт активно используется в приложениях на платформе Blazor и предлагают мощный набор компонентов: таблицы данных, календари и планировщики, выпадающие списки, диалоговые окна и многие другие. \r\n\r\nЗадача — переосмыслить и создать дизайн-систему в Figma на основе существующих артефактов и наработок.\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/blazor-1.png\" srcset=\"/images/blog/1x/blazor-1.png 1x, /images/blog/2x/blazor-1@2x.png 2x\" class=\"img-fluid\">\r\n\r\n# Вводные\r\n\r\nПо мере развития продукта, стало увеличиваться количество выпускаемых компонентов и их сложность. Предыдущий подход, когда дизайнер рисовал отдельный макет под каждую задачу стал приносить заметные неудобства для команды. Разработка начала сильно обгонять дизайн и многие решения по краевым сценариям стали принимать сами разработчки. Дизайнеру тратил много времени на поиск визуальных и UX багов на поздних этапах разработки компонента или фичи.\r\n\r\nОтдельной проблемой была сложность каждого компонента:\r\n- **Разные темы**. В разных темах компонент не только меняет цвет, но и начинает обладать другими визуальными свойствами.\r\n- **Несколько размеров**. Каждый компонент линейки представлен в трёх размерах. \r\n- **Дополнительные стили**. Большой набор стилистических вариантов для компонентов-атомов.\r\n\r\nНапример, одна только кнопка состоит из 150 вариантов компонента:\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/blazor-2.png\" srcset=\"/images/blog/1x/blazor-2.png 1x, /images/blog/2x/blazor-2@2x.png 2x\" class=\"img-fluid\">\r\n\r\nБыло принято решение менять подход — разработать стандарты, правила постановки задач и проектирования.\r\n\r\n# Цели\r\n\r\nКоманда выделила ресурсы на внедрение полноценной дизайн-системы и поставил перед ней решение следующих проблем:\r\n1. **Оптимизировать работу команды на этапах дизайна и разработки.**\r\nРаньше, эти процессы были довольно хаотичны. Дизайнер брал в задачу в работу и изображал примерную реализацию компонента. Многие краевые сценарии не учитывались. Какие-то решения в процессе разработки менялись на ходу. В итоге, разработка затягивалась, фичи резались и итоговый результат сильно отличался от исходной картинки.\r\n2. **Автоматизация и консистентность**.\r\nБольшой размер и сложность компонентов сильно усложняли внесение любых изменений в дизайн. Даже небольшие стилистические изменения в базовом компоненте типа кнопки приводили к огромному количеству работы со стороны дизайнера. Так нужно было учесть разные темы, размеры и стили.\r\n3. **Консистентность цвета**.\r\nОтдельно стоит отметить проблему с цветом. Многие цвета компонентов в коде рассчитывались с помощью миксинов. Это приводило ко многим проблемам, в том числе, проблемам с контрастностью.\r\n4. **Доступность**\r\nПользователи продукта стали всё чаще интересоваться, насколько компоненты доступны для разных категорий пользователей. Нужно было сформировать подход, как дизайнер должен заказывать грамотные A11Y на этапе проектирования дизайна.\r\n5. **Централизация знаний**\r\nМногие знания о тех или иных дизайн-решениях нигде не фиксировались. Единственным источником знания были участвующие в работе на фичей члены команды.\r\n6. **UI Kit**\r\nЧасть пользователей жаловалась на отсутствие UI кита. Плюс, у конкурентов он уже давно был.\r\n\r\n# Переработка компонентов в Figma с нуля\r\n\r\nДизайн существующих компонентов полностью повторяет функционал кодовой реализации. Учтены все редкие сценарии и пограничные состояния компонентов. Перед отрисовкой изучается API компонента и все сценарии его использования.\r\n\r\n## Пример реализации компонента Grid\r\n\r\nКомпонент Grid является одним из больших и одним из самых популярным компонентов в линейке Blazor. Grid представляет собой компонент для отображения данных в табличном формате, который включает в себя множество функций для управления данными, их представления и настройки, таких как фильтрация, группировка, пагинация, сортировка и многое другое.\r\n\r\nОсновную сложность представляет его размер:\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/blazor-3.png\" srcset=\"/images/blog/1x/blazor-3.png 1x, /images/blog/2x/blazor-3@2x.png 2x\" class=\"img-fluid\">\r\n\r\nТак как разные пользователи использую грид по-разному, то компонент получается достаточно гибким по функционалу и возможностям. Всё это отражено в дизайне.\r\n\r\nДля того, чтобы отрисовать такой в Figma пришлось сначала изучить и собрать файл со скриншотами всех состояний компонента. Для этого были изучены демо стенды компоненты, описывающие его стили и API.\r\n\r\nВ итоге, реализованный макет компонента помогает быстрее решать новые задачи и прикидывать прототипы с разными сценариями использования. \r\n\r\n# Разработка новых компонентов\r\n\r\nРазработка дизайна новых компонентов включает в себя исследование решений на рынке, лучшие практики, клавиатурную навигацию, идея для демо стендов, и обсуждение требований с ПМом. В зависимости от задачи, количество пунктов может быть больше или меньше.\r\n\r\n## Пример реализации компонента TreeList\r\n\r\nКомпонент TreeList предназначен для отображения иерархическими данными в виде расширенного списка, который сочетает в себе функциональные возможности древовидной структуры (TreeView) и таблицы (Grid). Это позволяет пользователям легко просматривать, сортировать, фильтровать и редактировать иерархические данные с возможностью разворачивания и сворачивания уровней вложенности данных для удобства восприятия.\r\n\r\nКомпонент TreeList часто используется в приложениях для управления содержимым, файловыми системами, а также в любых приложениях, где требуется эффективная работа с иерархическими данными.\r\n\r\nПеред началом отрисовки компонента был произведен ресёрч реализации решений у других вендоров. Собран список идей и примерные способы реализации. В конце каждого этапа происходили синхрозиционны встречи с ПМом, разработчиками и другими заинтересованными лицами.\r\n\r\n# Токенизация\r\n\r\nКаждый компонент представлен в разных темах. Руками отрисовать каждый компонент в каждой теме очень дорого и ресурсозатратно. Плюс, цена ошибки в таком случае очень высока.\r\n\r\nБыло принято решение использовать дизайн-токены:\r\n- Чтобы быстро обновлять стили компонента под любую тему.\r\n- Гарантировать консистентность решений.\r\n- Использовать как мостик между дизайном и разработкой.\r\n\r\nБыла проведена большая работа над созданием архитектуры и структуры дизайн-токенов:\r\n\r\nК сожалению, для создания грамотной архитектуры, в данном случае, встроенные Figma Variables не подошли. Для работы с токсинами использует Tokens Studio.\r\n\r\nКаждый компонент имеет полное покрытие токенами. Это касается как цветов, так других стилей: бордер, авто-лейаут, тени. \r\n\r\nВ итоге, любой компонент в Fimga легко протестировать с другими стилистическими настройками. А разработчики могут использовать токены для использованиях их значений в файлах стилей.\r\n\r\n# Документирование\r\n\r\nДокументирование покрывается несколькими факторами:\r\n- Сама реализации компонентов в Figma\r\n- Дизайн-токены\r\n- Внутренняя документация\r\n\r\nВнутренняя документация представляет собой правил и рекомендаций: \r\n- правила оформления\r\n- правила работы с дизайн-токенами\r\n- требования по иконкам\r\n- работа с цветовой палитрой\r\n\r\nТут же собраны результаты ресёрчей по тем или иным задач. А также, приятные решения по ним. Это помогает всем членам команды понимать, куда нужно обращаться в первую очередь чтобы найти такую информацию.\r\n\r\n# UI Kit\r\n\r\nРезультатом работы над дизайн-системой послужил выпуск UI кита в Figma. Комьюнити положительно оценило выпуск кита, особенно те пользователи которые просили об этом раньше.  \r\n\r\n# Результаты \r\n\r\nКак результат, получилось собрать крепкий каркас дизайн-системы, которая помогает дизайнерам намного быстрее решать задачи и дальше развивать UX/UI компонентов, а разработчикам использовать дизайн систему как единый источник знаний.', `Summary`='', `FormatterID`='neasden', `OriginalAlias`='blazor', `Uploads`='a:5:{i:0;s:33:\"/images/1x/maxim-petrov-photo.png\";i:1;s:28:\"/images/blog/1x/blazor-2.png\";i:2;s:28:\"/images/blog/1x/blazor-1.png\";i:3;s:15:\"empty-image.jpg\";i:4;s:28:\"/images/blog/1x/blazor-3.png\";}', `IsPublished`='1', `IsCommentable`='0', `IsVisible`='1', `IsFavourite`='1', `Stamp`='1711384202', `LastModified`='1711790349', `Offset`='14400', `IsDST`='0', `IsIndexed`='1', `IsExternal`='0', `ReadCount`='2', `SourceID`='0', `SourceNoteID`='0', `SourceNoteURL`='', `SourceNoteJSONURL`='', `SourceNoteData`='' WHERE `SubsetID`=1 AND (`ID`=5);

UPDATE `e2BlogAliases` SET `EntityType`='n', `EntityID`='5', `Alias`='blazor', `Stamp`='1711793422' WHERE `SubsetID`=1 AND (`ID`=6);

UPDATE `e2BlogNotes` SET `SubsetID`='1', `Title`='Дизайн-система Blazor', `Text`='DevExpress Blazor — это набор компонентов пользовательского интерфейса. Продукт активно используется в приложениях на платформе Blazor и предлагают мощный набор компонентов: таблицы данных, календари и планировщики, выпадающие списки, диалоговые окна и многие другие. \r\n\r\nЗадача — переосмыслить и создать дизайн-систему в Figma на основе существующих артефактов и наработок.\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/blazor-1.png\" srcset=\"/images/blog/1x/blazor-1.png 1x, /images/blog/2x/blazor-1@2x.png 2x\" class=\"img-fluid\">\r\n\r\n# Вводные\r\n\r\nПо мере развития продукта, стало увеличиваться количество выпускаемых компонентов и их сложность. Предыдущий подход, когда дизайнер рисовал отдельный макет под каждую задачу стал приносить заметные неудобства для команды. Разработка начала сильно обгонять дизайн и многие решения по краевым сценариям стали принимать сами разработчки. Дизайнеру тратил много времени на поиск визуальных и UX багов на поздних этапах разработки компонента или фичи.\r\n\r\nОтдельной проблемой была сложность каждого компонента:\r\n- **Разные темы**. В разных темах компонент не только меняет цвет, но и начинает обладать другими визуальными свойствами.\r\n- **Несколько размеров**. Каждый компонент линейки представлен в трёх размерах. \r\n- **Дополнительные стили**. Большой набор стилистических вариантов для компонентов-атомов.\r\n\r\nНапример, одна только кнопка состоит из 150 вариантов компонента:\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/blazor-2.png\" srcset=\"/images/blog/1x/blazor-2.png 1x, /images/blog/2x/blazor-2@2x.png 2x\" class=\"img-fluid\">\r\n\r\nБыло принято решение менять подход — разработать стандарты, правила постановки задач и проектирования.\r\n\r\n# Цели\r\n\r\nКоманда выделила ресурсы на внедрение полноценной дизайн-системы и поставил перед ней решение следующих проблем:\r\n1. **Оптимизировать работу команды на этапах дизайна и разработки.**\r\nРаньше, эти процессы были довольно хаотичны. Дизайнер брал в задачу в работу и изображал примерную реализацию компонента. Многие краевые сценарии не учитывались. Какие-то решения в процессе разработки менялись на ходу. В итоге, разработка затягивалась, фичи резались и итоговый результат сильно отличался от исходной картинки.\r\n2. **Автоматизация и консистентность**.\r\nБольшой размер и сложность компонентов сильно усложняли внесение любых изменений в дизайн. Даже небольшие стилистические изменения в базовом компоненте типа кнопки приводили к огромному количеству работы со стороны дизайнера. Так нужно было учесть разные темы, размеры и стили.\r\n3. **Консистентность цвета**.\r\nОтдельно стоит отметить проблему с цветом. Многие цвета компонентов в коде рассчитывались с помощью миксинов. Это приводило ко многим проблемам, в том числе, проблемам с контрастностью.\r\n4. **Доступность**\r\nПользователи продукта стали всё чаще интересоваться, насколько компоненты доступны для разных категорий пользователей. Нужно было сформировать подход, как дизайнер должен заказывать грамотные A11Y на этапе проектирования дизайна.\r\n5. **Централизация знаний**\r\nМногие знания о тех или иных дизайн-решениях нигде не фиксировались. Единственным источником знания были участвующие в работе на фичей члены команды.\r\n6. **UI Kit**\r\nЧасть пользователей жаловалась на отсутствие UI кита. Плюс, у конкурентов он уже давно был.\r\n\r\n# Переработка компонентов в Figma с нуля\r\n\r\nДизайн существующих компонентов полностью повторяет функционал кодовой реализации. Учтены все редкие сценарии и пограничные состояния компонентов. Перед отрисовкой изучается API компонента и все сценарии его использования.\r\n\r\n## Пример реализации компонента Grid\r\n\r\nКомпонент Grid является одним из больших и одним из самых популярным компонентов в линейке Blazor. Grid представляет собой компонент для отображения данных в табличном формате, который включает в себя множество функций для управления данными, их представления и настройки, таких как фильтрация, группировка, пагинация, сортировка и многое другое.\r\n\r\nОсновную сложность представляет его размер:\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/blazor-3.png\" srcset=\"/images/blog/1x/blazor-3.png 1x, /images/blog/2x/blazor-3@2x.png 2x\" class=\"img-fluid\">\r\n\r\nТак как разные пользователи использую грид по-разному, то компонент получается достаточно гибким по функционалу и возможностям. Всё это отражено в дизайне.\r\n\r\nДля того, чтобы отрисовать такой в Figma пришлось сначала изучить и собрать файл со скриншотами всех состояний компонента. Для этого были изучены демо стенды компоненты, описывающие его стили и API.\r\n\r\nВ итоге, реализованный макет компонента помогает быстрее решать новые задачи и прикидывать прототипы с разными сценариями использования. \r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/blazor-4.png\" srcset=\"/images/blog/1x/blazor-4.png 1x, /images/blog/2x/blazor-4@2x.png 2x\" class=\"img-fluid\">\r\n\r\n# Разработка новых компонентов\r\n\r\nРазработка дизайна новых компонентов включает в себя исследование решений на рынке, лучшие практики, клавиатурную навигацию, идея для демо стендов, и обсуждение требований с ПМом. В зависимости от задачи, количество пунктов может быть больше или меньше.\r\n\r\n## Пример реализации компонента TreeList\r\n\r\nКомпонент TreeList предназначен для отображения иерархическими данными в виде расширенного списка, который сочетает в себе функциональные возможности древовидной структуры (TreeView) и таблицы (Grid). Это позволяет пользователям легко просматривать, сортировать, фильтровать и редактировать иерархические данные с возможностью разворачивания и сворачивания уровней вложенности данных для удобства восприятия.\r\n\r\nКомпонент TreeList часто используется в приложениях для управления содержимым, файловыми системами, а также в любых приложениях, где требуется эффективная работа с иерархическими данными.\r\n\r\nПеред началом отрисовки компонента был произведен ресёрч реализации решений у других вендоров. Собран список идей и примерные способы реализации. В конце каждого этапа происходили синхрозиционны встречи с ПМом, разработчиками и другими заинтересованными лицами.\r\n\r\n# Токенизация\r\n\r\nКаждый компонент представлен в разных темах. Руками отрисовать каждый компонент в каждой теме очень дорого и ресурсозатратно. Плюс, цена ошибки в таком случае очень высока.\r\n\r\nБыло принято решение использовать дизайн-токены:\r\n- Чтобы быстро обновлять стили компонента под любую тему.\r\n- Гарантировать консистентность решений.\r\n- Использовать как мостик между дизайном и разработкой.\r\n\r\nБыла проведена большая работа над созданием архитектуры и структуры дизайн-токенов:\r\n\r\nК сожалению, для создания грамотной архитектуры, в данном случае, встроенные Figma Variables не подошли. Для работы с токсинами использует Tokens Studio.\r\n\r\nКаждый компонент имеет полное покрытие токенами. Это касается как цветов, так других стилей: бордер, авто-лейаут, тени. \r\n\r\nВ итоге, любой компонент в Fimga легко протестировать с другими стилистическими настройками. А разработчики могут использовать токены для использованиях их значений в файлах стилей.\r\n\r\n# Документирование\r\n\r\nДокументирование покрывается несколькими факторами:\r\n- Сама реализации компонентов в Figma\r\n- Дизайн-токены\r\n- Внутренняя документация\r\n\r\nВнутренняя документация представляет собой правил и рекомендаций: \r\n- правила оформления\r\n- правила работы с дизайн-токенами\r\n- требования по иконкам\r\n- работа с цветовой палитрой\r\n\r\nТут же собраны результаты ресёрчей по тем или иным задач. А также, приятные решения по ним. Это помогает всем членам команды понимать, куда нужно обращаться в первую очередь чтобы найти такую информацию.\r\n\r\n# UI Kit\r\n\r\nРезультатом работы над дизайн-системой послужил выпуск UI кита в Figma. Комьюнити положительно оценило выпуск кита, особенно те пользователи которые просили об этом раньше.  \r\n\r\n# Результаты \r\n\r\nКак результат, получилось собрать крепкий каркас дизайн-системы, которая помогает дизайнерам намного быстрее решать задачи и дальше развивать UX/UI компонентов, а разработчикам использовать дизайн систему как единый источник знаний.', `Summary`='', `FormatterID`='neasden', `OriginalAlias`='blazor', `Uploads`='a:5:{i:0;s:33:\"/images/1x/maxim-petrov-photo.png\";i:1;s:28:\"/images/blog/1x/blazor-2.png\";i:2;s:28:\"/images/blog/1x/blazor-1.png\";i:3;s:15:\"empty-image.jpg\";i:4;s:28:\"/images/blog/1x/blazor-3.png\";}', `IsPublished`='1', `IsCommentable`='0', `IsVisible`='1', `IsFavourite`='1', `Stamp`='1711384202', `LastModified`='1711793422', `Offset`='14400', `IsDST`='0', `IsIndexed`='0', `IsExternal`='0', `ReadCount`='2', `SourceID`='0', `SourceNoteID`='0', `SourceNoteURL`='', `SourceNoteJSONURL`='', `SourceNoteData`='' WHERE `SubsetID`=1 AND (`ID`=5);

UPDATE `e2BlogNotes` SET `Uploads`='a:6:{i:0;s:33:"/images/1x/maxim-petrov-photo.png";i:1;s:28:"/images/blog/1x/blazor-2.png";i:2;s:28:"/images/blog/1x/blazor-1.png";i:3;s:15:"empty-image.jpg";i:4;s:28:"/images/blog/1x/blazor-3.png";i:5;s:28:"/images/blog/1x/blazor-4.png";}' WHERE `SubsetID`=1 AND `ID`=5;

UPDATE `e2BlogNotes` SET `SubsetID`='1', `Title`='Дизайн-система Blazor', `Text`='DevExpress Blazor — это набор компонентов пользовательского интерфейса. Продукт активно используется в приложениях на платформе Blazor и предлагают мощный набор компонентов: таблицы данных, календари и планировщики, выпадающие списки, диалоговые окна и многие другие. \r\n\r\nЗадача — переосмыслить и создать дизайн-систему в Figma на основе существующих артефактов и наработок.\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/blazor-1.png\" srcset=\"/images/blog/1x/blazor-1.png 1x, /images/blog/2x/blazor-1@2x.png 2x\" class=\"img-fluid\">\r\n\r\n# Вводные\r\n\r\nПо мере развития продукта, стало увеличиваться количество выпускаемых компонентов и их сложность. Предыдущий подход, когда дизайнер рисовал отдельный макет под каждую задачу стал приносить заметные неудобства для команды. Разработка начала сильно обгонять дизайн и многие решения по краевым сценариям стали принимать сами разработчки. Дизайнеру тратил много времени на поиск визуальных и UX багов на поздних этапах разработки компонента или фичи.\r\n\r\nОтдельной проблемой была сложность каждого компонента:\r\n- **Разные темы**. В разных темах компонент не только меняет цвет, но и начинает обладать другими визуальными свойствами.\r\n- **Несколько размеров**. Каждый компонент линейки представлен в трёх размерах. \r\n- **Дополнительные стили**. Большой набор стилистических вариантов для компонентов-атомов.\r\n\r\nНапример, одна только кнопка состоит из 150 вариантов компонента:\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/blazor-2.png\" srcset=\"/images/blog/1x/blazor-2.png 1x, /images/blog/2x/blazor-2@2x.png 2x\" class=\"img-fluid\">\r\n\r\nБыло принято решение менять подход — разработать стандарты, правила постановки задач и проектирования.\r\n\r\n# Цели\r\n\r\nКоманда выделила ресурсы на внедрение полноценной дизайн-системы и поставил перед ней решение следующих проблем:\r\n1. **Оптимизировать работу команды на этапах дизайна и разработки.**\r\nРаньше, эти процессы были довольно хаотичны. Дизайнер брал в задачу в работу и изображал примерную реализацию компонента. Многие краевые сценарии не учитывались. Какие-то решения в процессе разработки менялись на ходу. В итоге, разработка затягивалась, фичи резались и итоговый результат сильно отличался от исходной картинки.\r\n2. **Автоматизация и консистентность**.\r\nБольшой размер и сложность компонентов сильно усложняли внесение любых изменений в дизайн. Даже небольшие стилистические изменения в базовом компоненте типа кнопки приводили к огромному количеству работы со стороны дизайнера. Так нужно было учесть разные темы, размеры и стили.\r\n3. **Консистентность цвета**.\r\nОтдельно стоит отметить проблему с цветом. Многие цвета компонентов в коде рассчитывались с помощью миксинов. Это приводило ко многим проблемам, в том числе, проблемам с контрастностью.\r\n4. **Доступность**\r\nПользователи продукта стали всё чаще интересоваться, насколько компоненты доступны для разных категорий пользователей. Нужно было сформировать подход, как дизайнер должен заказывать грамотные A11Y на этапе проектирования дизайна.\r\n5. **Централизация знаний**\r\nМногие знания о тех или иных дизайн-решениях нигде не фиксировались. Единственным источником знания были участвующие в работе на фичей члены команды.\r\n6. **UI Kit**\r\nЧасть пользователей жаловалась на отсутствие UI кита. Плюс, у конкурентов он уже давно был.\r\n\r\n# Переработка компонентов в Figma с нуля\r\n\r\nДизайн существующих компонентов полностью повторяет функционал кодовой реализации. Учтены все редкие сценарии и пограничные состояния компонентов. Перед отрисовкой изучается API компонента и все сценарии его использования.\r\n\r\n## Пример реализации компонента Grid\r\n\r\nКомпонент Grid является одним из больших и одним из самых популярным компонентов в линейке Blazor. Grid представляет собой компонент для отображения данных в табличном формате, который включает в себя множество функций для управления данными, их представления и настройки, таких как фильтрация, группировка, пагинация, сортировка и многое другое.\r\n\r\nОсновную сложность представляет его размер:\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/blazor-3.png\" srcset=\"/images/blog/1x/blazor-3.png 1x, /images/blog/2x/blazor-3@2x.png 2x\" class=\"img-fluid\">\r\n\r\nТак как разные пользователи использую грид по-разному, то компонент получается достаточно гибким по функционалу и возможностям. Всё это отражено в дизайне.\r\n\r\nДля того, чтобы отрисовать такой в Figma пришлось сначала изучить и собрать файл со скриншотами всех состояний компонента. Для этого были изучены демо стенды компоненты, описывающие его стили и API.\r\n\r\nВ итоге, реализованный макет компонента помогает быстрее решать новые задачи и прикидывать прототипы с разными сценариями использования. \r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/blazor-4.png\" srcset=\"/images/blog/1x/blazor-4.png 1x, /images/blog/2x/blazor-4@2x.png 2x\" class=\"img-fluid\">\r\n\r\n# Разработка новых компонентов\r\n\r\nРазработка дизайна новых компонентов включает в себя исследование решений на рынке, лучшие практики, клавиатурную навигацию, идея для демо стендов, и обсуждение требований с ПМом. В зависимости от задачи, количество пунктов может быть больше или меньше.\r\n\r\n## Пример реализации компонента TreeList\r\n\r\nКомпонент TreeList предназначен для отображения иерархическими данными в виде расширенного списка, который сочетает в себе функциональные возможности древовидной структуры (TreeView) и таблицы (Grid). Это позволяет пользователям легко просматривать, сортировать, фильтровать и редактировать иерархические данные с возможностью разворачивания и сворачивания уровней вложенности данных для удобства восприятия.\r\n\r\nКомпонент TreeList часто используется в приложениях для управления содержимым, файловыми системами, а также в любых приложениях, где требуется эффективная работа с иерархическими данными.\r\n\r\nПеред началом отрисовки компонента был произведен ресёрч реализации решений у других вендоров. Собран список идей и примерные способы реализации. В конце каждого этапа происходили синхрозиционны встречи с ПМом, разработчиками и другими заинтересованными лицами.\r\n\r\n# Токенизация\r\n\r\nКаждый компонент представлен в разных темах. Руками отрисовать каждый компонент в каждой теме очень дорого и ресурсозатратно. Плюс, цена ошибки в таком случае очень высока.\r\n\r\nБыло принято решение использовать дизайн-токены:\r\n- Чтобы быстро обновлять стили компонента под любую тему.\r\n- Гарантировать консистентность решений.\r\n- Использовать как мостик между дизайном и разработкой.\r\n\r\nБыла проведена большая работа над созданием архитектуры и структуры дизайн-токенов:\r\n\r\nК сожалению, для создания грамотной архитектуры, в данном случае, встроенные Figma Variables не подошли. Для работы с токсинами использует Tokens Studio.\r\n\r\nКаждый компонент имеет полное покрытие токенами. Это касается как цветов, так других стилей: бордер, авто-лейаут, тени. \r\n\r\nВ итоге, любой компонент в Fimga легко протестировать с другими стилистическими настройками. А разработчики могут использовать токены для использованиях их значений в файлах стилей.\r\n\r\n# Документирование\r\n\r\nДокументирование покрывается несколькими факторами:\r\n- Сама реализации компонентов в Figma\r\n- Дизайн-токены\r\n- Внутренняя документация\r\n\r\nВнутренняя документация представляет собой правил и рекомендаций: \r\n- правила оформления\r\n- правила работы с дизайн-токенами\r\n- требования по иконкам\r\n- работа с цветовой палитрой\r\n\r\nТут же собраны результаты ресёрчей по тем или иным задач. А также, приятные решения по ним. Это помогает всем членам команды понимать, куда нужно обращаться в первую очередь чтобы найти такую информацию.\r\n\r\n# UI Kit\r\n\r\nРезультатом работы над дизайн-системой послужил выпуск UI кита в Figma. Комьюнити положительно оценило выпуск кита, особенно те пользователи которые просили об этом раньше.  \r\n\r\n# Результаты \r\n\r\nКак результат, получилось собрать крепкий каркас дизайн-системы, которая помогает дизайнерам намного быстрее решать задачи и дальше развивать UX/UI компонентов, а разработчикам использовать дизайн систему как единый источник знаний.', `Summary`='', `FormatterID`='neasden', `OriginalAlias`='blazor', `Uploads`='a:5:{i:0;s:33:\"/images/1x/maxim-petrov-photo.png\";i:1;s:28:\"/images/blog/1x/blazor-2.png\";i:2;s:28:\"/images/blog/1x/blazor-1.png\";i:3;s:15:\"empty-image.jpg\";i:4;s:28:\"/images/blog/1x/blazor-3.png\";}', `IsPublished`='1', `IsCommentable`='0', `IsVisible`='1', `IsFavourite`='1', `Stamp`='1711384202', `LastModified`='1711793422', `Offset`='14400', `IsDST`='0', `IsIndexed`='1', `IsExternal`='0', `ReadCount`='2', `SourceID`='0', `SourceNoteID`='0', `SourceNoteURL`='', `SourceNoteJSONURL`='', `SourceNoteData`='' WHERE `SubsetID`=1 AND (`ID`=5);

UPDATE `e2BlogNotes` SET `SubsetID`='1', `Title`='Дизайн-система Blazor', `Text`='DevExpress Blazor — это набор компонентов пользовательского интерфейса. Продукт активно используется в приложениях на платформе Blazor и предлагают мощный набор компонентов: таблицы данных, календари и планировщики, выпадающие списки, диалоговые окна и многие другие. \r\n\r\nЗадача — переосмыслить и создать дизайн-систему в Figma на основе существующих артефактов и наработок.\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/blazor-1.png\" srcset=\"/images/blog/1x/blazor-1.png 1x, /images/blog/2x/blazor-1@2x.png 2x\" class=\"img-fluid\">\r\n\r\n# Вводные\r\n\r\nПо мере развития продукта, стало увеличиваться количество выпускаемых компонентов и их сложность. Предыдущий подход, когда дизайнер рисовал отдельный макет под каждую задачу стал приносить заметные неудобства для команды. Разработка начала сильно обгонять дизайн и многие решения по краевым сценариям стали принимать сами разработчки. Дизайнеру тратил много времени на поиск визуальных и UX багов на поздних этапах разработки компонента или фичи.\r\n\r\nОтдельной проблемой была сложность каждого компонента:\r\n- **Разные темы**. В разных темах компонент не только меняет цвет, но и начинает обладать другими визуальными свойствами.\r\n- **Несколько размеров**. Каждый компонент линейки представлен в трёх размерах. \r\n- **Дополнительные стили**. Большой набор стилистических вариантов для компонентов-атомов.\r\n\r\nНапример, одна только кнопка состоит из 150 вариантов компонента:\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/blazor-2.png\" srcset=\"/images/blog/1x/blazor-2.png 1x, /images/blog/2x/blazor-2@2x.png 2x\" class=\"img-fluid\">\r\n\r\nБыло принято решение менять подход — разработать стандарты, правила постановки задач и проектирования.\r\n\r\n# Цели\r\n\r\nКоманда выделила ресурсы на внедрение полноценной дизайн-системы и поставил перед ней решение следующих проблем:\r\n1. **Оптимизировать работу команды на этапах дизайна и разработки.**\r\nРаньше, эти процессы были довольно хаотичны. Дизайнер брал в задачу в работу и изображал примерную реализацию компонента. Многие краевые сценарии не учитывались. Какие-то решения в процессе разработки менялись на ходу. В итоге, разработка затягивалась, фичи резались и итоговый результат сильно отличался от исходной картинки.\r\n2. **Автоматизация и консистентность**.\r\nБольшой размер и сложность компонентов сильно усложняли внесение любых изменений в дизайн. Даже небольшие стилистические изменения в базовом компоненте типа кнопки приводили к огромному количеству работы со стороны дизайнера. Так нужно было учесть разные темы, размеры и стили.\r\n3. **Консистентность цвета**.\r\nОтдельно стоит отметить проблему с цветом. Многие цвета компонентов в коде рассчитывались с помощью миксинов. Это приводило ко многим проблемам, в том числе, проблемам с контрастностью.\r\n4. **Доступность**\r\nПользователи продукта стали всё чаще интересоваться, насколько компоненты доступны для разных категорий пользователей. Нужно было сформировать подход, как дизайнер должен заказывать грамотные A11Y на этапе проектирования дизайна.\r\n5. **Централизация знаний**\r\nМногие знания о тех или иных дизайн-решениях нигде не фиксировались. Единственным источником знания были участвующие в работе на фичей члены команды.\r\n6. **UI Kit**\r\nЧасть пользователей жаловалась на отсутствие UI кита. Плюс, у конкурентов он уже давно был.\r\n\r\n# Переработка компонентов в Figma с нуля\r\n\r\nДизайн существующих компонентов полностью повторяет функционал кодовой реализации. Учтены все редкие сценарии и пограничные состояния компонентов. Перед отрисовкой изучается API компонента и все сценарии его использования.\r\n\r\n## Пример реализации компонента Grid\r\n\r\nКомпонент Grid является одним из больших и одним из самых популярным компонентов в линейке Blazor. Grid представляет собой компонент для отображения данных в табличном формате, который включает в себя множество функций для управления данными, их представления и настройки, таких как фильтрация, группировка, пагинация, сортировка и многое другое.\r\n\r\nОсновную сложность представляет его размер:\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/blazor-3.png\" srcset=\"/images/blog/1x/blazor-3.png 1x, /images/blog/2x/blazor-3@2x.png 2x\" class=\"img-fluid\">\r\n\r\nТак как разные пользователи использую грид по-разному, то компонент получается достаточно гибким по функционалу и возможностям. Всё это отражено в дизайне.\r\n\r\nДля того, чтобы отрисовать такой в Figma пришлось сначала изучить и собрать файл со скриншотами всех состояний компонента. Для этого были изучены демо стенды компоненты, описывающие его стили и API.\r\n\r\nВ итоге, реализованный макет компонента помогает быстрее решать новые задачи и прикидывать прототипы с разными сценариями использования. \r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/blazor-4.png\" srcset=\"/images/blog/1x/blazor-4.png 1x, /images/blog/2x/blazor-4@2x.png 2x\" class=\"img-fluid\">\r\n\r\n# Разработка новых компонентов\r\n\r\nРазработка дизайна новых компонентов включает в себя исследование решений на рынке, лучшие практики, клавиатурную навигацию, идея для демо стендов, и обсуждение требований с ПМом. В зависимости от задачи, количество пунктов может быть больше или меньше.\r\n\r\n## Пример реализации компонента TreeList\r\n\r\nКомпонент TreeList предназначен для отображения иерархическими данными в виде расширенного списка, который сочетает в себе функциональные возможности древовидной структуры (TreeView) и таблицы (Grid). Это позволяет пользователям легко просматривать, сортировать, фильтровать и редактировать иерархические данные с возможностью разворачивания и сворачивания уровней вложенности данных для удобства восприятия.\r\n\r\nКомпонент TreeList часто используется в приложениях для управления содержимым, файловыми системами, а также в любых приложениях, где требуется эффективная работа с иерархическими данными.\r\n\r\nПеред началом отрисовки компонента был произведен ресёрч реализации решений у других вендоров. Собран список идей и примерные способы реализации. В конце каждого этапа происходили синхрозиционны встречи с ПМом, разработчиками и другими заинтересованными лицами.\r\n\r\n# Токенизация\r\n\r\nКаждый компонент представлен в разных темах. Руками отрисовать каждый компонент в каждой теме очень дорого и ресурсозатратно. Плюс, цена ошибки в таком случае очень высока.\r\n\r\nБыло принято решение использовать дизайн-токены:\r\n- Чтобы быстро обновлять стили компонента под любую тему.\r\n- Гарантировать консистентность решений.\r\n- Использовать как мостик между дизайном и разработкой.\r\n\r\nБыла проведена большая работа над созданием архитектуры и структуры дизайн-токенов:\r\n\r\nК сожалению, для создания грамотной архитектуры, в данном случае, встроенные Figma Variables не подошли. Для работы с токсинами использует Tokens Studio.\r\n\r\nКаждый компонент имеет полное покрытие токенами. Это касается как цветов, так других стилей: бордер, авто-лейаут, тени. \r\n\r\nВ итоге, любой компонент в Fimga легко протестировать с другими стилистическими настройками. А разработчики могут использовать токены для использованиях их значений в файлах стилей.\r\n\r\n# Документирование\r\n\r\nДокументирование покрывается несколькими факторами:\r\n- Сама реализации компонентов в Figma\r\n- Дизайн-токены\r\n- Внутренняя документация\r\n\r\nВнутренняя документация представляет собой правил и рекомендаций: \r\n- правила оформления\r\n- правила работы с дизайн-токенами\r\n- требования по иконкам\r\n- работа с цветовой палитрой\r\n\r\nТут же собраны результаты ресёрчей по тем или иным задач. А также, приятные решения по ним. Это помогает всем членам команды понимать, куда нужно обращаться в первую очередь чтобы найти такую информацию.\r\n\r\n# UI Kit\r\n\r\nРезультатом работы над дизайн-системой послужил выпуск UI кита в Figma. Комьюнити положительно оценило выпуск кита, особенно те пользователи которые просили об этом раньше.  \r\n\r\n# Результаты \r\n\r\nКак результат, получилось собрать крепкий каркас дизайн-системы, которая помогает дизайнерам намного быстрее решать задачи и дальше развивать UX/UI компонентов, а разработчикам использовать дизайн систему как единый источник знаний.', `Summary`='', `FormatterID`='neasden', `OriginalAlias`='blazor', `Uploads`='a:6:{i:0;s:33:\"/images/1x/maxim-petrov-photo.png\";i:1;s:28:\"/images/blog/1x/blazor-2.png\";i:2;s:28:\"/images/blog/1x/blazor-1.png\";i:3;s:15:\"empty-image.jpg\";i:4;s:28:\"/images/blog/1x/blazor-3.png\";i:8;s:28:\"/images/blog/1x/blazor-4.png\";}', `IsPublished`='1', `IsCommentable`='0', `IsVisible`='1', `IsFavourite`='1', `Stamp`='1711384202', `LastModified`='1711793422', `Offset`='14400', `IsDST`='0', `IsIndexed`='1', `IsExternal`='0', `ReadCount`='2', `SourceID`='0', `SourceNoteID`='0', `SourceNoteURL`='', `SourceNoteJSONURL`='', `SourceNoteData`='' WHERE `SubsetID`=1 AND (`ID`=5);

UPDATE `e2BlogAliases` SET `EntityType`='n', `EntityID`='5', `Alias`='blazor', `Stamp`='1711801331' WHERE `SubsetID`=1 AND (`ID`=6);

UPDATE `e2BlogNotes` SET `SubsetID`='1', `Title`='Дизайн-система Blazor', `Text`='DevExpress Blazor — это набор компонентов пользовательского интерфейса. Продукт активно используется в приложениях на платформе Blazor и предлагают мощный набор компонентов: таблицы данных, календари и планировщики, выпадающие списки, диалоговые окна и многие другие. \r\n\r\nЗадача — переосмыслить и создать дизайн-систему в Figma на основе существующих артефактов и наработок.\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/blazor-1.png\" srcset=\"/images/blog/1x/blazor-1.png 1x, /images/blog/2x/blazor-1@2x.png 2x\" class=\"img-fluid\">\r\n\r\n# Вводные\r\n\r\nПо мере развития продукта, стало увеличиваться количество выпускаемых компонентов и их сложность. Предыдущий подход, когда дизайнер рисовал отдельный макет под каждую задачу стал приносить заметные неудобства для команды. Разработка начала сильно обгонять дизайн и многие решения по краевым сценариям стали принимать сами разработчки. Дизайнеру тратил много времени на поиск визуальных и UX багов на поздних этапах разработки компонента или фичи.\r\n\r\nОтдельной проблемой была сложность каждого компонента:\r\n- **Разные темы**. В разных темах компонент не только меняет цвет, но и начинает обладать другими визуальными свойствами.\r\n- **Несколько размеров**. Каждый компонент линейки представлен в трёх размерах. \r\n- **Дополнительные стили**. Большой набор стилистических вариантов для компонентов-атомов.\r\n\r\nНапример, одна только кнопка состоит из 150 вариантов компонента:\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/blazor-2.png\" srcset=\"/images/blog/1x/blazor-2.png 1x, /images/blog/2x/blazor-2@2x.png 2x\" class=\"img-fluid\">\r\n\r\nБыло принято решение менять подход — разработать стандарты, правила постановки задач и проектирования.\r\n\r\n# Цели\r\n\r\nКоманда выделила ресурсы на внедрение полноценной дизайн-системы и поставил перед ней решение следующих проблем:\r\n1. **Оптимизировать работу команды на этапах дизайна и разработки.**\r\nРаньше, эти процессы были довольно хаотичны. Дизайнер брал в задачу в работу и изображал примерную реализацию компонента. Многие краевые сценарии не учитывались. Какие-то решения в процессе разработки менялись на ходу. В итоге, разработка затягивалась, фичи резались и итоговый результат сильно отличался от исходной картинки.\r\n2. **Автоматизация и консистентность**.\r\nБольшой размер и сложность компонентов сильно усложняли внесение любых изменений в дизайн. Даже небольшие стилистические изменения в базовом компоненте типа кнопки приводили к огромному количеству работы со стороны дизайнера. Так нужно было учесть разные темы, размеры и стили.\r\n3. **Консистентность цвета**.\r\nОтдельно стоит отметить проблему с цветом. Многие цвета компонентов в коде рассчитывались с помощью миксинов. Это приводило ко многим проблемам, в том числе, проблемам с контрастностью.\r\n4. **Доступность**\r\nПользователи продукта стали всё чаще интересоваться, насколько компоненты доступны для разных категорий пользователей. Нужно было сформировать подход, как дизайнер должен заказывать грамотные A11Y на этапе проектирования дизайна.\r\n5. **Централизация знаний**\r\nМногие знания о тех или иных дизайн-решениях нигде не фиксировались. Единственным источником знания были участвующие в работе на фичей члены команды.\r\n6. **UI Kit**\r\nЧасть пользователей жаловалась на отсутствие UI кита. Плюс, у конкурентов он уже давно был.\r\n\r\n# Переработка компонентов в Figma с нуля\r\n\r\nДизайн существующих компонентов полностью повторяет функционал кодовой реализации. Учтены все редкие сценарии и пограничные состояния компонентов. Перед отрисовкой изучается API компонента и все сценарии его использования.\r\n\r\n## Пример реализации компонента Grid\r\n\r\nКомпонент Grid является одним из больших и одним из самых популярным компонентов в линейке Blazor. Grid представляет собой компонент для отображения данных в табличном формате, который включает в себя множество функций для управления данными, их представления и настройки, таких как фильтрация, группировка, пагинация, сортировка и многое другое.\r\n\r\nОсновную сложность представляет его размер:\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/blazor-3.png\" srcset=\"/images/blog/1x/blazor-3.png 1x, /images/blog/2x/blazor-3@2x.png 2x\" class=\"img-fluid\">\r\n\r\nТак как разные пользователи использую грид по-разному, то компонент получается достаточно гибким по функционалу и возможностям. Всё это отражено в дизайне.\r\n\r\nДля того, чтобы отрисовать такой в Figma пришлось сначала изучить и собрать файл со скриншотами всех состояний компонента. Для этого были изучены демо стенды компоненты, описывающие его стили и API.\r\n\r\nВ итоге, реализованный макет компонента помогает быстрее решать новые задачи и прикидывать прототипы с разными сценариями использования. \r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/blazor-4.png\" srcset=\"/images/blog/1x/blazor-4.png 1x, /images/blog/2x/blazor-4@2x.png 2x\" class=\"img-fluid\">\r\n\r\n# Разработка новых компонентов\r\n\r\nРазработка дизайна новых компонентов включает в себя исследование решений на рынке, лучшие практики, клавиатурную навигацию, идея для демо стендов, и обсуждение требований с ПМом. В зависимости от задачи, количество пунктов может быть больше или меньше.\r\n\r\n## Пример реализации компонента TreeList\r\n\r\nКомпонент TreeList предназначен для отображения иерархическими данными в виде расширенного списка, который сочетает в себе функциональные возможности древовидной структуры (TreeView) и таблицы (Grid). Это позволяет пользователям легко просматривать, сортировать, фильтровать и редактировать иерархические данные с возможностью разворачивания и сворачивания уровней вложенности данных для удобства восприятия.\r\n\r\nКомпонент TreeList часто используется в приложениях для управления содержимым, файловыми системами, а также в любых приложениях, где требуется эффективная работа с иерархическими данными.\r\n\r\nПеред началом отрисовки компонента был произведен ресёрч реализации решений у других вендоров. Собран список идей и примерные способы реализации. \r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/blazor-5.png\" srcset=\"/images/blog/1x/blazor-5.png 1x, /images/blog/2x/blazor-5@2x.png 2x\" class=\"img-fluid\">\r\n\r\n\r\nВ конце каждого этапа происходили синхрозиционны встречи с ПМом, разработчиками и другими заинтересованными лицами.\r\n\r\n# Токенизация\r\n\r\nКаждый компонент представлен в разных темах. Руками отрисовать каждый компонент в каждой теме очень дорого и ресурсозатратно. Плюс, цена ошибки в таком случае очень высока.\r\n\r\nБыло принято решение использовать дизайн-токены:\r\n- Чтобы быстро обновлять стили компонента под любую тему.\r\n- Гарантировать консистентность решений.\r\n- Использовать как мостик между дизайном и разработкой.\r\n\r\nБыла проведена большая работа над созданием архитектуры и структуры дизайн-токенов:\r\n\r\nК сожалению, для создания грамотной архитектуры, в данном случае, встроенные Figma Variables не подошли. Для работы с токсинами использует Tokens Studio.\r\n\r\nКаждый компонент имеет полное покрытие токенами. Это касается как цветов, так других стилей: бордер, авто-лейаут, тени. \r\n\r\nВ итоге, любой компонент в Fimga легко протестировать с другими стилистическими настройками. А разработчики могут использовать токены для использованиях их значений в файлах стилей.\r\n\r\n# Документирование\r\n\r\nДокументирование покрывается несколькими факторами:\r\n- Сама реализации компонентов в Figma\r\n- Дизайн-токены\r\n- Внутренняя документация\r\n\r\nВнутренняя документация представляет собой правил и рекомендаций: \r\n- правила оформления\r\n- правила работы с дизайн-токенами\r\n- требования по иконкам\r\n- работа с цветовой палитрой\r\n\r\nТут же собраны результаты ресёрчей по тем или иным задач. А также, приятные решения по ним. Это помогает всем членам команды понимать, куда нужно обращаться в первую очередь чтобы найти такую информацию.\r\n\r\n# UI Kit\r\n\r\nРезультатом работы над дизайн-системой послужил выпуск UI кита в Figma. Комьюнити положительно оценило выпуск кита, особенно те пользователи которые просили об этом раньше.  \r\n\r\n# Результаты \r\n\r\nКак результат, получилось собрать крепкий каркас дизайн-системы, которая помогает дизайнерам намного быстрее решать задачи и дальше развивать UX/UI компонентов, а разработчикам использовать дизайн систему как единый источник знаний.', `Summary`='', `FormatterID`='neasden', `OriginalAlias`='blazor', `Uploads`='a:6:{i:0;s:33:\"/images/1x/maxim-petrov-photo.png\";i:1;s:28:\"/images/blog/1x/blazor-2.png\";i:2;s:28:\"/images/blog/1x/blazor-1.png\";i:3;s:15:\"empty-image.jpg\";i:4;s:28:\"/images/blog/1x/blazor-3.png\";i:8;s:28:\"/images/blog/1x/blazor-4.png\";}', `IsPublished`='1', `IsCommentable`='0', `IsVisible`='1', `IsFavourite`='1', `Stamp`='1711384202', `LastModified`='1711801331', `Offset`='14400', `IsDST`='0', `IsIndexed`='0', `IsExternal`='0', `ReadCount`='2', `SourceID`='0', `SourceNoteID`='0', `SourceNoteURL`='', `SourceNoteJSONURL`='', `SourceNoteData`='' WHERE `SubsetID`=1 AND (`ID`=5);

UPDATE `e2BlogNotes` SET `Uploads`='a:7:{i:0;s:33:"/images/1x/maxim-petrov-photo.png";i:1;s:28:"/images/blog/1x/blazor-2.png";i:2;s:28:"/images/blog/1x/blazor-1.png";i:3;s:15:"empty-image.jpg";i:4;s:28:"/images/blog/1x/blazor-3.png";i:5;s:28:"/images/blog/1x/blazor-4.png";i:6;s:28:"/images/blog/1x/blazor-5.png";}' WHERE `SubsetID`=1 AND `ID`=5;

UPDATE `e2BlogNotes` SET `SubsetID`='1', `Title`='Дизайн-система Blazor', `Text`='DevExpress Blazor — это набор компонентов пользовательского интерфейса. Продукт активно используется в приложениях на платформе Blazor и предлагают мощный набор компонентов: таблицы данных, календари и планировщики, выпадающие списки, диалоговые окна и многие другие. \r\n\r\nЗадача — переосмыслить и создать дизайн-систему в Figma на основе существующих артефактов и наработок.\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/blazor-1.png\" srcset=\"/images/blog/1x/blazor-1.png 1x, /images/blog/2x/blazor-1@2x.png 2x\" class=\"img-fluid\">\r\n\r\n# Вводные\r\n\r\nПо мере развития продукта, стало увеличиваться количество выпускаемых компонентов и их сложность. Предыдущий подход, когда дизайнер рисовал отдельный макет под каждую задачу стал приносить заметные неудобства для команды. Разработка начала сильно обгонять дизайн и многие решения по краевым сценариям стали принимать сами разработчки. Дизайнеру тратил много времени на поиск визуальных и UX багов на поздних этапах разработки компонента или фичи.\r\n\r\nОтдельной проблемой была сложность каждого компонента:\r\n- **Разные темы**. В разных темах компонент не только меняет цвет, но и начинает обладать другими визуальными свойствами.\r\n- **Несколько размеров**. Каждый компонент линейки представлен в трёх размерах. \r\n- **Дополнительные стили**. Большой набор стилистических вариантов для компонентов-атомов.\r\n\r\nНапример, одна только кнопка состоит из 150 вариантов компонента:\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/blazor-2.png\" srcset=\"/images/blog/1x/blazor-2.png 1x, /images/blog/2x/blazor-2@2x.png 2x\" class=\"img-fluid\">\r\n\r\nБыло принято решение менять подход — разработать стандарты, правила постановки задач и проектирования.\r\n\r\n# Цели\r\n\r\nКоманда выделила ресурсы на внедрение полноценной дизайн-системы и поставил перед ней решение следующих проблем:\r\n1. **Оптимизировать работу команды на этапах дизайна и разработки.**\r\nРаньше, эти процессы были довольно хаотичны. Дизайнер брал в задачу в работу и изображал примерную реализацию компонента. Многие краевые сценарии не учитывались. Какие-то решения в процессе разработки менялись на ходу. В итоге, разработка затягивалась, фичи резались и итоговый результат сильно отличался от исходной картинки.\r\n2. **Автоматизация и консистентность**.\r\nБольшой размер и сложность компонентов сильно усложняли внесение любых изменений в дизайн. Даже небольшие стилистические изменения в базовом компоненте типа кнопки приводили к огромному количеству работы со стороны дизайнера. Так нужно было учесть разные темы, размеры и стили.\r\n3. **Консистентность цвета**.\r\nОтдельно стоит отметить проблему с цветом. Многие цвета компонентов в коде рассчитывались с помощью миксинов. Это приводило ко многим проблемам, в том числе, проблемам с контрастностью.\r\n4. **Доступность**\r\nПользователи продукта стали всё чаще интересоваться, насколько компоненты доступны для разных категорий пользователей. Нужно было сформировать подход, как дизайнер должен заказывать грамотные A11Y на этапе проектирования дизайна.\r\n5. **Централизация знаний**\r\nМногие знания о тех или иных дизайн-решениях нигде не фиксировались. Единственным источником знания были участвующие в работе на фичей члены команды.\r\n6. **UI Kit**\r\nЧасть пользователей жаловалась на отсутствие UI кита. Плюс, у конкурентов он уже давно был.\r\n\r\n# Переработка компонентов в Figma с нуля\r\n\r\nДизайн существующих компонентов полностью повторяет функционал кодовой реализации. Учтены все редкие сценарии и пограничные состояния компонентов. Перед отрисовкой изучается API компонента и все сценарии его использования.\r\n\r\n## Пример реализации компонента Grid\r\n\r\nКомпонент Grid является одним из больших и одним из самых популярным компонентов в линейке Blazor. Grid представляет собой компонент для отображения данных в табличном формате, который включает в себя множество функций для управления данными, их представления и настройки, таких как фильтрация, группировка, пагинация, сортировка и многое другое.\r\n\r\nОсновную сложность представляет его размер:\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/blazor-3.png\" srcset=\"/images/blog/1x/blazor-3.png 1x, /images/blog/2x/blazor-3@2x.png 2x\" class=\"img-fluid\">\r\n\r\nТак как разные пользователи использую грид по-разному, то компонент получается достаточно гибким по функционалу и возможностям. Всё это отражено в дизайне.\r\n\r\nДля того, чтобы отрисовать такой в Figma пришлось сначала изучить и собрать файл со скриншотами всех состояний компонента. Для этого были изучены демо стенды компоненты, описывающие его стили и API.\r\n\r\nВ итоге, реализованный макет компонента помогает быстрее решать новые задачи и прикидывать прототипы с разными сценариями использования. \r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/blazor-4.png\" srcset=\"/images/blog/1x/blazor-4.png 1x, /images/blog/2x/blazor-4@2x.png 2x\" class=\"img-fluid\">\r\n\r\n# Разработка новых компонентов\r\n\r\nРазработка дизайна новых компонентов включает в себя исследование решений на рынке, лучшие практики, клавиатурную навигацию, идея для демо стендов, и обсуждение требований с ПМом. В зависимости от задачи, количество пунктов может быть больше или меньше.\r\n\r\n## Пример реализации компонента TreeList\r\n\r\nКомпонент TreeList предназначен для отображения иерархическими данными в виде расширенного списка, который сочетает в себе функциональные возможности древовидной структуры (TreeView) и таблицы (Grid). Это позволяет пользователям легко просматривать, сортировать, фильтровать и редактировать иерархические данные с возможностью разворачивания и сворачивания уровней вложенности данных для удобства восприятия.\r\n\r\nКомпонент TreeList часто используется в приложениях для управления содержимым, файловыми системами, а также в любых приложениях, где требуется эффективная работа с иерархическими данными.\r\n\r\nПеред началом отрисовки компонента был произведен ресёрч реализации решений у других вендоров. Собран список идей и примерные способы реализации. \r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/blazor-5.png\" srcset=\"/images/blog/1x/blazor-5.png 1x, /images/blog/2x/blazor-5@2x.png 2x\" class=\"img-fluid\">\r\n\r\n\r\nВ конце каждого этапа происходили синхрозиционны встречи с ПМом, разработчиками и другими заинтересованными лицами.\r\n\r\n# Токенизация\r\n\r\nКаждый компонент представлен в разных темах. Руками отрисовать каждый компонент в каждой теме очень дорого и ресурсозатратно. Плюс, цена ошибки в таком случае очень высока.\r\n\r\nБыло принято решение использовать дизайн-токены:\r\n- Чтобы быстро обновлять стили компонента под любую тему.\r\n- Гарантировать консистентность решений.\r\n- Использовать как мостик между дизайном и разработкой.\r\n\r\nБыла проведена большая работа над созданием архитектуры и структуры дизайн-токенов:\r\n\r\nК сожалению, для создания грамотной архитектуры, в данном случае, встроенные Figma Variables не подошли. Для работы с токсинами использует Tokens Studio.\r\n\r\nКаждый компонент имеет полное покрытие токенами. Это касается как цветов, так других стилей: бордер, авто-лейаут, тени. \r\n\r\nВ итоге, любой компонент в Fimga легко протестировать с другими стилистическими настройками. А разработчики могут использовать токены для использованиях их значений в файлах стилей.\r\n\r\n# Документирование\r\n\r\nДокументирование покрывается несколькими факторами:\r\n- Сама реализации компонентов в Figma\r\n- Дизайн-токены\r\n- Внутренняя документация\r\n\r\nВнутренняя документация представляет собой правил и рекомендаций: \r\n- правила оформления\r\n- правила работы с дизайн-токенами\r\n- требования по иконкам\r\n- работа с цветовой палитрой\r\n\r\nТут же собраны результаты ресёрчей по тем или иным задач. А также, приятные решения по ним. Это помогает всем членам команды понимать, куда нужно обращаться в первую очередь чтобы найти такую информацию.\r\n\r\n# UI Kit\r\n\r\nРезультатом работы над дизайн-системой послужил выпуск UI кита в Figma. Комьюнити положительно оценило выпуск кита, особенно те пользователи которые просили об этом раньше.  \r\n\r\n# Результаты \r\n\r\nКак результат, получилось собрать крепкий каркас дизайн-системы, которая помогает дизайнерам намного быстрее решать задачи и дальше развивать UX/UI компонентов, а разработчикам использовать дизайн систему как единый источник знаний.', `Summary`='', `FormatterID`='neasden', `OriginalAlias`='blazor', `Uploads`='a:6:{i:0;s:33:\"/images/1x/maxim-petrov-photo.png\";i:1;s:28:\"/images/blog/1x/blazor-2.png\";i:2;s:28:\"/images/blog/1x/blazor-1.png\";i:3;s:15:\"empty-image.jpg\";i:4;s:28:\"/images/blog/1x/blazor-3.png\";i:8;s:28:\"/images/blog/1x/blazor-4.png\";}', `IsPublished`='1', `IsCommentable`='0', `IsVisible`='1', `IsFavourite`='1', `Stamp`='1711384202', `LastModified`='1711801331', `Offset`='14400', `IsDST`='0', `IsIndexed`='1', `IsExternal`='0', `ReadCount`='2', `SourceID`='0', `SourceNoteID`='0', `SourceNoteURL`='', `SourceNoteJSONURL`='', `SourceNoteData`='' WHERE `SubsetID`=1 AND (`ID`=5);

UPDATE `e2BlogNotes` SET `SubsetID`='1', `Title`='Дизайн-система Blazor', `Text`='DevExpress Blazor — это набор компонентов пользовательского интерфейса. Продукт активно используется в приложениях на платформе Blazor и предлагают мощный набор компонентов: таблицы данных, календари и планировщики, выпадающие списки, диалоговые окна и многие другие. \r\n\r\nЗадача — переосмыслить и создать дизайн-систему в Figma на основе существующих артефактов и наработок.\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/blazor-1.png\" srcset=\"/images/blog/1x/blazor-1.png 1x, /images/blog/2x/blazor-1@2x.png 2x\" class=\"img-fluid\">\r\n\r\n# Вводные\r\n\r\nПо мере развития продукта, стало увеличиваться количество выпускаемых компонентов и их сложность. Предыдущий подход, когда дизайнер рисовал отдельный макет под каждую задачу стал приносить заметные неудобства для команды. Разработка начала сильно обгонять дизайн и многие решения по краевым сценариям стали принимать сами разработчки. Дизайнеру тратил много времени на поиск визуальных и UX багов на поздних этапах разработки компонента или фичи.\r\n\r\nОтдельной проблемой была сложность каждого компонента:\r\n- **Разные темы**. В разных темах компонент не только меняет цвет, но и начинает обладать другими визуальными свойствами.\r\n- **Несколько размеров**. Каждый компонент линейки представлен в трёх размерах. \r\n- **Дополнительные стили**. Большой набор стилистических вариантов для компонентов-атомов.\r\n\r\nНапример, одна только кнопка состоит из 150 вариантов компонента:\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/blazor-2.png\" srcset=\"/images/blog/1x/blazor-2.png 1x, /images/blog/2x/blazor-2@2x.png 2x\" class=\"img-fluid\">\r\n\r\nБыло принято решение менять подход — разработать стандарты, правила постановки задач и проектирования.\r\n\r\n# Цели\r\n\r\nКоманда выделила ресурсы на внедрение полноценной дизайн-системы и поставил перед ней решение следующих проблем:\r\n1. **Оптимизировать работу команды на этапах дизайна и разработки.**\r\nРаньше, эти процессы были довольно хаотичны. Дизайнер брал в задачу в работу и изображал примерную реализацию компонента. Многие краевые сценарии не учитывались. Какие-то решения в процессе разработки менялись на ходу. В итоге, разработка затягивалась, фичи резались и итоговый результат сильно отличался от исходной картинки.\r\n2. **Автоматизация и консистентность**.\r\nБольшой размер и сложность компонентов сильно усложняли внесение любых изменений в дизайн. Даже небольшие стилистические изменения в базовом компоненте типа кнопки приводили к огромному количеству работы со стороны дизайнера. Так нужно было учесть разные темы, размеры и стили.\r\n3. **Консистентность цвета**.\r\nОтдельно стоит отметить проблему с цветом. Многие цвета компонентов в коде рассчитывались с помощью миксинов. Это приводило ко многим проблемам, в том числе, проблемам с контрастностью.\r\n4. **Доступность**\r\nПользователи продукта стали всё чаще интересоваться, насколько компоненты доступны для разных категорий пользователей. Нужно было сформировать подход, как дизайнер должен заказывать грамотные A11Y на этапе проектирования дизайна.\r\n5. **Централизация знаний**\r\nМногие знания о тех или иных дизайн-решениях нигде не фиксировались. Единственным источником знания были участвующие в работе на фичей члены команды.\r\n6. **UI Kit**\r\nЧасть пользователей жаловалась на отсутствие UI кита. Плюс, у конкурентов он уже давно был.\r\n\r\n# Переработка компонентов в Figma с нуля\r\n\r\nДизайн существующих компонентов полностью повторяет функционал кодовой реализации. Учтены все редкие сценарии и пограничные состояния компонентов. Перед отрисовкой изучается API компонента и все сценарии его использования.\r\n\r\n## Пример реализации компонента Grid\r\n\r\nКомпонент Grid является одним из больших и одним из самых популярным компонентов в линейке Blazor. Grid представляет собой компонент для отображения данных в табличном формате, который включает в себя множество функций для управления данными, их представления и настройки, таких как фильтрация, группировка, пагинация, сортировка и многое другое.\r\n\r\nОсновную сложность представляет его размер:\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/blazor-3.png\" srcset=\"/images/blog/1x/blazor-3.png 1x, /images/blog/2x/blazor-3@2x.png 2x\" class=\"img-fluid\">\r\n\r\nТак как разные пользователи использую грид по-разному, то компонент получается достаточно гибким по функционалу и возможностям. Всё это отражено в дизайне.\r\n\r\nДля того, чтобы отрисовать такой в Figma пришлось сначала изучить и собрать файл со скриншотами всех состояний компонента. Для этого были изучены демо стенды компоненты, описывающие его стили и API.\r\n\r\nВ итоге, реализованный макет компонента помогает быстрее решать новые задачи и прикидывать прототипы с разными сценариями использования. \r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/blazor-4.png\" srcset=\"/images/blog/1x/blazor-4.png 1x, /images/blog/2x/blazor-4@2x.png 2x\" class=\"img-fluid\">\r\n\r\n# Разработка новых компонентов\r\n\r\nРазработка дизайна новых компонентов включает в себя исследование решений на рынке, лучшие практики, клавиатурную навигацию, идея для демо стендов, и обсуждение требований с ПМом. В зависимости от задачи, количество пунктов может быть больше или меньше.\r\n\r\n## Пример реализации компонента TreeList\r\n\r\nКомпонент TreeList предназначен для отображения иерархическими данными в виде расширенного списка, который сочетает в себе функциональные возможности древовидной структуры (TreeView) и таблицы (Grid). Это позволяет пользователям легко просматривать, сортировать, фильтровать и редактировать иерархические данные с возможностью разворачивания и сворачивания уровней вложенности данных для удобства восприятия.\r\n\r\nКомпонент TreeList часто используется в приложениях для управления содержимым, файловыми системами, а также в любых приложениях, где требуется эффективная работа с иерархическими данными.\r\n\r\nПеред началом отрисовки компонента был произведен ресёрч реализации решений у других вендоров. Собран список идей и примерные способы реализации. \r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/blazor-5.png\" srcset=\"/images/blog/1x/blazor-5.png 1x, /images/blog/2x/blazor-5@2x.png 2x\" class=\"img-fluid\">\r\n\r\n\r\nВ конце каждого этапа происходили синхрозиционны встречи с ПМом, разработчиками и другими заинтересованными лицами.\r\n\r\n# Токенизация\r\n\r\nКаждый компонент представлен в разных темах. Руками отрисовать каждый компонент в каждой теме очень дорого и ресурсозатратно. Плюс, цена ошибки в таком случае очень высока.\r\n\r\nБыло принято решение использовать дизайн-токены:\r\n- Чтобы быстро обновлять стили компонента под любую тему.\r\n- Гарантировать консистентность решений.\r\n- Использовать как мостик между дизайном и разработкой.\r\n\r\nБыла проведена большая работа над созданием архитектуры и структуры дизайн-токенов:\r\n\r\nК сожалению, для создания грамотной архитектуры, в данном случае, встроенные Figma Variables не подошли. Для работы с токсинами использует Tokens Studio.\r\n\r\nКаждый компонент имеет полное покрытие токенами. Это касается как цветов, так других стилей: бордер, авто-лейаут, тени. \r\n\r\nВ итоге, любой компонент в Fimga легко протестировать с другими стилистическими настройками. А разработчики могут использовать токены для использованиях их значений в файлах стилей.\r\n\r\n# Документирование\r\n\r\nДокументирование покрывается несколькими факторами:\r\n- Сама реализации компонентов в Figma\r\n- Дизайн-токены\r\n- Внутренняя документация\r\n\r\nВнутренняя документация представляет собой правил и рекомендаций: \r\n- правила оформления\r\n- правила работы с дизайн-токенами\r\n- требования по иконкам\r\n- работа с цветовой палитрой\r\n\r\nТут же собраны результаты ресёрчей по тем или иным задач. А также, приятные решения по ним. Это помогает всем членам команды понимать, куда нужно обращаться в первую очередь чтобы найти такую информацию.\r\n\r\n# UI Kit\r\n\r\nРезультатом работы над дизайн-системой послужил выпуск UI кита в Figma. Комьюнити положительно оценило выпуск кита, особенно те пользователи которые просили об этом раньше.  \r\n\r\n# Результаты \r\n\r\nКак результат, получилось собрать крепкий каркас дизайн-системы, которая помогает дизайнерам намного быстрее решать задачи и дальше развивать UX/UI компонентов, а разработчикам использовать дизайн систему как единый источник знаний.', `Summary`='', `FormatterID`='neasden', `OriginalAlias`='blazor', `Uploads`='a:7:{i:0;s:33:\"/images/1x/maxim-petrov-photo.png\";i:1;s:28:\"/images/blog/1x/blazor-2.png\";i:2;s:28:\"/images/blog/1x/blazor-1.png\";i:3;s:15:\"empty-image.jpg\";i:4;s:28:\"/images/blog/1x/blazor-3.png\";i:5;s:28:\"/images/blog/1x/blazor-4.png\";i:10;s:28:\"/images/blog/1x/blazor-5.png\";}', `IsPublished`='1', `IsCommentable`='0', `IsVisible`='1', `IsFavourite`='1', `Stamp`='1711384202', `LastModified`='1711801331', `Offset`='14400', `IsDST`='0', `IsIndexed`='1', `IsExternal`='0', `ReadCount`='2', `SourceID`='0', `SourceNoteID`='0', `SourceNoteURL`='', `SourceNoteJSONURL`='', `SourceNoteData`='' WHERE `SubsetID`=1 AND (`ID`=5);

UPDATE `e2BlogAliases` SET `EntityType`='n', `EntityID`='5', `Alias`='blazor', `Stamp`='1711808655' WHERE `SubsetID`=1 AND (`ID`=6);

UPDATE `e2BlogNotes` SET `SubsetID`='1', `Title`='Дизайн-система Blazor', `Text`='DevExpress Blazor — это набор компонентов пользовательского интерфейса. Продукт активно используется в приложениях на платформе Blazor и предлагают мощный набор компонентов: таблицы данных, календари и планировщики, выпадающие списки, диалоговые окна и многие другие. \r\n\r\nЗадача — переосмыслить и создать дизайн-систему в Figma на основе существующих артефактов и наработок.\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/blazor-1.png\" srcset=\"/images/blog/1x/blazor-1.png 1x, /images/blog/2x/blazor-1@2x.png 2x\" class=\"img-fluid\">\r\n\r\n# Вводные\r\n\r\nПо мере развития продукта, стало увеличиваться количество выпускаемых компонентов и их сложность. Предыдущий подход, когда дизайнер рисовал отдельный макет под каждую задачу стал приносить заметные неудобства для команды. Разработка начала сильно обгонять дизайн и многие решения по краевым сценариям стали принимать сами разработчки. Дизайнеру тратил много времени на поиск визуальных и UX багов на поздних этапах разработки компонента или фичи.\r\n\r\nОтдельной проблемой была сложность каждого компонента:\r\n- **Разные темы**. В разных темах компонент не только меняет цвет, но и начинает обладать другими визуальными свойствами.\r\n- **Несколько размеров**. Каждый компонент линейки представлен в трёх размерах. \r\n- **Дополнительные стили**. Большой набор стилистических вариантов для компонентов-атомов.\r\n\r\nНапример, одна только кнопка состоит из 150 вариантов компонента:\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/blazor-2.png\" srcset=\"/images/blog/1x/blazor-2.png 1x, /images/blog/2x/blazor-2@2x.png 2x\" class=\"img-fluid\">\r\n\r\nБыло принято решение менять подход — разработать стандарты, правила постановки задач и проектирования.\r\n\r\n# Цели\r\n\r\nКоманда выделила ресурсы на внедрение полноценной дизайн-системы и поставил перед ней решение следующих проблем:\r\n1. **Оптимизировать работу команды на этапах дизайна и разработки.**\r\nРаньше, эти процессы были довольно хаотичны. Дизайнер брал в задачу в работу и изображал примерную реализацию компонента. Многие краевые сценарии не учитывались. Какие-то решения в процессе разработки менялись на ходу. В итоге, разработка затягивалась, фичи резались и итоговый результат сильно отличался от исходной картинки.\r\n2. **Автоматизация и консистентность**.\r\nБольшой размер и сложность компонентов сильно усложняли внесение любых изменений в дизайн. Даже небольшие стилистические изменения в базовом компоненте типа кнопки приводили к огромному количеству работы со стороны дизайнера. Так нужно было учесть разные темы, размеры и стили.\r\n3. **Консистентность цвета**.\r\nОтдельно стоит отметить проблему с цветом. Многие цвета компонентов в коде рассчитывались с помощью миксинов. Это приводило ко многим проблемам, в том числе, проблемам с контрастностью.\r\n4. **Доступность**\r\nПользователи продукта стали всё чаще интересоваться, насколько компоненты доступны для разных категорий пользователей. Нужно было сформировать подход, как дизайнер должен заказывать грамотные A11Y на этапе проектирования дизайна.\r\n5. **Централизация знаний**\r\nМногие знания о тех или иных дизайн-решениях нигде не фиксировались. Единственным источником знания были участвующие в работе на фичей члены команды.\r\n6. **UI Kit**\r\nЧасть пользователей жаловалась на отсутствие UI кита. Плюс, у конкурентов он уже давно был.\r\n\r\n# Переработка компонентов в Figma с нуля\r\n\r\nДизайн существующих компонентов полностью повторяет функционал кодовой реализации. Учтены все редкие сценарии и пограничные состояния компонентов. Перед отрисовкой изучается API компонента и все сценарии его использования.\r\n\r\n## Пример реализации компонента Grid\r\n\r\nКомпонент Grid является одним из больших и одним из самых популярным компонентов в линейке Blazor. Grid представляет собой компонент для отображения данных в табличном формате, который включает в себя множество функций для управления данными, их представления и настройки, таких как фильтрация, группировка, пагинация, сортировка и многое другое.\r\n\r\nОсновную сложность представляет его размер:\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/blazor-3.png\" srcset=\"/images/blog/1x/blazor-3.png 1x, /images/blog/2x/blazor-3@2x.png 2x\" class=\"img-fluid\">\r\n\r\nТак как разные пользователи использую грид по-разному, то компонент получается достаточно гибким по функционалу и возможностям. Всё это отражено в дизайне.\r\n\r\nДля того, чтобы отрисовать такой в Figma пришлось сначала изучить и собрать файл со скриншотами всех состояний компонента. Для этого были изучены демо стенды компоненты, описывающие его стили и API.\r\n\r\nВ итоге, реализованный макет компонента помогает быстрее решать новые задачи и прикидывать прототипы с разными сценариями использования. \r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/blazor-4.png\" srcset=\"/images/blog/1x/blazor-4.png 1x, /images/blog/2x/blazor-4@2x.png 2x\" class=\"img-fluid\">\r\n\r\n# Разработка новых компонентов\r\n\r\nРазработка дизайна новых компонентов включает в себя исследование решений на рынке, лучшие практики, клавиатурную навигацию, идея для демо стендов, и обсуждение требований с ПМом. В зависимости от задачи, количество пунктов может быть больше или меньше.\r\n\r\n## Пример реализации компонента TreeList\r\n\r\nКомпонент TreeList предназначен для отображения иерархическими данными в виде расширенного списка, который сочетает в себе функциональные возможности древовидной структуры (TreeView) и таблицы (Grid). Это позволяет пользователям легко просматривать, сортировать, фильтровать и редактировать иерархические данные с возможностью разворачивания и сворачивания уровней вложенности данных для удобства восприятия.\r\n\r\nКомпонент TreeList часто используется в приложениях для управления содержимым, файловыми системами, а также в любых приложениях, где требуется эффективная работа с иерархическими данными.\r\n\r\nПеред началом отрисовки компонента был произведен ресёрч реализации решений у других вендоров. Собран список идей и примерные способы реализации. \r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/blazor-5.png\" srcset=\"/images/blog/1x/blazor-5.png 1x, /images/blog/2x/blazor-5@2x.png 2x\" class=\"img-fluid\">\r\n\r\nВ конце каждого этапа происходили синхрозиционны встречи с ПМом, разработчиками и другими заинтересованными лицами. В итоге, получилось реализовать компонент, который покрывал бы все ожидаемые сценарии.\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/blazor6.png\" srcset=\"/images/blog/1x/blazor-6.png 1x, /images/blog/2x/blazor-6@2x.png 2x\" class=\"img-fluid\">\r\n\r\n# Токенизация\r\n\r\nКаждый компонент представлен в разных темах. Руками отрисовать каждый компонент в каждой теме очень дорого и ресурсозатратно. Плюс, цена ошибки в таком случае очень высока.\r\n\r\nБыло принято решение использовать дизайн-токены:\r\n- Чтобы быстро обновлять стили компонента под любую тему.\r\n- Гарантировать консистентность решений.\r\n- Использовать как мостик между дизайном и разработкой.\r\n\r\nБыла проведена большая работа над созданием архитектуры и структуры дизайн-токенов:\r\n\r\nК сожалению, для создания грамотной архитектуры, в данном случае, встроенные Figma Variables не подошли. Для работы с токсинами использует Tokens Studio.\r\n\r\nКаждый компонент имеет полное покрытие токенами. Это касается как цветов, так других стилей: бордер, авто-лейаут, тени. \r\n\r\nВ итоге, любой компонент в Fimga легко протестировать с другими стилистическими настройками. А разработчики могут использовать токены для использованиях их значений в файлах стилей.\r\n\r\n# Документирование\r\n\r\nДокументирование покрывается несколькими факторами:\r\n- Сама реализации компонентов в Figma\r\n- Дизайн-токены\r\n- Внутренняя документация\r\n\r\nВнутренняя документация представляет собой правил и рекомендаций: \r\n- правила оформления\r\n- правила работы с дизайн-токенами\r\n- требования по иконкам\r\n- работа с цветовой палитрой\r\n\r\nТут же собраны результаты ресёрчей по тем или иным задач. А также, приятные решения по ним. Это помогает всем членам команды понимать, куда нужно обращаться в первую очередь чтобы найти такую информацию.\r\n\r\n# UI Kit\r\n\r\nРезультатом работы над дизайн-системой послужил выпуск UI кита в Figma. Комьюнити положительно оценило выпуск кита, особенно те пользователи которые просили об этом раньше.  \r\n\r\n# Результаты \r\n\r\nКак результат, получилось собрать крепкий каркас дизайн-системы, которая помогает дизайнерам намного быстрее решать задачи и дальше развивать UX/UI компонентов, а разработчикам использовать дизайн систему как единый источник знаний.', `Summary`='', `FormatterID`='neasden', `OriginalAlias`='blazor', `Uploads`='a:7:{i:0;s:33:\"/images/1x/maxim-petrov-photo.png\";i:1;s:28:\"/images/blog/1x/blazor-2.png\";i:2;s:28:\"/images/blog/1x/blazor-1.png\";i:3;s:15:\"empty-image.jpg\";i:4;s:28:\"/images/blog/1x/blazor-3.png\";i:5;s:28:\"/images/blog/1x/blazor-4.png\";i:10;s:28:\"/images/blog/1x/blazor-5.png\";}', `IsPublished`='1', `IsCommentable`='0', `IsVisible`='1', `IsFavourite`='1', `Stamp`='1711384202', `LastModified`='1711808655', `Offset`='14400', `IsDST`='0', `IsIndexed`='0', `IsExternal`='0', `ReadCount`='2', `SourceID`='0', `SourceNoteID`='0', `SourceNoteURL`='', `SourceNoteJSONURL`='', `SourceNoteData`='' WHERE `SubsetID`=1 AND (`ID`=5);

UPDATE `e2BlogNotes` SET `Uploads`='a:8:{i:0;s:33:"/images/1x/maxim-petrov-photo.png";i:1;s:28:"/images/blog/1x/blazor-2.png";i:2;s:28:"/images/blog/1x/blazor-1.png";i:3;s:15:"empty-image.jpg";i:4;s:28:"/images/blog/1x/blazor-3.png";i:5;s:28:"/images/blog/1x/blazor-4.png";i:6;s:28:"/images/blog/1x/blazor-5.png";i:7;s:27:"/images/blog/1x/blazor6.png";}' WHERE `SubsetID`=1 AND `ID`=5;

UPDATE `e2BlogNotes` SET `SubsetID`='1', `Title`='Дизайн-система Blazor', `Text`='DevExpress Blazor — это набор компонентов пользовательского интерфейса. Продукт активно используется в приложениях на платформе Blazor и предлагают мощный набор компонентов: таблицы данных, календари и планировщики, выпадающие списки, диалоговые окна и многие другие. \r\n\r\nЗадача — переосмыслить и создать дизайн-систему в Figma на основе существующих артефактов и наработок.\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/blazor-1.png\" srcset=\"/images/blog/1x/blazor-1.png 1x, /images/blog/2x/blazor-1@2x.png 2x\" class=\"img-fluid\">\r\n\r\n# Вводные\r\n\r\nПо мере развития продукта, стало увеличиваться количество выпускаемых компонентов и их сложность. Предыдущий подход, когда дизайнер рисовал отдельный макет под каждую задачу стал приносить заметные неудобства для команды. Разработка начала сильно обгонять дизайн и многие решения по краевым сценариям стали принимать сами разработчки. Дизайнеру тратил много времени на поиск визуальных и UX багов на поздних этапах разработки компонента или фичи.\r\n\r\nОтдельной проблемой была сложность каждого компонента:\r\n- **Разные темы**. В разных темах компонент не только меняет цвет, но и начинает обладать другими визуальными свойствами.\r\n- **Несколько размеров**. Каждый компонент линейки представлен в трёх размерах. \r\n- **Дополнительные стили**. Большой набор стилистических вариантов для компонентов-атомов.\r\n\r\nНапример, одна только кнопка состоит из 150 вариантов компонента:\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/blazor-2.png\" srcset=\"/images/blog/1x/blazor-2.png 1x, /images/blog/2x/blazor-2@2x.png 2x\" class=\"img-fluid\">\r\n\r\nБыло принято решение менять подход — разработать стандарты, правила постановки задач и проектирования.\r\n\r\n# Цели\r\n\r\nКоманда выделила ресурсы на внедрение полноценной дизайн-системы и поставил перед ней решение следующих проблем:\r\n1. **Оптимизировать работу команды на этапах дизайна и разработки.**\r\nРаньше, эти процессы были довольно хаотичны. Дизайнер брал в задачу в работу и изображал примерную реализацию компонента. Многие краевые сценарии не учитывались. Какие-то решения в процессе разработки менялись на ходу. В итоге, разработка затягивалась, фичи резались и итоговый результат сильно отличался от исходной картинки.\r\n2. **Автоматизация и консистентность**.\r\nБольшой размер и сложность компонентов сильно усложняли внесение любых изменений в дизайн. Даже небольшие стилистические изменения в базовом компоненте типа кнопки приводили к огромному количеству работы со стороны дизайнера. Так нужно было учесть разные темы, размеры и стили.\r\n3. **Консистентность цвета**.\r\nОтдельно стоит отметить проблему с цветом. Многие цвета компонентов в коде рассчитывались с помощью миксинов. Это приводило ко многим проблемам, в том числе, проблемам с контрастностью.\r\n4. **Доступность**\r\nПользователи продукта стали всё чаще интересоваться, насколько компоненты доступны для разных категорий пользователей. Нужно было сформировать подход, как дизайнер должен заказывать грамотные A11Y на этапе проектирования дизайна.\r\n5. **Централизация знаний**\r\nМногие знания о тех или иных дизайн-решениях нигде не фиксировались. Единственным источником знания были участвующие в работе на фичей члены команды.\r\n6. **UI Kit**\r\nЧасть пользователей жаловалась на отсутствие UI кита. Плюс, у конкурентов он уже давно был.\r\n\r\n# Переработка компонентов в Figma с нуля\r\n\r\nДизайн существующих компонентов полностью повторяет функционал кодовой реализации. Учтены все редкие сценарии и пограничные состояния компонентов. Перед отрисовкой изучается API компонента и все сценарии его использования.\r\n\r\n## Пример реализации компонента Grid\r\n\r\nКомпонент Grid является одним из больших и одним из самых популярным компонентов в линейке Blazor. Grid представляет собой компонент для отображения данных в табличном формате, который включает в себя множество функций для управления данными, их представления и настройки, таких как фильтрация, группировка, пагинация, сортировка и многое другое.\r\n\r\nОсновную сложность представляет его размер:\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/blazor-3.png\" srcset=\"/images/blog/1x/blazor-3.png 1x, /images/blog/2x/blazor-3@2x.png 2x\" class=\"img-fluid\">\r\n\r\nТак как разные пользователи использую грид по-разному, то компонент получается достаточно гибким по функционалу и возможностям. Всё это отражено в дизайне.\r\n\r\nДля того, чтобы отрисовать такой в Figma пришлось сначала изучить и собрать файл со скриншотами всех состояний компонента. Для этого были изучены демо стенды компоненты, описывающие его стили и API.\r\n\r\nВ итоге, реализованный макет компонента помогает быстрее решать новые задачи и прикидывать прототипы с разными сценариями использования. \r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/blazor-4.png\" srcset=\"/images/blog/1x/blazor-4.png 1x, /images/blog/2x/blazor-4@2x.png 2x\" class=\"img-fluid\">\r\n\r\n# Разработка новых компонентов\r\n\r\nРазработка дизайна новых компонентов включает в себя исследование решений на рынке, лучшие практики, клавиатурную навигацию, идея для демо стендов, и обсуждение требований с ПМом. В зависимости от задачи, количество пунктов может быть больше или меньше.\r\n\r\n## Пример реализации компонента TreeList\r\n\r\nКомпонент TreeList предназначен для отображения иерархическими данными в виде расширенного списка, который сочетает в себе функциональные возможности древовидной структуры (TreeView) и таблицы (Grid). Это позволяет пользователям легко просматривать, сортировать, фильтровать и редактировать иерархические данные с возможностью разворачивания и сворачивания уровней вложенности данных для удобства восприятия.\r\n\r\nКомпонент TreeList часто используется в приложениях для управления содержимым, файловыми системами, а также в любых приложениях, где требуется эффективная работа с иерархическими данными.\r\n\r\nПеред началом отрисовки компонента был произведен ресёрч реализации решений у других вендоров. Собран список идей и примерные способы реализации. \r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/blazor-5.png\" srcset=\"/images/blog/1x/blazor-5.png 1x, /images/blog/2x/blazor-5@2x.png 2x\" class=\"img-fluid\">\r\n\r\nВ конце каждого этапа происходили синхрозиционны встречи с ПМом, разработчиками и другими заинтересованными лицами. В итоге, получилось реализовать компонент, который покрывал бы все ожидаемые сценарии.\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/blazor6.png\" srcset=\"/images/blog/1x/blazor-6.png 1x, /images/blog/2x/blazor-6@2x.png 2x\" class=\"img-fluid\">\r\n\r\n# Токенизация\r\n\r\nКаждый компонент представлен в разных темах. Руками отрисовать каждый компонент в каждой теме очень дорого и ресурсозатратно. Плюс, цена ошибки в таком случае очень высока.\r\n\r\nБыло принято решение использовать дизайн-токены:\r\n- Чтобы быстро обновлять стили компонента под любую тему.\r\n- Гарантировать консистентность решений.\r\n- Использовать как мостик между дизайном и разработкой.\r\n\r\nБыла проведена большая работа над созданием архитектуры и структуры дизайн-токенов:\r\n\r\nК сожалению, для создания грамотной архитектуры, в данном случае, встроенные Figma Variables не подошли. Для работы с токсинами использует Tokens Studio.\r\n\r\nКаждый компонент имеет полное покрытие токенами. Это касается как цветов, так других стилей: бордер, авто-лейаут, тени. \r\n\r\nВ итоге, любой компонент в Fimga легко протестировать с другими стилистическими настройками. А разработчики могут использовать токены для использованиях их значений в файлах стилей.\r\n\r\n# Документирование\r\n\r\nДокументирование покрывается несколькими факторами:\r\n- Сама реализации компонентов в Figma\r\n- Дизайн-токены\r\n- Внутренняя документация\r\n\r\nВнутренняя документация представляет собой правил и рекомендаций: \r\n- правила оформления\r\n- правила работы с дизайн-токенами\r\n- требования по иконкам\r\n- работа с цветовой палитрой\r\n\r\nТут же собраны результаты ресёрчей по тем или иным задач. А также, приятные решения по ним. Это помогает всем членам команды понимать, куда нужно обращаться в первую очередь чтобы найти такую информацию.\r\n\r\n# UI Kit\r\n\r\nРезультатом работы над дизайн-системой послужил выпуск UI кита в Figma. Комьюнити положительно оценило выпуск кита, особенно те пользователи которые просили об этом раньше.  \r\n\r\n# Результаты \r\n\r\nКак результат, получилось собрать крепкий каркас дизайн-системы, которая помогает дизайнерам намного быстрее решать задачи и дальше развивать UX/UI компонентов, а разработчикам использовать дизайн систему как единый источник знаний.', `Summary`='', `FormatterID`='neasden', `OriginalAlias`='blazor', `Uploads`='a:7:{i:0;s:33:\"/images/1x/maxim-petrov-photo.png\";i:1;s:28:\"/images/blog/1x/blazor-2.png\";i:2;s:28:\"/images/blog/1x/blazor-1.png\";i:3;s:15:\"empty-image.jpg\";i:4;s:28:\"/images/blog/1x/blazor-3.png\";i:5;s:28:\"/images/blog/1x/blazor-4.png\";i:10;s:28:\"/images/blog/1x/blazor-5.png\";}', `IsPublished`='1', `IsCommentable`='0', `IsVisible`='1', `IsFavourite`='1', `Stamp`='1711384202', `LastModified`='1711808655', `Offset`='14400', `IsDST`='0', `IsIndexed`='1', `IsExternal`='0', `ReadCount`='2', `SourceID`='0', `SourceNoteID`='0', `SourceNoteURL`='', `SourceNoteJSONURL`='', `SourceNoteData`='' WHERE `SubsetID`=1 AND (`ID`=5);

UPDATE `e2BlogNotes` SET `SubsetID`='1', `Title`='Дизайн-система Blazor', `Text`='DevExpress Blazor — это набор компонентов пользовательского интерфейса. Продукт активно используется в приложениях на платформе Blazor и предлагают мощный набор компонентов: таблицы данных, календари и планировщики, выпадающие списки, диалоговые окна и многие другие. \r\n\r\nЗадача — переосмыслить и создать дизайн-систему в Figma на основе существующих артефактов и наработок.\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/blazor-1.png\" srcset=\"/images/blog/1x/blazor-1.png 1x, /images/blog/2x/blazor-1@2x.png 2x\" class=\"img-fluid\">\r\n\r\n# Вводные\r\n\r\nПо мере развития продукта, стало увеличиваться количество выпускаемых компонентов и их сложность. Предыдущий подход, когда дизайнер рисовал отдельный макет под каждую задачу стал приносить заметные неудобства для команды. Разработка начала сильно обгонять дизайн и многие решения по краевым сценариям стали принимать сами разработчки. Дизайнеру тратил много времени на поиск визуальных и UX багов на поздних этапах разработки компонента или фичи.\r\n\r\nОтдельной проблемой была сложность каждого компонента:\r\n- **Разные темы**. В разных темах компонент не только меняет цвет, но и начинает обладать другими визуальными свойствами.\r\n- **Несколько размеров**. Каждый компонент линейки представлен в трёх размерах. \r\n- **Дополнительные стили**. Большой набор стилистических вариантов для компонентов-атомов.\r\n\r\nНапример, одна только кнопка состоит из 150 вариантов компонента:\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/blazor-2.png\" srcset=\"/images/blog/1x/blazor-2.png 1x, /images/blog/2x/blazor-2@2x.png 2x\" class=\"img-fluid\">\r\n\r\nБыло принято решение менять подход — разработать стандарты, правила постановки задач и проектирования.\r\n\r\n# Цели\r\n\r\nКоманда выделила ресурсы на внедрение полноценной дизайн-системы и поставил перед ней решение следующих проблем:\r\n1. **Оптимизировать работу команды на этапах дизайна и разработки.**\r\nРаньше, эти процессы были довольно хаотичны. Дизайнер брал в задачу в работу и изображал примерную реализацию компонента. Многие краевые сценарии не учитывались. Какие-то решения в процессе разработки менялись на ходу. В итоге, разработка затягивалась, фичи резались и итоговый результат сильно отличался от исходной картинки.\r\n2. **Автоматизация и консистентность**.\r\nБольшой размер и сложность компонентов сильно усложняли внесение любых изменений в дизайн. Даже небольшие стилистические изменения в базовом компоненте типа кнопки приводили к огромному количеству работы со стороны дизайнера. Так нужно было учесть разные темы, размеры и стили.\r\n3. **Консистентность цвета**.\r\nОтдельно стоит отметить проблему с цветом. Многие цвета компонентов в коде рассчитывались с помощью миксинов. Это приводило ко многим проблемам, в том числе, проблемам с контрастностью.\r\n4. **Доступность**\r\nПользователи продукта стали всё чаще интересоваться, насколько компоненты доступны для разных категорий пользователей. Нужно было сформировать подход, как дизайнер должен заказывать грамотные A11Y на этапе проектирования дизайна.\r\n5. **Централизация знаний**\r\nМногие знания о тех или иных дизайн-решениях нигде не фиксировались. Единственным источником знания были участвующие в работе на фичей члены команды.\r\n6. **UI Kit**\r\nЧасть пользователей жаловалась на отсутствие UI кита. Плюс, у конкурентов он уже давно был.\r\n\r\n# Переработка компонентов в Figma с нуля\r\n\r\nДизайн существующих компонентов полностью повторяет функционал кодовой реализации. Учтены все редкие сценарии и пограничные состояния компонентов. Перед отрисовкой изучается API компонента и все сценарии его использования.\r\n\r\n## Пример реализации компонента Grid\r\n\r\nКомпонент Grid является одним из больших и одним из самых популярным компонентов в линейке Blazor. Grid представляет собой компонент для отображения данных в табличном формате, который включает в себя множество функций для управления данными, их представления и настройки, таких как фильтрация, группировка, пагинация, сортировка и многое другое.\r\n\r\nОсновную сложность представляет его размер:\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/blazor-3.png\" srcset=\"/images/blog/1x/blazor-3.png 1x, /images/blog/2x/blazor-3@2x.png 2x\" class=\"img-fluid\">\r\n\r\nТак как разные пользователи использую грид по-разному, то компонент получается достаточно гибким по функционалу и возможностям. Всё это отражено в дизайне.\r\n\r\nДля того, чтобы отрисовать такой в Figma пришлось сначала изучить и собрать файл со скриншотами всех состояний компонента. Для этого были изучены демо стенды компоненты, описывающие его стили и API.\r\n\r\nВ итоге, реализованный макет компонента помогает быстрее решать новые задачи и прикидывать прототипы с разными сценариями использования. \r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/blazor-4.png\" srcset=\"/images/blog/1x/blazor-4.png 1x, /images/blog/2x/blazor-4@2x.png 2x\" class=\"img-fluid\">\r\n\r\n# Разработка новых компонентов\r\n\r\nРазработка дизайна новых компонентов включает в себя исследование решений на рынке, лучшие практики, клавиатурную навигацию, идея для демо стендов, и обсуждение требований с ПМом. В зависимости от задачи, количество пунктов может быть больше или меньше.\r\n\r\n## Пример реализации компонента TreeList\r\n\r\nКомпонент TreeList предназначен для отображения иерархическими данными в виде расширенного списка, который сочетает в себе функциональные возможности древовидной структуры (TreeView) и таблицы (Grid). Это позволяет пользователям легко просматривать, сортировать, фильтровать и редактировать иерархические данные с возможностью разворачивания и сворачивания уровней вложенности данных для удобства восприятия.\r\n\r\nКомпонент TreeList часто используется в приложениях для управления содержимым, файловыми системами, а также в любых приложениях, где требуется эффективная работа с иерархическими данными.\r\n\r\nПеред началом отрисовки компонента был произведен ресёрч реализации решений у других вендоров. Собран список идей и примерные способы реализации. \r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/blazor-5.png\" srcset=\"/images/blog/1x/blazor-5.png 1x, /images/blog/2x/blazor-5@2x.png 2x\" class=\"img-fluid\">\r\n\r\nВ конце каждого этапа происходили синхрозиционны встречи с ПМом, разработчиками и другими заинтересованными лицами. В итоге, получилось реализовать компонент, который покрывал бы все ожидаемые сценарии.\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/blazor6.png\" srcset=\"/images/blog/1x/blazor-6.png 1x, /images/blog/2x/blazor-6@2x.png 2x\" class=\"img-fluid\">\r\n\r\n# Токенизация\r\n\r\nКаждый компонент представлен в разных темах. Руками отрисовать каждый компонент в каждой теме очень дорого и ресурсозатратно. Плюс, цена ошибки в таком случае очень высока.\r\n\r\nБыло принято решение использовать дизайн-токены:\r\n- Чтобы быстро обновлять стили компонента под любую тему.\r\n- Гарантировать консистентность решений.\r\n- Использовать как мостик между дизайном и разработкой.\r\n\r\nБыла проведена большая работа над созданием архитектуры и структуры дизайн-токенов:\r\n\r\nК сожалению, для создания грамотной архитектуры, в данном случае, встроенные Figma Variables не подошли. Для работы с токсинами использует Tokens Studio.\r\n\r\nКаждый компонент имеет полное покрытие токенами. Это касается как цветов, так других стилей: бордер, авто-лейаут, тени. \r\n\r\nВ итоге, любой компонент в Fimga легко протестировать с другими стилистическими настройками. А разработчики могут использовать токены для использованиях их значений в файлах стилей.\r\n\r\n# Документирование\r\n\r\nДокументирование покрывается несколькими факторами:\r\n- Сама реализации компонентов в Figma\r\n- Дизайн-токены\r\n- Внутренняя документация\r\n\r\nВнутренняя документация представляет собой правил и рекомендаций: \r\n- правила оформления\r\n- правила работы с дизайн-токенами\r\n- требования по иконкам\r\n- работа с цветовой палитрой\r\n\r\nТут же собраны результаты ресёрчей по тем или иным задач. А также, приятные решения по ним. Это помогает всем членам команды понимать, куда нужно обращаться в первую очередь чтобы найти такую информацию.\r\n\r\n# UI Kit\r\n\r\nРезультатом работы над дизайн-системой послужил выпуск UI кита в Figma. Комьюнити положительно оценило выпуск кита, особенно те пользователи которые просили об этом раньше.  \r\n\r\n# Результаты \r\n\r\nКак результат, получилось собрать крепкий каркас дизайн-системы, которая помогает дизайнерам намного быстрее решать задачи и дальше развивать UX/UI компонентов, а разработчикам использовать дизайн систему как единый источник знаний.', `Summary`='', `FormatterID`='neasden', `OriginalAlias`='blazor', `Uploads`='a:8:{i:0;s:33:\"/images/1x/maxim-petrov-photo.png\";i:1;s:28:\"/images/blog/1x/blazor-2.png\";i:2;s:28:\"/images/blog/1x/blazor-1.png\";i:3;s:15:\"empty-image.jpg\";i:4;s:28:\"/images/blog/1x/blazor-3.png\";i:5;s:28:\"/images/blog/1x/blazor-4.png\";i:6;s:28:\"/images/blog/1x/blazor-5.png\";i:12;s:27:\"/images/blog/1x/blazor6.png\";}', `IsPublished`='1', `IsCommentable`='0', `IsVisible`='1', `IsFavourite`='1', `Stamp`='1711384202', `LastModified`='1711808655', `Offset`='14400', `IsDST`='0', `IsIndexed`='1', `IsExternal`='0', `ReadCount`='2', `SourceID`='0', `SourceNoteID`='0', `SourceNoteURL`='', `SourceNoteJSONURL`='', `SourceNoteData`='' WHERE `SubsetID`=1 AND (`ID`=5);

UPDATE `e2BlogAliases` SET `EntityType`='n', `EntityID`='5', `Alias`='blazor', `Stamp`='1711809981' WHERE `SubsetID`=1 AND (`ID`=6);

UPDATE `e2BlogNotes` SET `SubsetID`='1', `Title`='Дизайн-система Blazor', `Text`='DevExpress Blazor — это набор компонентов пользовательского интерфейса. Активно применяется в приложениях на платформе Blazor и предлагает мощный набор компонентов: таблицы данных, календари, планировщики, выпадающие списки, диалоговые окна и многие другие.\r\n\r\nЗадача — переосмыслить и создать дизайн-систему в Figma на основе существующих артефактов и наработок.\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/blazor-1.png\" srcset=\"/images/blog/1x/blazor-1.png 1x, /images/blog/2x/blazor-1@2x.png 2x\" class=\"img-fluid\">\r\n\r\n# Вводные\r\n\r\nПродукт развивался и вместе с этим количество и сложность компонентов. Раньше дизайнер рисовал отдельный макет под каждую задачу. Не было системного подхода и единых правил. Со временем этот подход начал приносить проблемы:\r\n- Разработка начала сильно обгонять дизайн.\r\n- Многие решения по краевым сценариям стали приниматься разработчиками.\r\n- Дизайнер тратил много времени на поиск UI и UX багов на поздних этапах.\r\n- Итоговая фича могла сильно отличаться от нарисованного макета.\r\n\r\nОтдельной проблемой была сложность каждого компонента:\r\n- **Разные темы**. В разных темах компонент не только меняет цвет, но и начинает обладать другими визуальными свойствами.\r\n- **Несколько размеров**. Каждый компонент линейки представлен в трёх размерах. \r\n- **Дополнительные стили**. Большой набор стилистических вариантов для компонентов-атомов.\r\n\r\nНапример, одна только кнопка состоит из 150 вариантов компонента:\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/blazor-2.png\" srcset=\"/images/blog/1x/blazor-2.png 1x, /images/blog/2x/blazor-2@2x.png 2x\" class=\"img-fluid\">\r\n\r\nБыло принято решение менять подход — разработать стандарты, правила постановки задач и проектирования.\r\n\r\n# Цели\r\n\r\nКоманда выделила ресурсы на внедрение полноценной дизайн-системы и поставил перед ней решение следующих проблем:\r\n1. **Оптимизировать работу команды на этапах дизайна и разработки.**\r\nРаньше, эти процессы были довольно хаотичны. Дизайнер брал в задачу в работу и изображал примерную реализацию компонента. Многие краевые сценарии не учитывались. Какие-то решения в процессе разработки менялись на ходу. В итоге, разработка затягивалась, фичи резались и итоговый результат сильно отличался от исходной картинки.\r\n2. **Автоматизация и консистентность**.\r\nБольшой размер и сложность компонентов сильно усложняли внесение любых изменений в дизайн. Даже небольшие стилистические изменения в базовом компоненте типа кнопки приводили к огромному количеству работы со стороны дизайнера. Так нужно было учесть разные темы, размеры и стили.\r\n3. **Консистентность цвета**.\r\nОтдельно стоит отметить проблему с цветом. Многие цвета компонентов в коде рассчитывались с помощью миксинов. Это приводило ко многим проблемам, в том числе, проблемам с контрастностью.\r\n4. **Доступность**\r\nПользователи продукта стали всё чаще интересоваться, насколько компоненты доступны для разных категорий пользователей. Нужно было сформировать подход, как дизайнер должен заказывать грамотные A11Y на этапе проектирования дизайна.\r\n5. **Централизация знаний**\r\nМногие знания о тех или иных дизайн-решениях нигде не фиксировались. Единственным источником знания были участвующие в работе на фичей члены команды.\r\n6. **UI Kit**\r\nЧасть пользователей жаловалась на отсутствие UI кита. Плюс, у конкурентов он уже давно был.\r\n\r\n# Переработка компонентов в Figma с нуля\r\n\r\nДизайн существующих компонентов полностью повторяет функционал кодовой реализации. Учтены все редкие сценарии и пограничные состояния компонентов. Перед отрисовкой изучается API компонента и все сценарии его использования.\r\n\r\n## Пример реализации компонента Grid\r\n\r\nКомпонент Grid является одним из больших и одним из самых популярным компонентов в линейке Blazor. Grid представляет собой компонент для отображения данных в табличном формате, который включает в себя множество функций для управления данными, их представления и настройки, таких как фильтрация, группировка, пагинация, сортировка и многое другое.\r\n\r\nОсновную сложность представляет его размер:\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/blazor-3.png\" srcset=\"/images/blog/1x/blazor-3.png 1x, /images/blog/2x/blazor-3@2x.png 2x\" class=\"img-fluid\">\r\n\r\nТак как разные пользователи использую грид по-разному, то компонент получается достаточно гибким по функционалу и возможностям. Всё это отражено в дизайне.\r\n\r\nДля того, чтобы отрисовать такой в Figma пришлось сначала изучить и собрать файл со скриншотами всех состояний компонента. Для этого были изучены демо стенды компоненты, описывающие его стили и API.\r\n\r\nВ итоге, реализованный макет компонента помогает быстрее решать новые задачи и прикидывать прототипы с разными сценариями использования. \r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/blazor-4.png\" srcset=\"/images/blog/1x/blazor-4.png 1x, /images/blog/2x/blazor-4@2x.png 2x\" class=\"img-fluid\">\r\n\r\n# Разработка новых компонентов\r\n\r\nРазработка дизайна новых компонентов включает в себя исследование решений на рынке, лучшие практики, клавиатурную навигацию, идея для демо стендов, и обсуждение требований с ПМом. В зависимости от задачи, количество пунктов может быть больше или меньше.\r\n\r\n## Пример реализации компонента TreeList\r\n\r\nКомпонент TreeList предназначен для отображения иерархическими данными в виде расширенного списка, который сочетает в себе функциональные возможности древовидной структуры (TreeView) и таблицы (Grid). Это позволяет пользователям легко просматривать, сортировать, фильтровать и редактировать иерархические данные с возможностью разворачивания и сворачивания уровней вложенности данных для удобства восприятия.\r\n\r\nКомпонент TreeList часто используется в приложениях для управления содержимым, файловыми системами, а также в любых приложениях, где требуется эффективная работа с иерархическими данными.\r\n\r\nПеред началом отрисовки компонента был произведен ресёрч реализации решений у других вендоров. Собран список идей и примерные способы реализации. \r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/blazor-5.png\" srcset=\"/images/blog/1x/blazor-5.png 1x, /images/blog/2x/blazor-5@2x.png 2x\" class=\"img-fluid\">\r\n\r\nВ конце каждого этапа происходили синхрозиционны встречи с ПМом, разработчиками и другими заинтересованными лицами. В итоге, получилось реализовать компонент, который покрывал бы все ожидаемые сценарии.\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/blazor6.png\" srcset=\"/images/blog/1x/blazor-6.png 1x, /images/blog/2x/blazor-6@2x.png 2x\" class=\"img-fluid\">\r\n\r\n# Токенизация\r\n\r\nКаждый компонент представлен в разных темах. Руками отрисовать каждый компонент в каждой теме очень дорого и ресурсозатратно. Плюс, цена ошибки в таком случае очень высока.\r\n\r\nБыло принято решение использовать дизайн-токены:\r\n- Чтобы быстро обновлять стили компонента под любую тему.\r\n- Гарантировать консистентность решений.\r\n- Использовать как мостик между дизайном и разработкой.\r\n\r\nБыла проведена большая работа над созданием архитектуры и структуры дизайн-токенов:\r\n\r\nК сожалению, для создания грамотной архитектуры, в данном случае, встроенные Figma Variables не подошли. Для работы с токсинами использует Tokens Studio.\r\n\r\nКаждый компонент имеет полное покрытие токенами. Это касается как цветов, так других стилей: бордер, авто-лейаут, тени. \r\n\r\nВ итоге, любой компонент в Fimga легко протестировать с другими стилистическими настройками. А разработчики могут использовать токены для использованиях их значений в файлах стилей.\r\n\r\n# Документирование\r\n\r\nДокументирование покрывается несколькими факторами:\r\n- Сама реализации компонентов в Figma\r\n- Дизайн-токены\r\n- Внутренняя документация\r\n\r\nВнутренняя документация представляет собой правил и рекомендаций: \r\n- правила оформления\r\n- правила работы с дизайн-токенами\r\n- требования по иконкам\r\n- работа с цветовой палитрой\r\n\r\nТут же собраны результаты ресёрчей по тем или иным задач. А также, приятные решения по ним. Это помогает всем членам команды понимать, куда нужно обращаться в первую очередь чтобы найти такую информацию.\r\n\r\n# UI Kit\r\n\r\nРезультатом работы над дизайн-системой послужил выпуск UI кита в Figma. Комьюнити положительно оценило выпуск кита, особенно те пользователи которые просили об этом раньше.  \r\n\r\n# Результаты \r\n\r\nКак результат, получилось собрать крепкий каркас дизайн-системы, которая помогает дизайнерам намного быстрее решать задачи и дальше развивать UX/UI компонентов, а разработчикам использовать дизайн систему как единый источник знаний.', `Summary`='', `FormatterID`='neasden', `OriginalAlias`='blazor', `Uploads`='a:8:{i:0;s:33:\"/images/1x/maxim-petrov-photo.png\";i:1;s:28:\"/images/blog/1x/blazor-2.png\";i:2;s:28:\"/images/blog/1x/blazor-1.png\";i:3;s:15:\"empty-image.jpg\";i:4;s:28:\"/images/blog/1x/blazor-3.png\";i:5;s:28:\"/images/blog/1x/blazor-4.png\";i:6;s:28:\"/images/blog/1x/blazor-5.png\";i:12;s:27:\"/images/blog/1x/blazor6.png\";}', `IsPublished`='1', `IsCommentable`='0', `IsVisible`='1', `IsFavourite`='1', `Stamp`='1711384202', `LastModified`='1711809981', `Offset`='14400', `IsDST`='0', `IsIndexed`='0', `IsExternal`='0', `ReadCount`='2', `SourceID`='0', `SourceNoteID`='0', `SourceNoteURL`='', `SourceNoteJSONURL`='', `SourceNoteData`='' WHERE `SubsetID`=1 AND (`ID`=5);

UPDATE `e2BlogNotes` SET `SubsetID`='1', `Title`='Дизайн-система Blazor', `Text`='DevExpress Blazor — это набор компонентов пользовательского интерфейса. Активно применяется в приложениях на платформе Blazor и предлагает мощный набор компонентов: таблицы данных, календари, планировщики, выпадающие списки, диалоговые окна и многие другие.\r\n\r\nЗадача — переосмыслить и создать дизайн-систему в Figma на основе существующих артефактов и наработок.\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/blazor-1.png\" srcset=\"/images/blog/1x/blazor-1.png 1x, /images/blog/2x/blazor-1@2x.png 2x\" class=\"img-fluid\">\r\n\r\n# Вводные\r\n\r\nПродукт развивался и вместе с этим количество и сложность компонентов. Раньше дизайнер рисовал отдельный макет под каждую задачу. Не было системного подхода и единых правил. Со временем этот подход начал приносить проблемы:\r\n- Разработка начала сильно обгонять дизайн.\r\n- Многие решения по краевым сценариям стали приниматься разработчиками.\r\n- Дизайнер тратил много времени на поиск UI и UX багов на поздних этапах.\r\n- Итоговая фича могла сильно отличаться от нарисованного макета.\r\n\r\nОтдельной проблемой была сложность каждого компонента:\r\n- **Разные темы**. В разных темах компонент не только меняет цвет, но и начинает обладать другими визуальными свойствами.\r\n- **Несколько размеров**. Каждый компонент линейки представлен в трёх размерах. \r\n- **Дополнительные стили**. Большой набор стилистических вариантов для компонентов-атомов.\r\n\r\nНапример, одна только кнопка состоит из 150 вариантов компонента:\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/blazor-2.png\" srcset=\"/images/blog/1x/blazor-2.png 1x, /images/blog/2x/blazor-2@2x.png 2x\" class=\"img-fluid\">\r\n\r\nБыло принято решение менять подход — разработать стандарты, правила постановки задач и проектирования.\r\n\r\n# Цели\r\n\r\nКоманда выделила ресурсы на внедрение полноценной дизайн-системы и поставил перед ней решение следующих проблем:\r\n1. **Оптимизировать работу команды на этапах дизайна и разработки.**\r\nРаньше, эти процессы были довольно хаотичны. Дизайнер брал в задачу в работу и изображал примерную реализацию компонента. Многие краевые сценарии не учитывались. Какие-то решения в процессе разработки менялись на ходу. В итоге, разработка затягивалась, фичи резались и итоговый результат сильно отличался от исходной картинки.\r\n2. **Автоматизация и консистентность**.\r\nБольшой размер и сложность компонентов сильно усложняли внесение любых изменений в дизайн. Даже небольшие стилистические изменения в базовом компоненте типа кнопки приводили к огромному количеству работы со стороны дизайнера. Так нужно было учесть разные темы, размеры и стили.\r\n3. **Консистентность цвета**.\r\nОтдельно стоит отметить проблему с цветом. Многие цвета компонентов в коде рассчитывались с помощью миксинов. Это приводило ко многим проблемам, в том числе, проблемам с контрастностью.\r\n4. **Доступность**\r\nПользователи продукта стали всё чаще интересоваться, насколько компоненты доступны для разных категорий пользователей. Нужно было сформировать подход, как дизайнер должен заказывать грамотные A11Y на этапе проектирования дизайна.\r\n5. **Централизация знаний**\r\nМногие знания о тех или иных дизайн-решениях нигде не фиксировались. Единственным источником знания были участвующие в работе на фичей члены команды.\r\n6. **UI Kit**\r\nЧасть пользователей жаловалась на отсутствие UI кита. Плюс, у конкурентов он уже давно был.\r\n\r\n# Переработка компонентов в Figma с нуля\r\n\r\nДизайн существующих компонентов полностью повторяет функционал кодовой реализации. Учтены все редкие сценарии и пограничные состояния компонентов. Перед отрисовкой изучается API компонента и все сценарии его использования.\r\n\r\n## Пример реализации компонента Grid\r\n\r\nКомпонент Grid является одним из больших и одним из самых популярным компонентов в линейке Blazor. Grid представляет собой компонент для отображения данных в табличном формате, который включает в себя множество функций для управления данными, их представления и настройки, таких как фильтрация, группировка, пагинация, сортировка и многое другое.\r\n\r\nОсновную сложность представляет его размер:\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/blazor-3.png\" srcset=\"/images/blog/1x/blazor-3.png 1x, /images/blog/2x/blazor-3@2x.png 2x\" class=\"img-fluid\">\r\n\r\nТак как разные пользователи использую грид по-разному, то компонент получается достаточно гибким по функционалу и возможностям. Всё это отражено в дизайне.\r\n\r\nДля того, чтобы отрисовать такой в Figma пришлось сначала изучить и собрать файл со скриншотами всех состояний компонента. Для этого были изучены демо стенды компоненты, описывающие его стили и API.\r\n\r\nВ итоге, реализованный макет компонента помогает быстрее решать новые задачи и прикидывать прототипы с разными сценариями использования. \r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/blazor-4.png\" srcset=\"/images/blog/1x/blazor-4.png 1x, /images/blog/2x/blazor-4@2x.png 2x\" class=\"img-fluid\">\r\n\r\n# Разработка новых компонентов\r\n\r\nРазработка дизайна новых компонентов включает в себя исследование решений на рынке, лучшие практики, клавиатурную навигацию, идея для демо стендов, и обсуждение требований с ПМом. В зависимости от задачи, количество пунктов может быть больше или меньше.\r\n\r\n## Пример реализации компонента TreeList\r\n\r\nКомпонент TreeList предназначен для отображения иерархическими данными в виде расширенного списка, который сочетает в себе функциональные возможности древовидной структуры (TreeView) и таблицы (Grid). Это позволяет пользователям легко просматривать, сортировать, фильтровать и редактировать иерархические данные с возможностью разворачивания и сворачивания уровней вложенности данных для удобства восприятия.\r\n\r\nКомпонент TreeList часто используется в приложениях для управления содержимым, файловыми системами, а также в любых приложениях, где требуется эффективная работа с иерархическими данными.\r\n\r\nПеред началом отрисовки компонента был произведен ресёрч реализации решений у других вендоров. Собран список идей и примерные способы реализации. \r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/blazor-5.png\" srcset=\"/images/blog/1x/blazor-5.png 1x, /images/blog/2x/blazor-5@2x.png 2x\" class=\"img-fluid\">\r\n\r\nВ конце каждого этапа происходили синхрозиционны встречи с ПМом, разработчиками и другими заинтересованными лицами. В итоге, получилось реализовать компонент, который покрывал бы все ожидаемые сценарии.\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/blazor6.png\" srcset=\"/images/blog/1x/blazor-6.png 1x, /images/blog/2x/blazor-6@2x.png 2x\" class=\"img-fluid\">\r\n\r\n# Токенизация\r\n\r\nКаждый компонент представлен в разных темах. Руками отрисовать каждый компонент в каждой теме очень дорого и ресурсозатратно. Плюс, цена ошибки в таком случае очень высока.\r\n\r\nБыло принято решение использовать дизайн-токены:\r\n- Чтобы быстро обновлять стили компонента под любую тему.\r\n- Гарантировать консистентность решений.\r\n- Использовать как мостик между дизайном и разработкой.\r\n\r\nБыла проведена большая работа над созданием архитектуры и структуры дизайн-токенов:\r\n\r\nК сожалению, для создания грамотной архитектуры, в данном случае, встроенные Figma Variables не подошли. Для работы с токсинами использует Tokens Studio.\r\n\r\nКаждый компонент имеет полное покрытие токенами. Это касается как цветов, так других стилей: бордер, авто-лейаут, тени. \r\n\r\nВ итоге, любой компонент в Fimga легко протестировать с другими стилистическими настройками. А разработчики могут использовать токены для использованиях их значений в файлах стилей.\r\n\r\n# Документирование\r\n\r\nДокументирование покрывается несколькими факторами:\r\n- Сама реализации компонентов в Figma\r\n- Дизайн-токены\r\n- Внутренняя документация\r\n\r\nВнутренняя документация представляет собой правил и рекомендаций: \r\n- правила оформления\r\n- правила работы с дизайн-токенами\r\n- требования по иконкам\r\n- работа с цветовой палитрой\r\n\r\nТут же собраны результаты ресёрчей по тем или иным задач. А также, приятные решения по ним. Это помогает всем членам команды понимать, куда нужно обращаться в первую очередь чтобы найти такую информацию.\r\n\r\n# UI Kit\r\n\r\nРезультатом работы над дизайн-системой послужил выпуск UI кита в Figma. Комьюнити положительно оценило выпуск кита, особенно те пользователи которые просили об этом раньше.  \r\n\r\n# Результаты \r\n\r\nКак результат, получилось собрать крепкий каркас дизайн-системы, которая помогает дизайнерам намного быстрее решать задачи и дальше развивать UX/UI компонентов, а разработчикам использовать дизайн систему как единый источник знаний.', `Summary`='', `FormatterID`='neasden', `OriginalAlias`='blazor', `Uploads`='a:8:{i:0;s:33:\"/images/1x/maxim-petrov-photo.png\";i:1;s:28:\"/images/blog/1x/blazor-2.png\";i:2;s:28:\"/images/blog/1x/blazor-1.png\";i:3;s:15:\"empty-image.jpg\";i:4;s:28:\"/images/blog/1x/blazor-3.png\";i:5;s:28:\"/images/blog/1x/blazor-4.png\";i:6;s:28:\"/images/blog/1x/blazor-5.png\";i:12;s:27:\"/images/blog/1x/blazor6.png\";}', `IsPublished`='1', `IsCommentable`='0', `IsVisible`='1', `IsFavourite`='1', `Stamp`='1711384202', `LastModified`='1711809981', `Offset`='14400', `IsDST`='0', `IsIndexed`='1', `IsExternal`='0', `ReadCount`='2', `SourceID`='0', `SourceNoteID`='0', `SourceNoteURL`='', `SourceNoteJSONURL`='', `SourceNoteData`='' WHERE `SubsetID`=1 AND (`ID`=5);

UPDATE `e2BlogNotes` SET `SubsetID`='1', `Title`='Дизайн-система Blazor', `Text`='DevExpress Blazor — это набор компонентов пользовательского интерфейса. Активно применяется в приложениях на платформе Blazor и предлагает мощный набор компонентов: таблицы данных, календари, планировщики, выпадающие списки, диалоговые окна и многие другие.\r\n\r\nЗадача — переосмыслить и создать дизайн-систему в Figma на основе существующих артефактов и наработок.\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/blazor-1.png\" srcset=\"/images/blog/1x/blazor-1.png 1x, /images/blog/2x/blazor-1@2x.png 2x\" class=\"img-fluid\">\r\n\r\n# Вводные\r\n\r\nПродукт развивался и вместе с этим количество и сложность компонентов. Раньше дизайнер рисовал отдельный макет под каждую задачу. Не было системного подхода и единых правил. Со временем этот подход начал приносить проблемы:\r\n- Разработка начала сильно обгонять дизайн.\r\n- Многие решения по краевым сценариям стали приниматься разработчиками.\r\n- Дизайнер тратил много времени на поиск UI и UX багов на поздних этапах.\r\n- Итоговая фича могла сильно отличаться от нарисованного макета.\r\n\r\nОтдельной проблемой была сложность каждого компонента:\r\n- **Разные темы**. В разных темах компонент не только меняет цвет, но и начинает обладать другими визуальными свойствами.\r\n- **Несколько размеров**. Каждый компонент линейки представлен в трёх размерах. \r\n- **Дополнительные стили**. Большой набор стилистических вариантов для компонентов-атомов.\r\n\r\nНапример, одна только кнопка состоит из 150 вариантов компонента:\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/blazor-2.png\" srcset=\"/images/blog/1x/blazor-2.png 1x, /images/blog/2x/blazor-2@2x.png 2x\" class=\"img-fluid\">\r\n\r\nБыло принято решение менять подход — разработать стандарты, правила постановки задач и проектирования.\r\n\r\n# Цели\r\n\r\nКоманда выделила ресурсы на внедрение полноценной дизайн-системы и поставил перед ней решение следующих проблем:\r\n1. **Оптимизировать работу команды на этапах дизайна и разработки.**\r\nРаньше, эти процессы были довольно хаотичны. Дизайнер брал в задачу в работу и изображал примерную реализацию компонента. Многие краевые сценарии не учитывались. Какие-то решения в процессе разработки менялись на ходу. В итоге, разработка затягивалась, фичи резались и итоговый результат сильно отличался от исходной картинки.\r\n2. **Автоматизация и консистентность**.\r\nБольшой размер и сложность компонентов сильно усложняли внесение любых изменений в дизайн. Даже небольшие стилистические изменения в базовом компоненте типа кнопки приводили к огромному количеству работы со стороны дизайнера. Так нужно было учесть разные темы, размеры и стили.\r\n3. **Консистентность цвета**.\r\nОтдельно стоит отметить проблему с цветом. Многие цвета компонентов в коде рассчитывались с помощью миксинов. Это приводило ко многим проблемам, в том числе, проблемам с контрастностью.\r\n4. **Доступность**\r\nПользователи продукта стали всё чаще интересоваться, насколько компоненты доступны для разных категорий пользователей. Нужно было сформировать подход, как дизайнер должен заказывать грамотные A11Y на этапе проектирования дизайна.\r\n5. **Централизация знаний**\r\nМногие знания о тех или иных дизайн-решениях нигде не фиксировались. Единственным источником знания были участвующие в работе на фичей члены команды.\r\n6. **UI Kit**\r\nЧасть пользователей жаловалась на отсутствие UI кита. Плюс, у конкурентов он уже давно был.\r\n\r\n# Переработка компонентов в Figma с нуля\r\n\r\nДизайн существующих компонентов полностью повторяет функционал кодовой реализации. Учтены все редкие сценарии и пограничные состояния компонентов. Перед отрисовкой изучается API компонента и все сценарии его использования.\r\n\r\n## Пример реализации компонента Grid\r\n\r\nКомпонент Grid является одним из больших и одним из самых популярным компонентов в линейке Blazor. Grid представляет собой компонент для отображения данных в табличном формате, который включает в себя множество функций для управления данными, их представления и настройки, таких как фильтрация, группировка, пагинация, сортировка и многое другое.\r\n\r\nОсновную сложность представляет его размер:\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/blazor-3.png\" srcset=\"/images/blog/1x/blazor-3.png 1x, /images/blog/2x/blazor-3@2x.png 2x\" class=\"img-fluid\">\r\n\r\nТак как разные пользователи использую грид по-разному, то компонент получается достаточно гибким по функционалу и возможностям. Всё это отражено в дизайне.\r\n\r\nДля того, чтобы отрисовать такой в Figma пришлось сначала изучить и собрать файл со скриншотами всех состояний компонента. Для этого были изучены демо стенды компоненты, описывающие его стили и API.\r\n\r\nВ итоге, реализованный макет компонента помогает быстрее решать новые задачи и прикидывать прототипы с разными сценариями использования. \r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/blazor-4.png\" srcset=\"/images/blog/1x/blazor-4.png 1x, /images/blog/2x/blazor-4@2x.png 2x\" class=\"img-fluid\">\r\n\r\n# Разработка новых компонентов\r\n\r\nРазработка дизайна новых компонентов включает в себя исследование решений на рынке, лучшие практики, клавиатурную навигацию, идея для демо стендов, и обсуждение требований с ПМом. В зависимости от задачи, количество пунктов может быть больше или меньше.\r\n\r\n## Пример реализации компонента TreeList\r\n\r\nКомпонент TreeList предназначен для отображения иерархическими данными в виде расширенного списка, который сочетает в себе функциональные возможности древовидной структуры (TreeView) и таблицы (Grid). Это позволяет пользователям легко просматривать, сортировать, фильтровать и редактировать иерархические данные с возможностью разворачивания и сворачивания уровней вложенности данных для удобства восприятия.\r\n\r\nКомпонент TreeList часто используется в приложениях для управления содержимым, файловыми системами, а также в любых приложениях, где требуется эффективная работа с иерархическими данными.\r\n\r\nПеред началом отрисовки компонента был произведен ресёрч реализации решений у других вендоров. Собран список идей и примерные способы реализации. \r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/blazor-5.png\" srcset=\"/images/blog/1x/blazor-5.png 1x, /images/blog/2x/blazor-5@2x.png 2x\" class=\"img-fluid\">\r\n\r\nВ конце каждого этапа происходили синхрозиционны встречи с ПМом, разработчиками и другими заинтересованными лицами. В итоге, получилось реализовать компонент, который покрывал бы все ожидаемые сценарии.\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/blazor6.png\" srcset=\"/images/blog/1x/blazor-6.png 1x, /images/blog/2x/blazor-6@2x.png 2x\" class=\"img-fluid\">\r\n\r\n# Токенизация\r\n\r\nКаждый компонент представлен в разных темах. Руками отрисовать каждый компонент в каждой теме очень дорого и ресурсозатратно. Плюс, цена ошибки в таком случае очень высока.\r\n\r\nБыло принято решение использовать дизайн-токены:\r\n- Чтобы быстро обновлять стили компонента под любую тему.\r\n- Гарантировать консистентность решений.\r\n- Использовать как мостик между дизайном и разработкой.\r\n\r\nБыла проведена большая работа над созданием архитектуры и структуры дизайн-токенов:\r\n\r\nК сожалению, для создания грамотной архитектуры, в данном случае, встроенные Figma Variables не подошли. Для работы с токсинами использует Tokens Studio.\r\n\r\nКаждый компонент имеет полное покрытие токенами. Это касается как цветов, так других стилей: бордер, авто-лейаут, тени. \r\n\r\nВ итоге, любой компонент в Fimga легко протестировать с другими стилистическими настройками. А разработчики могут использовать токены для использованиях их значений в файлах стилей.\r\n\r\n# Документирование\r\n\r\nДокументирование покрывается несколькими факторами:\r\n- Сама реализации компонентов в Figma\r\n- Дизайн-токены\r\n- Внутренняя документация\r\n\r\nВнутренняя документация представляет собой правил и рекомендаций: \r\n- правила оформления\r\n- правила работы с дизайн-токенами\r\n- требования по иконкам\r\n- работа с цветовой палитрой\r\n\r\nТут же собраны результаты ресёрчей по тем или иным задач. А также, приятные решения по ним. Это помогает всем членам команды понимать, куда нужно обращаться в первую очередь чтобы найти такую информацию.\r\n\r\n# UI Kit\r\n\r\nРезультатом работы над дизайн-системой послужил выпуск UI кита в Figma. Комьюнити положительно оценило выпуск кита, особенно те пользователи которые просили об этом раньше.  \r\n\r\n# Результаты \r\n\r\nКак результат, получилось собрать крепкий каркас дизайн-системы, которая помогает дизайнерам намного быстрее решать задачи и дальше развивать UX/UI компонентов, а разработчикам использовать дизайн систему как единый источник знаний.', `Summary`='', `FormatterID`='neasden', `OriginalAlias`='blazor', `Uploads`='a:8:{i:0;s:33:\"/images/1x/maxim-petrov-photo.png\";i:1;s:28:\"/images/blog/1x/blazor-2.png\";i:2;s:28:\"/images/blog/1x/blazor-1.png\";i:3;s:15:\"empty-image.jpg\";i:4;s:28:\"/images/blog/1x/blazor-3.png\";i:5;s:28:\"/images/blog/1x/blazor-4.png\";i:6;s:28:\"/images/blog/1x/blazor-5.png\";i:7;s:27:\"/images/blog/1x/blazor6.png\";}', `IsPublished`='1', `IsCommentable`='0', `IsVisible`='1', `IsFavourite`='1', `Stamp`='1711384202', `LastModified`='1711809981', `Offset`='14400', `IsDST`='0', `IsIndexed`='1', `IsExternal`='0', `ReadCount`='2', `SourceID`='0', `SourceNoteID`='0', `SourceNoteURL`='', `SourceNoteJSONURL`='', `SourceNoteData`='' WHERE `SubsetID`=1 AND (`ID`=5);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1711814400', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1709223671);

UPDATE `e2BlogAliases` SET `EntityType`='n', `EntityID`='5', `Alias`='blazor', `Stamp`='1711815719' WHERE `SubsetID`=1 AND (`ID`=6);

UPDATE `e2BlogNotes` SET `SubsetID`='1', `Title`='Дизайн-система Blazor', `Text`='DevExpress Blazor — это набор компонентов пользовательского интерфейса. Активно применяется в приложениях на платформе Blazor и предлагает мощный набор компонентов: таблицы данных, календари, планировщики, выпадающие списки, диалоговые окна и многие другие.\r\n\r\nЗадача — переосмыслить и создать дизайн-систему в Figma на основе существующих артефактов и наработок.\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/blazor-1.png\" srcset=\"/images/blog/1x/blazor-1.png 1x, /images/blog/2x/blazor-1@2x.png 2x\" class=\"img-fluid\">\r\n\r\n# Вводные\r\n\r\nBlazor продукт развивался и вместе с этим росло количество и сложность компонентов. Раньше дизайнер рисовал отдельный макет под каждую задачу. Не было системного подхода и единых правил. Со временем этот подход начал приносить проблемы:\r\n- Разработка начала сильно обгонять дизайн.\r\n- Многие решения по краевым сценариям стали приниматься разработчиками.\r\n- Дизайнер тратил много времени на поиск UI и UX багов на поздних этапах.\r\n- Итоговая фича могла сильно отличаться от нарисованного макета.\r\n\r\nОтдельной проблемой была сложность каждого компонента:\r\n- **Разные темы**. В разных темах компонент не только меняет цвет, но и начинает обладать другими визуальными свойствами.\r\n- **Несколько размеров**. Каждый компонент линейки представлен в трёх размерах. \r\n- **Дополнительные стили**. Большой набор стилистических вариантов для компонентов-атомов.\r\n\r\nНапример, одна только кнопка состоит из 150 вариантов компонента:\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/blazor-2.png\" srcset=\"/images/blog/1x/blazor-2.png 1x, /images/blog/2x/blazor-2@2x.png 2x\" class=\"img-fluid\">\r\n\r\nБыло принято решение менять подход — разработать стандарты, правила постановки задач и проектирования.\r\n\r\n# Задачи\r\n\r\nПеред новой дизайн-системой поставили следующие задачи:\r\n\r\n1. **Оптимизация работы команды на этапах дизайна и разработки.** \r\nРаньше, эти процессы были довольно хаотичны. Дизайнер брал в задачу в работу и изображал примерную реализацию компонента. Многие краевые сценарии не учитывались. Какие-то решения в процессе разработки менялись на ходу. В итоге, разработка затягивалась, фичи резались и итоговый результат сильно отличался от исходной картинки.\r\n2. **Автоматизация и консистентность**. \r\nБольшой размер и сложность компонентов сильно затрудняли внесение любых изменений в дизайн. Даже небольшие стилистические изменения в базовом компоненте, типа кнопки, приводили к огромному количеству работы со стороны дизайнера. Так как нужно было учесть разные темы, размеры и стили.\r\n3. **Консистентность цвета**. \r\nОтдельно стоит отметить проблему с цветом. Многие цвета компонентов в коде рассчитывались с помощью миксинов. Это приводило ко многим проблемам, в том числе, проблемам с контрастностью.\r\n4. **Доступность.**\r\nПользователи продукта стали всё чаще интересоваться, насколько компоненты доступны для разных категорий пользователей. Нужно было сформировать подход, когда дизайнер на этапе проработки компонента учитывает все WCAG 2.2 AA требования.\r\n5. **Централизация знаний.**\r\nМногие знания о тех или иных дизайн-решениях нигде не фиксировались. Единственным источником знания были участвующие в работе на фичей члены команды. Нужно было сформировать систему документации.\r\n6. **UI Kit.**\r\nВсё чаще стали приходить запросы на UI Kit от пользователей. В добавок, это уже давно было у конкурентов.\r\n\r\n# Результат\r\n\r\n## Компоненты в Figma переработаны с нуля\r\n\r\nДизайн компонентов теперь полностью повторяет функционал кодовой реализации. Учтены все редкие сценарии и краевые состояния. Перед отрисовкой каждого компоненты изучались спецификация+API компонента и все сценарии его использования.\r\n\r\n### **Пример реализации компонента Grid**\r\n\r\nКомпонент Grid — один из самых больших и популярных в линейке Blazor. Представляет собой решение для отображения данных в табличном формате. Включает множество функций для управления данными. Например: фильтрация, группировка, пагинация, сортировка и многое другое.\r\n\r\nОсновную сложность представляет его размер:\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/blazor-3.png\" srcset=\"/images/blog/1x/blazor-3.png 1x, /images/blog/2x/blazor-3@2x.png 2x\" class=\"img-fluid\">\r\n\r\nКомпонент достаточно гибок в настройке. Так как пользователи используют его по-разному. Всё это отражено в дизайне. \r\n\r\nЧтобы отрисовать такой компонент в Figma, задачу разбили на этапе: \r\n\r\n- Изучить решения конкурентов.\r\n- Изучить и собрать файл со скриншотами всех состояний компонента.\r\n- Собрать все под-компоненты.\r\n- Собрать итоговый компонент с разными сценариями использования.\r\n\r\nСобранный в Figma компонент сильно упростил разработку новых фич для грида. Также, упростило создание прототипов для проработки различных сценариев.\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/blazor-4.png\" srcset=\"/images/blog/1x/blazor-4.png 1x, /images/blog/2x/blazor-4@2x.png 2x\" class=\"img-fluid\">\r\n\r\n## Отрисованы новые компоненты\r\n\r\nСоздание новых компонентов включает следующие шаги: \r\n\r\n- Обсудить требования с ПМом.\r\n- Исследовать решения на рынке.\r\n- Утвердить список фич.\r\n- Найти грамотный подход по клавиатурной навигации (поддержка A11Y).\r\n- Отрисовать компонент и все его составляющие.\r\n- Описать компонент в дизайн-токенах.\r\n- Проработать сценарии для демо-стендов.\r\n\r\n### **Пример реализации компонента TreeList**\r\n\r\nКомпонент TreeList — показывает табличные данные в виде древовидной структуры. Пользователи могут сворачивать и разворачивать данные, как им удобно. \r\n\r\nПри подготовке к работе был произведен ресёрч конкурентов, собран список идей и их примерные способы реализации. На каждом этапе приходили синхронизационные встречи с менеджером продукта, разработчиками и другими заинтересованными лицами:\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/blazor-5.png\" srcset=\"/images/blog/1x/blazor-5.png 1x, /images/blog/2x/blazor-5@2x.png 2x\" class=\"img-fluid\">\r\n\r\nСобранный в Figma компонент учитывает все сценарии использовании и состоянии:\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/blazor6.png\" srcset=\"/images/blog/1x/blazor-6.png 1x, /images/blog/2x/blazor-6@2x.png 2x\" class=\"img-fluid\">\r\n\r\n# **Токенизация**\r\n\r\nКаждый компонент представлен в разных темах. Руками отрисовать или исправлять компонент в каждой теме очень дорого и ресурсозатратно.  \r\n\r\nБыло принято решение использовать дизайн-токены:\r\n\r\n- Чтобы быстро обновлять стили компонента под любую тему.\r\n- Гарантировать единообразие решений.\r\n- Использовать токены как мостик между дизайном и разработкой.\r\n\r\nБыла проведена большая работа над созданием архитектуры и структуры дизайн-токенов:\r\n\r\nКаждый компонент имеет полное покрытие токенами:\r\n\r\n- color\r\n- font-weight\r\n- letter-spacing\r\n- line-height\r\n- border-radius\r\n- border-width\r\n- font-size\r\n- text-transform\r\n- opacity\r\n- box-shadow\r\n- size\r\n\r\nТакой подход позволяет быстро создавать новые темы, просто выставляя новые значения в токенах. Для работы использовался плагин Tokens Studio for Figma. Потому что он позволяет покрыть большое количество типов токенов, в отличии от встроенного Figma Variables.\r\n\r\nВ итоге, любой компонент в Figma легко протестировать с другими стилистическими настройками. А разработчики могут передавать значения токенов из Figma напрямую в свои стили.\r\n\r\n# **Документирование**\r\n\r\nДизайн-система описывает себя тремя основными способами:\r\n\r\n- **Компоненты и сценарии в Figma.** Главная точка входа в дизайн-систему.\r\n- **Дизайн-токены.** Служат мостом между дизайном и кодом.\r\n- **Внутренняя документация.** Содержит договоренности и рекомендации по разным аспектам дизайна: правила наименования, структура токенов, правила отрисовки иконок и так далее. Тут же можно найти результаты ресёрчей относящихся к различным дизайн-задачам.\r\n\r\n# **UI Kit**\r\n\r\nОдним из результатов работы над дизайн-системой стал выпуск UI кита в Figma.\r\n\r\n# **Результаты**\r\n\r\n- Получилось собрать крепкий каркас дизайн-системы в Figma.\r\n- Сильно улучшилась коммуникация дизайна и продукт менеджеров.\r\n    - Появились еженедельный созвоны с продукт менеджерами.\r\n    - Работа над задачами стала идти быстрее, на всех этапах.\r\n- Работа между дизайном и разработкой стала эффективнее.\r\n    - Макеты стали намного подробнее.\r\n    - Дополнительный слой информации передают дизайн-токены.\r\n- Появилась внутренняя документация.\r\n- Пользователи получили UI kit.', `Summary`='', `FormatterID`='neasden', `OriginalAlias`='blazor', `Uploads`='a:8:{i:0;s:33:\"/images/1x/maxim-petrov-photo.png\";i:1;s:28:\"/images/blog/1x/blazor-2.png\";i:2;s:28:\"/images/blog/1x/blazor-1.png\";i:3;s:15:\"empty-image.jpg\";i:4;s:28:\"/images/blog/1x/blazor-3.png\";i:5;s:28:\"/images/blog/1x/blazor-4.png\";i:6;s:28:\"/images/blog/1x/blazor-5.png\";i:7;s:27:\"/images/blog/1x/blazor6.png\";}', `IsPublished`='1', `IsCommentable`='0', `IsVisible`='1', `IsFavourite`='1', `Stamp`='1711384202', `LastModified`='1711815719', `Offset`='14400', `IsDST`='0', `IsIndexed`='0', `IsExternal`='0', `ReadCount`='3', `SourceID`='0', `SourceNoteID`='0', `SourceNoteURL`='', `SourceNoteJSONURL`='', `SourceNoteData`='' WHERE `SubsetID`=1 AND (`ID`=5);

UPDATE `e2BlogNotes` SET `SubsetID`='1', `Title`='Дизайн-система Blazor', `Text`='DevExpress Blazor — это набор компонентов пользовательского интерфейса. Активно применяется в приложениях на платформе Blazor и предлагает мощный набор компонентов: таблицы данных, календари, планировщики, выпадающие списки, диалоговые окна и многие другие.\r\n\r\nЗадача — переосмыслить и создать дизайн-систему в Figma на основе существующих артефактов и наработок.\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/blazor-1.png\" srcset=\"/images/blog/1x/blazor-1.png 1x, /images/blog/2x/blazor-1@2x.png 2x\" class=\"img-fluid\">\r\n\r\n# Вводные\r\n\r\nBlazor продукт развивался и вместе с этим росло количество и сложность компонентов. Раньше дизайнер рисовал отдельный макет под каждую задачу. Не было системного подхода и единых правил. Со временем этот подход начал приносить проблемы:\r\n- Разработка начала сильно обгонять дизайн.\r\n- Многие решения по краевым сценариям стали приниматься разработчиками.\r\n- Дизайнер тратил много времени на поиск UI и UX багов на поздних этапах.\r\n- Итоговая фича могла сильно отличаться от нарисованного макета.\r\n\r\nОтдельной проблемой была сложность каждого компонента:\r\n- **Разные темы**. В разных темах компонент не только меняет цвет, но и начинает обладать другими визуальными свойствами.\r\n- **Несколько размеров**. Каждый компонент линейки представлен в трёх размерах. \r\n- **Дополнительные стили**. Большой набор стилистических вариантов для компонентов-атомов.\r\n\r\nНапример, одна только кнопка состоит из 150 вариантов компонента:\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/blazor-2.png\" srcset=\"/images/blog/1x/blazor-2.png 1x, /images/blog/2x/blazor-2@2x.png 2x\" class=\"img-fluid\">\r\n\r\nБыло принято решение менять подход — разработать стандарты, правила постановки задач и проектирования.\r\n\r\n# Задачи\r\n\r\nПеред новой дизайн-системой поставили следующие задачи:\r\n\r\n1. **Оптимизация работы команды на этапах дизайна и разработки.** \r\nРаньше, эти процессы были довольно хаотичны. Дизайнер брал в задачу в работу и изображал примерную реализацию компонента. Многие краевые сценарии не учитывались. Какие-то решения в процессе разработки менялись на ходу. В итоге, разработка затягивалась, фичи резались и итоговый результат сильно отличался от исходной картинки.\r\n2. **Автоматизация и консистентность**. \r\nБольшой размер и сложность компонентов сильно затрудняли внесение любых изменений в дизайн. Даже небольшие стилистические изменения в базовом компоненте, типа кнопки, приводили к огромному количеству работы со стороны дизайнера. Так как нужно было учесть разные темы, размеры и стили.\r\n3. **Консистентность цвета**. \r\nОтдельно стоит отметить проблему с цветом. Многие цвета компонентов в коде рассчитывались с помощью миксинов. Это приводило ко многим проблемам, в том числе, проблемам с контрастностью.\r\n4. **Доступность.**\r\nПользователи продукта стали всё чаще интересоваться, насколько компоненты доступны для разных категорий пользователей. Нужно было сформировать подход, когда дизайнер на этапе проработки компонента учитывает все WCAG 2.2 AA требования.\r\n5. **Централизация знаний.**\r\nМногие знания о тех или иных дизайн-решениях нигде не фиксировались. Единственным источником знания были участвующие в работе на фичей члены команды. Нужно было сформировать систему документации.\r\n6. **UI Kit.**\r\nВсё чаще стали приходить запросы на UI Kit от пользователей. В добавок, это уже давно было у конкурентов.\r\n\r\n# Результат\r\n\r\n## Компоненты в Figma переработаны с нуля\r\n\r\nДизайн компонентов теперь полностью повторяет функционал кодовой реализации. Учтены все редкие сценарии и краевые состояния. Перед отрисовкой каждого компоненты изучались спецификация+API компонента и все сценарии его использования.\r\n\r\n### **Пример реализации компонента Grid**\r\n\r\nКомпонент Grid — один из самых больших и популярных в линейке Blazor. Представляет собой решение для отображения данных в табличном формате. Включает множество функций для управления данными. Например: фильтрация, группировка, пагинация, сортировка и многое другое.\r\n\r\nОсновную сложность представляет его размер:\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/blazor-3.png\" srcset=\"/images/blog/1x/blazor-3.png 1x, /images/blog/2x/blazor-3@2x.png 2x\" class=\"img-fluid\">\r\n\r\nКомпонент достаточно гибок в настройке. Так как пользователи используют его по-разному. Всё это отражено в дизайне. \r\n\r\nЧтобы отрисовать такой компонент в Figma, задачу разбили на этапе: \r\n\r\n- Изучить решения конкурентов.\r\n- Изучить и собрать файл со скриншотами всех состояний компонента.\r\n- Собрать все под-компоненты.\r\n- Собрать итоговый компонент с разными сценариями использования.\r\n\r\nСобранный в Figma компонент сильно упростил разработку новых фич для грида. Также, упростило создание прототипов для проработки различных сценариев.\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/blazor-4.png\" srcset=\"/images/blog/1x/blazor-4.png 1x, /images/blog/2x/blazor-4@2x.png 2x\" class=\"img-fluid\">\r\n\r\n## Отрисованы новые компоненты\r\n\r\nСоздание новых компонентов включает следующие шаги: \r\n\r\n- Обсудить требования с ПМом.\r\n- Исследовать решения на рынке.\r\n- Утвердить список фич.\r\n- Найти грамотный подход по клавиатурной навигации (поддержка A11Y).\r\n- Отрисовать компонент и все его составляющие.\r\n- Описать компонент в дизайн-токенах.\r\n- Проработать сценарии для демо-стендов.\r\n\r\n### **Пример реализации компонента TreeList**\r\n\r\nКомпонент TreeList — показывает табличные данные в виде древовидной структуры. Пользователи могут сворачивать и разворачивать данные, как им удобно. \r\n\r\nПри подготовке к работе был произведен ресёрч конкурентов, собран список идей и их примерные способы реализации. На каждом этапе приходили синхронизационные встречи с менеджером продукта, разработчиками и другими заинтересованными лицами:\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/blazor-5.png\" srcset=\"/images/blog/1x/blazor-5.png 1x, /images/blog/2x/blazor-5@2x.png 2x\" class=\"img-fluid\">\r\n\r\nСобранный в Figma компонент учитывает все сценарии использовании и состоянии:\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/blazor6.png\" srcset=\"/images/blog/1x/blazor-6.png 1x, /images/blog/2x/blazor-6@2x.png 2x\" class=\"img-fluid\">\r\n\r\n# **Токенизация**\r\n\r\nКаждый компонент представлен в разных темах. Руками отрисовать или исправлять компонент в каждой теме очень дорого и ресурсозатратно.  \r\n\r\nБыло принято решение использовать дизайн-токены:\r\n\r\n- Чтобы быстро обновлять стили компонента под любую тему.\r\n- Гарантировать единообразие решений.\r\n- Использовать токены как мостик между дизайном и разработкой.\r\n\r\nБыла проведена большая работа над созданием архитектуры и структуры дизайн-токенов:\r\n\r\nКаждый компонент имеет полное покрытие токенами:\r\n\r\n- color\r\n- font-weight\r\n- letter-spacing\r\n- line-height\r\n- border-radius\r\n- border-width\r\n- font-size\r\n- text-transform\r\n- opacity\r\n- box-shadow\r\n- size\r\n\r\nТакой подход позволяет быстро создавать новые темы, просто выставляя новые значения в токенах. Для работы использовался плагин Tokens Studio for Figma. Потому что он позволяет покрыть большое количество типов токенов, в отличии от встроенного Figma Variables.\r\n\r\nВ итоге, любой компонент в Figma легко протестировать с другими стилистическими настройками. А разработчики могут передавать значения токенов из Figma напрямую в свои стили.\r\n\r\n# **Документирование**\r\n\r\nДизайн-система описывает себя тремя основными способами:\r\n\r\n- **Компоненты и сценарии в Figma.** Главная точка входа в дизайн-систему.\r\n- **Дизайн-токены.** Служат мостом между дизайном и кодом.\r\n- **Внутренняя документация.** Содержит договоренности и рекомендации по разным аспектам дизайна: правила наименования, структура токенов, правила отрисовки иконок и так далее. Тут же можно найти результаты ресёрчей относящихся к различным дизайн-задачам.\r\n\r\n# **UI Kit**\r\n\r\nОдним из результатов работы над дизайн-системой стал выпуск UI кита в Figma.\r\n\r\n# **Результаты**\r\n\r\n- Получилось собрать крепкий каркас дизайн-системы в Figma.\r\n- Сильно улучшилась коммуникация дизайна и продукт менеджеров.\r\n    - Появились еженедельный созвоны с продукт менеджерами.\r\n    - Работа над задачами стала идти быстрее, на всех этапах.\r\n- Работа между дизайном и разработкой стала эффективнее.\r\n    - Макеты стали намного подробнее.\r\n    - Дополнительный слой информации передают дизайн-токены.\r\n- Появилась внутренняя документация.\r\n- Пользователи получили UI kit.', `Summary`='', `FormatterID`='neasden', `OriginalAlias`='blazor', `Uploads`='a:8:{i:0;s:33:\"/images/1x/maxim-petrov-photo.png\";i:1;s:28:\"/images/blog/1x/blazor-2.png\";i:2;s:28:\"/images/blog/1x/blazor-1.png\";i:3;s:15:\"empty-image.jpg\";i:4;s:28:\"/images/blog/1x/blazor-3.png\";i:5;s:28:\"/images/blog/1x/blazor-4.png\";i:6;s:28:\"/images/blog/1x/blazor-5.png\";i:7;s:27:\"/images/blog/1x/blazor6.png\";}', `IsPublished`='1', `IsCommentable`='0', `IsVisible`='1', `IsFavourite`='1', `Stamp`='1711384202', `LastModified`='1711815719', `Offset`='14400', `IsDST`='0', `IsIndexed`='1', `IsExternal`='0', `ReadCount`='3', `SourceID`='0', `SourceNoteID`='0', `SourceNoteURL`='', `SourceNoteJSONURL`='', `SourceNoteData`='' WHERE `SubsetID`=1 AND (`ID`=5);

UPDATE `e2BlogAliases` SET `EntityType`='n', `EntityID`='5', `Alias`='blazor', `Stamp`='1711816867' WHERE `SubsetID`=1 AND (`ID`=6);

UPDATE `e2BlogNotes` SET `SubsetID`='1', `Title`='Дизайн-система Blazor', `Text`='DevExpress Blazor — это набор компонентов пользовательского интерфейса. Активно применяется в приложениях на платформе Blazor и предлагает мощный набор компонентов: таблицы данных, календари, планировщики, выпадающие списки, диалоговые окна и многие другие.\r\n\r\nЗадача — переосмыслить и создать дизайн-систему в Figma на основе существующих артефактов и наработок.\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/blazor-1.png\" srcset=\"/images/blog/1x/blazor-1.png 1x, /images/blog/2x/blazor-1@2x.png 2x\" class=\"img-fluid\">\r\n\r\n# Вводные\r\n\r\nBlazor продукт развивался и вместе с этим росло количество и сложность компонентов. Раньше дизайнер рисовал отдельный макет под каждую задачу. Не было системного подхода и единых правил. Со временем этот подход начал приносить проблемы:\r\n- Разработка начала сильно обгонять дизайн.\r\n- Многие решения по краевым сценариям стали приниматься разработчиками.\r\n- Дизайнер тратил много времени на поиск UI и UX багов на поздних этапах.\r\n- Итоговая фича могла сильно отличаться от нарисованного макета.\r\n\r\nОтдельной проблемой была сложность каждого компонента:\r\n- **Разные темы**. В разных темах компонент не только меняет цвет, но и начинает обладать другими визуальными свойствами.\r\n- **Несколько размеров**. Каждый компонент линейки представлен в трёх размерах. \r\n- **Дополнительные стили**. Большой набор стилистических вариантов для компонентов-атомов.\r\n\r\nНапример, одна только кнопка состоит из 150 вариантов компонента:\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/blazor-2.png\" srcset=\"/images/blog/1x/blazor-2.png 1x, /images/blog/2x/blazor-2@2x.png 2x\" class=\"img-fluid\">\r\n\r\nБыло принято решение менять подход — разработать стандарты, правила постановки задач и проектирования.\r\n\r\n# Задачи\r\n\r\nПеред новой дизайн-системой поставили следующие задачи:\r\n\r\n1. **Оптимизация работы команды на этапах дизайна и разработки.** \r\nРаньше, эти процессы были довольно хаотичны. Дизайнер брал в задачу в работу и изображал примерную реализацию компонента. Многие краевые сценарии не учитывались. Какие-то решения в процессе разработки менялись на ходу. В итоге, разработка затягивалась, фичи резались и итоговый результат сильно отличался от исходной картинки.\r\n2. **Автоматизация и консистентность**. \r\nБольшой размер и сложность компонентов сильно затрудняли внесение любых изменений в дизайн. Даже небольшие стилистические изменения в базовом компоненте, типа кнопки, приводили к огромному количеству работы со стороны дизайнера. Так как нужно было учесть разные темы, размеры и стили.\r\n3. **Консистентность цвета**. \r\nОтдельно стоит отметить проблему с цветом. Многие цвета компонентов в коде рассчитывались с помощью миксинов. Это приводило ко многим проблемам, в том числе, проблемам с контрастностью.\r\n4. **Доступность.**\r\nПользователи продукта стали всё чаще интересоваться, насколько компоненты доступны для разных категорий пользователей. Нужно было сформировать подход, когда дизайнер на этапе проработки компонента учитывает все WCAG 2.2 AA требования.\r\n5. **Централизация знаний.**\r\nМногие знания о тех или иных дизайн-решениях нигде не фиксировались. Единственным источником знания были участвующие в работе на фичей члены команды. Нужно было сформировать систему документации.\r\n6. **UI Kit.**\r\nВсё чаще стали приходить запросы на UI Kit от пользователей. В добавок, это уже давно было у конкурентов.\r\n\r\n# Результат\r\n\r\n## Компоненты в Figma переработаны с нуля\r\n\r\nДизайн компонентов теперь полностью повторяет функционал кодовой реализации. Учтены все редкие сценарии и краевые состояния. Перед отрисовкой каждого компоненты изучались спецификация+API компонента и все сценарии его использования.\r\n\r\n### **Пример реализации компонента Grid**\r\n\r\nКомпонент Grid — один из самых больших и популярных в линейке Blazor. Представляет собой решение для отображения данных в табличном формате. Включает множество функций для управления данными. Например: фильтрация, группировка, пагинация, сортировка и многое другое.\r\n\r\nОсновную сложность представляет его размер:\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/blazor-3.png\" srcset=\"/images/blog/1x/blazor-3.png 1x, /images/blog/2x/blazor-3@2x.png 2x\" class=\"img-fluid\">\r\n\r\nКомпонент достаточно гибок в настройке. Так как пользователи используют его по-разному. Всё это отражено в дизайне. \r\n\r\nЧтобы отрисовать такой компонент в Figma, задачу разбили на этапе: \r\n\r\n- Изучить решения конкурентов.\r\n- Изучить и собрать файл со скриншотами всех состояний компонента.\r\n- Собрать все под-компоненты.\r\n- Собрать итоговый компонент с разными сценариями использования.\r\n\r\nСобранный в Figma компонент сильно упростил разработку новых фич для грида. Также, упростило создание прототипов для проработки различных сценариев.\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/blazor-4.png\" srcset=\"/images/blog/1x/blazor-4.png 1x, /images/blog/2x/blazor-4@2x.png 2x\" class=\"img-fluid\">\r\n\r\n## Отрисованы новые компоненты\r\n\r\nСоздание новых компонентов включает следующие шаги: \r\n\r\n- Обсудить требования с ПМом.\r\n- Исследовать решения на рынке.\r\n- Утвердить список фич.\r\n- Найти грамотный подход по клавиатурной навигации (поддержка A11Y).\r\n- Отрисовать компонент и все его составляющие.\r\n- Описать компонент в дизайн-токенах.\r\n- Проработать сценарии для демо-стендов.\r\n\r\n### **Пример реализации компонента TreeList**\r\n\r\nКомпонент TreeList — показывает табличные данные в виде древовидной структуры. Пользователи могут сворачивать и разворачивать данные, как им удобно. \r\n\r\nПри подготовке к работе был произведен ресёрч конкурентов, собран список идей и их примерные способы реализации. На каждом этапе приходили синхронизационные встречи с менеджером продукта, разработчиками и другими заинтересованными лицами:\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/blazor-5.png\" srcset=\"/images/blog/1x/blazor-5.png 1x, /images/blog/2x/blazor-5@2x.png 2x\" class=\"img-fluid\">\r\n\r\nСобранный в Figma компонент учитывает все сценарии использовании и состоянии:\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/blazor6.png\" srcset=\"/images/blog/1x/blazor-6.png 1x, /images/blog/2x/blazor-6@2x.png 2x\" class=\"img-fluid\">\r\n\r\n# **Токенизация**\r\n\r\nКаждый компонент представлен в разных темах. Руками отрисовать или исправлять компонент в каждой теме очень дорого и ресурсозатратно.  \r\n\r\nБыло принято решение использовать дизайн-токены:\r\n\r\n- Чтобы быстро обновлять стили компонента под любую тему.\r\n- Гарантировать единообразие решений.\r\n- Использовать токены как мостик между дизайном и разработкой.\r\n\r\nБыла проведена большая работа над созданием архитектуры и структуры дизайн-токенов:\r\n\r\nКаждый компонент имеет полное покрытие токенами:\r\n\r\n- color\r\n- font-weight\r\n- letter-spacing\r\n- line-height\r\n- border-radius\r\n- border-width\r\n- font-size\r\n- text-transform\r\n- opacity\r\n- box-shadow\r\n- size\r\n\r\nТакой подход позволяет быстро создавать новые темы, просто выставляя новые значения в токенах. Для работы использовался плагин Tokens Studio for Figma. Потому что он позволяет покрыть большое количество типов токенов, в отличии от встроенного Figma Variables.\r\n\r\nВ итоге, любой компонент в Figma легко протестировать с другими стилистическими настройками. А разработчики могут передавать значения токенов из Figma напрямую в свои стили.\r\n\r\n# **Документирование**\r\n\r\nДизайн-система описывает себя тремя основными способами:\r\n\r\n- **Компоненты и сценарии в Figma.** Главная точка входа в дизайн-систему.\r\n- **Дизайн-токены.** Служат мостом между дизайном и кодом.\r\n- **Внутренняя документация.** Содержит договоренности и рекомендации по разным аспектам дизайна: правила наименования, структура токенов, правила отрисовки иконок и так далее. Тут же можно найти результаты ресёрчей относящихся к различным дизайн-задачам.\r\n\r\n# **UI Kit**\r\n\r\nОдним из результатов работы над дизайн-системой стал выпуск UI кита в Figma.\r\n\r\n# **Результаты**\r\n\r\n- Получилось собрать крепкий каркас дизайн-системы в Figma.\r\n- Сильно улучшилась коммуникация дизайна и продукт менеджеров.\r\n    - Появились еженедельный созвоны с продукт менеджерами.\r\n    - Работа над задачами стала идти быстрее, на всех этапах.\r\n- Работа между дизайном и разработкой стала эффективнее.\r\n    - Макеты стали намного подробнее.\r\n    - Дополнительный слой информации передают дизайн-токены.\r\n- Появилась внутренняя документация.\r\n- Пользователи получили UI kit.', `Summary`='', `FormatterID`='neasden', `OriginalAlias`='blazor', `Uploads`='a:8:{i:0;s:33:\"/images/1x/maxim-petrov-photo.png\";i:1;s:28:\"/images/blog/1x/blazor-2.png\";i:2;s:28:\"/images/blog/1x/blazor-1.png\";i:3;s:15:\"empty-image.jpg\";i:4;s:28:\"/images/blog/1x/blazor-3.png\";i:5;s:28:\"/images/blog/1x/blazor-4.png\";i:6;s:28:\"/images/blog/1x/blazor-5.png\";i:7;s:27:\"/images/blog/1x/blazor6.png\";}', `IsPublished`='1', `IsCommentable`='0', `IsVisible`='1', `IsFavourite`='1', `Stamp`='1711384202', `LastModified`='1711816867', `Offset`='14400', `IsDST`='0', `IsIndexed`='0', `IsExternal`='0', `ReadCount`='3', `SourceID`='0', `SourceNoteID`='0', `SourceNoteURL`='', `SourceNoteJSONURL`='', `SourceNoteData`='' WHERE `SubsetID`=1 AND (`ID`=5);

UPDATE `e2BlogNotes` SET `SubsetID`='1', `Title`='Дизайн-система Blazor', `Text`='DevExpress Blazor — это набор компонентов пользовательского интерфейса. Активно применяется в приложениях на платформе Blazor и предлагает мощный набор компонентов: таблицы данных, календари, планировщики, выпадающие списки, диалоговые окна и многие другие.\r\n\r\nЗадача — переосмыслить и создать дизайн-систему в Figma на основе существующих артефактов и наработок.\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/blazor-1.png\" srcset=\"/images/blog/1x/blazor-1.png 1x, /images/blog/2x/blazor-1@2x.png 2x\" class=\"img-fluid\">\r\n\r\n# Вводные\r\n\r\nBlazor продукт развивался и вместе с этим росло количество и сложность компонентов. Раньше дизайнер рисовал отдельный макет под каждую задачу. Не было системного подхода и единых правил. Со временем этот подход начал приносить проблемы:\r\n- Разработка начала сильно обгонять дизайн.\r\n- Многие решения по краевым сценариям стали приниматься разработчиками.\r\n- Дизайнер тратил много времени на поиск UI и UX багов на поздних этапах.\r\n- Итоговая фича могла сильно отличаться от нарисованного макета.\r\n\r\nОтдельной проблемой была сложность каждого компонента:\r\n- **Разные темы**. В разных темах компонент не только меняет цвет, но и начинает обладать другими визуальными свойствами.\r\n- **Несколько размеров**. Каждый компонент линейки представлен в трёх размерах. \r\n- **Дополнительные стили**. Большой набор стилистических вариантов для компонентов-атомов.\r\n\r\nНапример, одна только кнопка состоит из 150 вариантов компонента:\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/blazor-2.png\" srcset=\"/images/blog/1x/blazor-2.png 1x, /images/blog/2x/blazor-2@2x.png 2x\" class=\"img-fluid\">\r\n\r\nБыло принято решение менять подход — разработать стандарты, правила постановки задач и проектирования.\r\n\r\n# Задачи\r\n\r\nПеред новой дизайн-системой поставили следующие задачи:\r\n\r\n1. **Оптимизация работы команды на этапах дизайна и разработки.** \r\nРаньше, эти процессы были довольно хаотичны. Дизайнер брал в задачу в работу и изображал примерную реализацию компонента. Многие краевые сценарии не учитывались. Какие-то решения в процессе разработки менялись на ходу. В итоге, разработка затягивалась, фичи резались и итоговый результат сильно отличался от исходной картинки.\r\n2. **Автоматизация и консистентность**. \r\nБольшой размер и сложность компонентов сильно затрудняли внесение любых изменений в дизайн. Даже небольшие стилистические изменения в базовом компоненте, типа кнопки, приводили к огромному количеству работы со стороны дизайнера. Так как нужно было учесть разные темы, размеры и стили.\r\n3. **Консистентность цвета**. \r\nОтдельно стоит отметить проблему с цветом. Многие цвета компонентов в коде рассчитывались с помощью миксинов. Это приводило ко многим проблемам, в том числе, проблемам с контрастностью.\r\n4. **Доступность.**\r\nПользователи продукта стали всё чаще интересоваться, насколько компоненты доступны для разных категорий пользователей. Нужно было сформировать подход, когда дизайнер на этапе проработки компонента учитывает все WCAG 2.2 AA требования.\r\n5. **Централизация знаний.**\r\nМногие знания о тех или иных дизайн-решениях нигде не фиксировались. Единственным источником знания были участвующие в работе на фичей члены команды. Нужно было сформировать систему документации.\r\n6. **UI Kit.**\r\nВсё чаще стали приходить запросы на UI Kit от пользователей. В добавок, это уже давно было у конкурентов.\r\n\r\n# Результат\r\n\r\n## Компоненты в Figma переработаны с нуля\r\n\r\nДизайн компонентов теперь полностью повторяет функционал кодовой реализации. Учтены все редкие сценарии и краевые состояния. Перед отрисовкой каждого компоненты изучались спецификация+API компонента и все сценарии его использования.\r\n\r\n### **Пример реализации компонента Grid**\r\n\r\nКомпонент Grid — один из самых больших и популярных в линейке Blazor. Представляет собой решение для отображения данных в табличном формате. Включает множество функций для управления данными. Например: фильтрация, группировка, пагинация, сортировка и многое другое.\r\n\r\nОсновную сложность представляет его размер:\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/blazor-3.png\" srcset=\"/images/blog/1x/blazor-3.png 1x, /images/blog/2x/blazor-3@2x.png 2x\" class=\"img-fluid\">\r\n\r\nКомпонент достаточно гибок в настройке. Так как пользователи используют его по-разному. Всё это отражено в дизайне. \r\n\r\nЧтобы отрисовать такой компонент в Figma, задачу разбили на этапе: \r\n\r\n- Изучить решения конкурентов.\r\n- Изучить и собрать файл со скриншотами всех состояний компонента.\r\n- Собрать все под-компоненты.\r\n- Собрать итоговый компонент с разными сценариями использования.\r\n\r\nСобранный в Figma компонент сильно упростил разработку новых фич для грида. Также, упростило создание прототипов для проработки различных сценариев.\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/blazor-4.png\" srcset=\"/images/blog/1x/blazor-4.png 1x, /images/blog/2x/blazor-4@2x.png 2x\" class=\"img-fluid\">\r\n\r\n## Отрисованы новые компоненты\r\n\r\nСоздание новых компонентов включает следующие шаги: \r\n\r\n- Обсудить требования с ПМом.\r\n- Исследовать решения на рынке.\r\n- Утвердить список фич.\r\n- Найти грамотный подход по клавиатурной навигации (поддержка A11Y).\r\n- Отрисовать компонент и все его составляющие.\r\n- Описать компонент в дизайн-токенах.\r\n- Проработать сценарии для демо-стендов.\r\n\r\n### **Пример реализации компонента TreeList**\r\n\r\nКомпонент TreeList — показывает табличные данные в виде древовидной структуры. Пользователи могут сворачивать и разворачивать данные, как им удобно. \r\n\r\nПри подготовке к работе был произведен ресёрч конкурентов, собран список идей и их примерные способы реализации. На каждом этапе приходили синхронизационные встречи с менеджером продукта, разработчиками и другими заинтересованными лицами:\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/blazor-5.png\" srcset=\"/images/blog/1x/blazor-5.png 1x, /images/blog/2x/blazor-5@2x.png 2x\" class=\"img-fluid\">\r\n\r\nСобранный в Figma компонент учитывает все сценарии использовании и состоянии:\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/blazor6.png\" srcset=\"/images/blog/1x/blazor-6.png 1x, /images/blog/2x/blazor-6@2x.png 2x\" class=\"img-fluid\">\r\n\r\n# **Токенизация**\r\n\r\nКаждый компонент представлен в разных темах. Руками отрисовать или исправлять компонент в каждой теме очень дорого и ресурсозатратно.  \r\n\r\nБыло принято решение использовать дизайн-токены:\r\n\r\n- Чтобы быстро обновлять стили компонента под любую тему.\r\n- Гарантировать единообразие решений.\r\n- Использовать токены как мостик между дизайном и разработкой.\r\n\r\nБыла проведена большая работа над созданием архитектуры и структуры дизайн-токенов:\r\n\r\nКаждый компонент имеет полное покрытие токенами:\r\n\r\n- color\r\n- font-weight\r\n- letter-spacing\r\n- line-height\r\n- border-radius\r\n- border-width\r\n- font-size\r\n- text-transform\r\n- opacity\r\n- box-shadow\r\n- size\r\n\r\nТакой подход позволяет быстро создавать новые темы, просто выставляя новые значения в токенах. Для работы использовался плагин Tokens Studio for Figma. Потому что он позволяет покрыть большое количество типов токенов, в отличии от встроенного Figma Variables.\r\n\r\nВ итоге, любой компонент в Figma легко протестировать с другими стилистическими настройками. А разработчики могут передавать значения токенов из Figma напрямую в свои стили.\r\n\r\n# **Документирование**\r\n\r\nДизайн-система описывает себя тремя основными способами:\r\n\r\n- **Компоненты и сценарии в Figma.** Главная точка входа в дизайн-систему.\r\n- **Дизайн-токены.** Служат мостом между дизайном и кодом.\r\n- **Внутренняя документация.** Содержит договоренности и рекомендации по разным аспектам дизайна: правила наименования, структура токенов, правила отрисовки иконок и так далее. Тут же можно найти результаты ресёрчей относящихся к различным дизайн-задачам.\r\n\r\n# **UI Kit**\r\n\r\nОдним из результатов работы над дизайн-системой стал выпуск UI кита в Figma.\r\n\r\n# **Результаты**\r\n\r\n- Получилось собрать крепкий каркас дизайн-системы в Figma.\r\n- Сильно улучшилась коммуникация дизайна и продукт менеджеров.\r\n    - Появились еженедельный созвоны с продукт менеджерами.\r\n    - Работа над задачами стала идти быстрее, на всех этапах.\r\n- Работа между дизайном и разработкой стала эффективнее.\r\n    - Макеты стали намного подробнее.\r\n    - Дополнительный слой информации передают дизайн-токены.\r\n- Появилась внутренняя документация.\r\n- Пользователи получили UI kit.', `Summary`='', `FormatterID`='neasden', `OriginalAlias`='blazor', `Uploads`='a:8:{i:0;s:33:\"/images/1x/maxim-petrov-photo.png\";i:1;s:28:\"/images/blog/1x/blazor-2.png\";i:2;s:28:\"/images/blog/1x/blazor-1.png\";i:3;s:15:\"empty-image.jpg\";i:4;s:28:\"/images/blog/1x/blazor-3.png\";i:5;s:28:\"/images/blog/1x/blazor-4.png\";i:6;s:28:\"/images/blog/1x/blazor-5.png\";i:7;s:27:\"/images/blog/1x/blazor6.png\";}', `IsPublished`='1', `IsCommentable`='0', `IsVisible`='1', `IsFavourite`='1', `Stamp`='1711384202', `LastModified`='1711816867', `Offset`='14400', `IsDST`='0', `IsIndexed`='1', `IsExternal`='0', `ReadCount`='3', `SourceID`='0', `SourceNoteID`='0', `SourceNoteURL`='', `SourceNoteJSONURL`='', `SourceNoteData`='' WHERE `SubsetID`=1 AND (`ID`=5);

UPDATE `e2BlogAliases` SET `EntityType`='n', `EntityID`='5', `Alias`='blazor', `Stamp`='1711817032' WHERE `SubsetID`=1 AND (`ID`=6);

UPDATE `e2BlogNotes` SET `SubsetID`='1', `Title`='Дизайн-система Blazor', `Text`='DevExpress Blazor — это набор компонентов пользовательского интерфейса. Активно применяется в приложениях на платформе Blazor и предлагает мощный набор компонентов: таблицы данных, календари, планировщики, выпадающие списки, диалоговые окна и многие другие.\r\n\r\nЗадача — переосмыслить и создать дизайн-систему в Figma на основе существующих артефактов и наработок.\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/blazor-1.png\" srcset=\"/images/blog/1x/blazor-1.png 1x, /images/blog/2x/blazor-1@2x.png 2x\" class=\"img-fluid\">\r\n\r\n# Вводные\r\n\r\nBlazor продукт развивался и вместе с этим росло количество и сложность компонентов. Раньше дизайнер рисовал отдельный макет под каждую задачу. Не было системного подхода и единых правил. Со временем этот подход начал приносить проблемы:\r\n- Разработка начала сильно обгонять дизайн.\r\n- Многие решения по краевым сценариям стали приниматься разработчиками.\r\n- Дизайнер тратил много времени на поиск UI и UX багов на поздних этапах.\r\n- Итоговая фича могла сильно отличаться от нарисованного макета.\r\n\r\nОтдельной проблемой была сложность каждого компонента:\r\n- **Разные темы**. В разных темах компонент не только меняет цвет, но и начинает обладать другими визуальными свойствами.\r\n- **Несколько размеров**. Каждый компонент линейки представлен в трёх размерах. \r\n- **Дополнительные стили**. Большой набор стилистических вариантов для компонентов-атомов.\r\n\r\nНапример, одна только кнопка состоит из 150 вариантов компонента:\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/blazor-2.png\" srcset=\"/images/blog/1x/blazor-2.png 1x, /images/blog/2x/blazor-2@2x.png 2x\" class=\"img-fluid\">\r\n\r\nБыло принято решение менять подход — разработать стандарты, правила постановки задач и проектирования.\r\n\r\n# Задачи\r\n\r\nПеред новой дизайн-системой поставили следующие задачи:\r\n\r\n1. **Оптимизация работы команды на этапах дизайна и разработки.** \r\nРаньше, эти процессы были довольно хаотичны. Дизайнер брал в задачу в работу и изображал примерную реализацию компонента. Многие краевые сценарии не учитывались. Какие-то решения в процессе разработки менялись на ходу. В итоге, разработка затягивалась, фичи резались и итоговый результат сильно отличался от исходной картинки.\r\n2. **Автоматизация и консистентность**. \r\nБольшой размер и сложность компонентов сильно затрудняли внесение любых изменений в дизайн. Даже небольшие стилистические изменения в базовом компоненте, типа кнопки, приводили к огромному количеству работы со стороны дизайнера. Так как нужно было учесть разные темы, размеры и стили.\r\n3. **Консистентность цвета**. \r\nОтдельно стоит отметить проблему с цветом. Многие цвета компонентов в коде рассчитывались с помощью миксинов. Это приводило ко многим проблемам, в том числе, проблемам с контрастностью.\r\n4. **Доступность.**\r\nПользователи продукта стали всё чаще интересоваться, насколько компоненты доступны для разных категорий пользователей. Нужно было сформировать подход, когда дизайнер на этапе проработки компонента учитывает все WCAG 2.2 AA требования.\r\n5. **Централизация знаний.**\r\nМногие знания о тех или иных дизайн-решениях нигде не фиксировались. Единственным источником знания были участвующие в работе на фичей члены команды. Нужно было сформировать систему документации.\r\n6. **UI Kit.**\r\nВсё чаще стали приходить запросы на UI Kit от пользователей. В добавок, это уже давно было у конкурентов.\r\n\r\n# Результат\r\n\r\n## Компоненты в Figma переработаны с нуля\r\n\r\nДизайн компонентов теперь полностью повторяет функционал кодовой реализации. Учтены все редкие сценарии и краевые состояния. Перед отрисовкой каждого компоненты изучались спецификация+API компонента и все сценарии его использования.\r\n\r\n### **Пример реализации компонента Grid**\r\n\r\nКомпонент Grid — один из самых больших и популярных в линейке Blazor. Представляет собой решение для отображения данных в табличном формате. Включает множество функций для управления данными. Например: фильтрация, группировка, пагинация, сортировка и многое другое.\r\n\r\nОсновную сложность представляет его размер:\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/blazor-3.png\" srcset=\"/images/blog/1x/blazor-3.png 1x, /images/blog/2x/blazor-3@2x.png 2x\" class=\"img-fluid\">\r\n\r\nКомпонент достаточно гибок в настройке. Так как пользователи используют его по-разному. Всё это отражено в дизайне. \r\n\r\nЧтобы отрисовать такой компонент в Figma, задачу разбили на этапе: \r\n\r\n- Изучить решения конкурентов.\r\n- Изучить и собрать файл со скриншотами всех состояний компонента.\r\n- Собрать все под-компоненты.\r\n- Собрать итоговый компонент с разными сценариями использования.\r\n\r\nСобранный в Figma компонент сильно упростил разработку новых фич для грида. Также, упростило создание прототипов для проработки различных сценариев.\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/blazor-4.png\" srcset=\"/images/blog/1x/blazor-4.png 1x, /images/blog/2x/blazor-4@2x.png 2x\" class=\"img-fluid\">\r\n\r\n## Отрисованы новые компоненты\r\n\r\nСоздание новых компонентов включает следующие шаги: \r\n\r\n- Обсудить требования с ПМом.\r\n- Исследовать решения на рынке.\r\n- Утвердить список фич.\r\n- Найти грамотный подход по клавиатурной навигации (поддержка A11Y).\r\n- Отрисовать компонент и все его составляющие.\r\n- Описать компонент в дизайн-токенах.\r\n- Проработать сценарии для демо-стендов.\r\n\r\n### **Пример реализации компонента TreeList**\r\n\r\nКомпонент TreeList — показывает табличные данные в виде древовидной структуры. Пользователи могут сворачивать и разворачивать данные, как им удобно. \r\n\r\nПри подготовке к работе был произведен ресёрч конкурентов, собран список идей и их примерные способы реализации. На каждом этапе приходили синхронизационные встречи с менеджером продукта, разработчиками и другими заинтересованными лицами:\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/blazor-5.png\" srcset=\"/images/blog/1x/blazor-5.png 1x, /images/blog/2x/blazor-5@2x.png 2x\" class=\"img-fluid\">\r\n\r\nСобранный в Figma компонент учитывает все сценарии использовании и состоянии:\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/blazor6.png\" srcset=\"/images/blog/1x/blazor-6.png 1x, /images/blog/2x/blazor-6@2x.png 2x\" class=\"img-fluid\">\r\n\r\n# **Токенизация**\r\n\r\nКаждый компонент представлен в разных темах. Руками отрисовать или исправлять компонент в каждой теме очень дорого и ресурсозатратно.  \r\n\r\nБыло принято решение использовать дизайн-токены:\r\n\r\n- Чтобы быстро обновлять стили компонента под любую тему.\r\n- Гарантировать единообразие решений.\r\n- Использовать токены как мостик между дизайном и разработкой.\r\n\r\nБыла проведена большая работа над созданием архитектуры и структуры дизайн-токенов:\r\n\r\nКаждый компонент имеет полное покрытие токенами:\r\n\r\n- color,\r\n- font-weight,\r\n- letter-spacing,\r\n- line-height,\r\n- border-radius,\r\n- border-width,\r\n- font-size,\r\n- text-transform,\r\n- opacity,\r\n- box-shadow,\r\n- size.\r\n\r\nТакой подход позволяет быстро создавать новые темы, просто выставляя новые значения в токенах. Для работы использовался плагин Tokens Studio for Figma. Потому что он позволяет покрыть большое количество типов токенов, в отличии от встроенного Figma Variables.\r\n\r\nВ итоге, любой компонент в Figma легко протестировать с другими стилистическими настройками. А разработчики могут передавать значения токенов из Figma напрямую в свои стили.\r\n\r\n# **Документирование**\r\n\r\nДизайн-система описывает себя тремя основными способами:\r\n\r\n- **Компоненты и сценарии в Figma.** Главная точка входа в дизайн-систему.\r\n- **Дизайн-токены.** Служат мостом между дизайном и кодом.\r\n- **Внутренняя документация.** Содержит договоренности и рекомендации по разным аспектам дизайна: правила наименования, структура токенов, правила отрисовки иконок и так далее. Тут же можно найти результаты ресёрчей относящихся к различным дизайн-задачам.\r\n\r\n# **UI Kit**\r\n\r\nОдним из результатов работы над дизайн-системой стал выпуск UI кита в Figma.\r\n\r\n# **Результаты**\r\n\r\n- Получилось собрать крепкий каркас дизайн-системы в Figma.\r\n- Сильно улучшилась коммуникация дизайна и продукт менеджеров.\r\n    - Появились еженедельный созвоны с продукт менеджерами.\r\n    - Работа над задачами стала идти быстрее, на всех этапах.\r\n- Работа между дизайном и разработкой стала эффективнее.\r\n    - Макеты стали намного подробнее.\r\n    - Дополнительный слой информации передают дизайн-токены.\r\n- Появилась внутренняя документация.\r\n- Пользователи получили UI kit.', `Summary`='', `FormatterID`='neasden', `OriginalAlias`='blazor', `Uploads`='a:8:{i:0;s:33:\"/images/1x/maxim-petrov-photo.png\";i:1;s:28:\"/images/blog/1x/blazor-2.png\";i:2;s:28:\"/images/blog/1x/blazor-1.png\";i:3;s:15:\"empty-image.jpg\";i:4;s:28:\"/images/blog/1x/blazor-3.png\";i:5;s:28:\"/images/blog/1x/blazor-4.png\";i:6;s:28:\"/images/blog/1x/blazor-5.png\";i:7;s:27:\"/images/blog/1x/blazor6.png\";}', `IsPublished`='1', `IsCommentable`='0', `IsVisible`='1', `IsFavourite`='1', `Stamp`='1711384202', `LastModified`='1711817032', `Offset`='14400', `IsDST`='0', `IsIndexed`='0', `IsExternal`='0', `ReadCount`='3', `SourceID`='0', `SourceNoteID`='0', `SourceNoteURL`='', `SourceNoteJSONURL`='', `SourceNoteData`='' WHERE `SubsetID`=1 AND (`ID`=5);

UPDATE `e2BlogNotes` SET `SubsetID`='1', `Title`='Дизайн-система Blazor', `Text`='DevExpress Blazor — это набор компонентов пользовательского интерфейса. Активно применяется в приложениях на платформе Blazor и предлагает мощный набор компонентов: таблицы данных, календари, планировщики, выпадающие списки, диалоговые окна и многие другие.\r\n\r\nЗадача — переосмыслить и создать дизайн-систему в Figma на основе существующих артефактов и наработок.\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/blazor-1.png\" srcset=\"/images/blog/1x/blazor-1.png 1x, /images/blog/2x/blazor-1@2x.png 2x\" class=\"img-fluid\">\r\n\r\n# Вводные\r\n\r\nBlazor продукт развивался и вместе с этим росло количество и сложность компонентов. Раньше дизайнер рисовал отдельный макет под каждую задачу. Не было системного подхода и единых правил. Со временем этот подход начал приносить проблемы:\r\n- Разработка начала сильно обгонять дизайн.\r\n- Многие решения по краевым сценариям стали приниматься разработчиками.\r\n- Дизайнер тратил много времени на поиск UI и UX багов на поздних этапах.\r\n- Итоговая фича могла сильно отличаться от нарисованного макета.\r\n\r\nОтдельной проблемой была сложность каждого компонента:\r\n- **Разные темы**. В разных темах компонент не только меняет цвет, но и начинает обладать другими визуальными свойствами.\r\n- **Несколько размеров**. Каждый компонент линейки представлен в трёх размерах. \r\n- **Дополнительные стили**. Большой набор стилистических вариантов для компонентов-атомов.\r\n\r\nНапример, одна только кнопка состоит из 150 вариантов компонента:\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/blazor-2.png\" srcset=\"/images/blog/1x/blazor-2.png 1x, /images/blog/2x/blazor-2@2x.png 2x\" class=\"img-fluid\">\r\n\r\nБыло принято решение менять подход — разработать стандарты, правила постановки задач и проектирования.\r\n\r\n# Задачи\r\n\r\nПеред новой дизайн-системой поставили следующие задачи:\r\n\r\n1. **Оптимизация работы команды на этапах дизайна и разработки.** \r\nРаньше, эти процессы были довольно хаотичны. Дизайнер брал в задачу в работу и изображал примерную реализацию компонента. Многие краевые сценарии не учитывались. Какие-то решения в процессе разработки менялись на ходу. В итоге, разработка затягивалась, фичи резались и итоговый результат сильно отличался от исходной картинки.\r\n2. **Автоматизация и консистентность**. \r\nБольшой размер и сложность компонентов сильно затрудняли внесение любых изменений в дизайн. Даже небольшие стилистические изменения в базовом компоненте, типа кнопки, приводили к огромному количеству работы со стороны дизайнера. Так как нужно было учесть разные темы, размеры и стили.\r\n3. **Консистентность цвета**. \r\nОтдельно стоит отметить проблему с цветом. Многие цвета компонентов в коде рассчитывались с помощью миксинов. Это приводило ко многим проблемам, в том числе, проблемам с контрастностью.\r\n4. **Доступность.**\r\nПользователи продукта стали всё чаще интересоваться, насколько компоненты доступны для разных категорий пользователей. Нужно было сформировать подход, когда дизайнер на этапе проработки компонента учитывает все WCAG 2.2 AA требования.\r\n5. **Централизация знаний.**\r\nМногие знания о тех или иных дизайн-решениях нигде не фиксировались. Единственным источником знания были участвующие в работе на фичей члены команды. Нужно было сформировать систему документации.\r\n6. **UI Kit.**\r\nВсё чаще стали приходить запросы на UI Kit от пользователей. В добавок, это уже давно было у конкурентов.\r\n\r\n# Результат\r\n\r\n## Компоненты в Figma переработаны с нуля\r\n\r\nДизайн компонентов теперь полностью повторяет функционал кодовой реализации. Учтены все редкие сценарии и краевые состояния. Перед отрисовкой каждого компоненты изучались спецификация+API компонента и все сценарии его использования.\r\n\r\n### **Пример реализации компонента Grid**\r\n\r\nКомпонент Grid — один из самых больших и популярных в линейке Blazor. Представляет собой решение для отображения данных в табличном формате. Включает множество функций для управления данными. Например: фильтрация, группировка, пагинация, сортировка и многое другое.\r\n\r\nОсновную сложность представляет его размер:\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/blazor-3.png\" srcset=\"/images/blog/1x/blazor-3.png 1x, /images/blog/2x/blazor-3@2x.png 2x\" class=\"img-fluid\">\r\n\r\nКомпонент достаточно гибок в настройке. Так как пользователи используют его по-разному. Всё это отражено в дизайне. \r\n\r\nЧтобы отрисовать такой компонент в Figma, задачу разбили на этапе: \r\n\r\n- Изучить решения конкурентов.\r\n- Изучить и собрать файл со скриншотами всех состояний компонента.\r\n- Собрать все под-компоненты.\r\n- Собрать итоговый компонент с разными сценариями использования.\r\n\r\nСобранный в Figma компонент сильно упростил разработку новых фич для грида. Также, упростило создание прототипов для проработки различных сценариев.\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/blazor-4.png\" srcset=\"/images/blog/1x/blazor-4.png 1x, /images/blog/2x/blazor-4@2x.png 2x\" class=\"img-fluid\">\r\n\r\n## Отрисованы новые компоненты\r\n\r\nСоздание новых компонентов включает следующие шаги: \r\n\r\n- Обсудить требования с ПМом.\r\n- Исследовать решения на рынке.\r\n- Утвердить список фич.\r\n- Найти грамотный подход по клавиатурной навигации (поддержка A11Y).\r\n- Отрисовать компонент и все его составляющие.\r\n- Описать компонент в дизайн-токенах.\r\n- Проработать сценарии для демо-стендов.\r\n\r\n### **Пример реализации компонента TreeList**\r\n\r\nКомпонент TreeList — показывает табличные данные в виде древовидной структуры. Пользователи могут сворачивать и разворачивать данные, как им удобно. \r\n\r\nПри подготовке к работе был произведен ресёрч конкурентов, собран список идей и их примерные способы реализации. На каждом этапе приходили синхронизационные встречи с менеджером продукта, разработчиками и другими заинтересованными лицами:\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/blazor-5.png\" srcset=\"/images/blog/1x/blazor-5.png 1x, /images/blog/2x/blazor-5@2x.png 2x\" class=\"img-fluid\">\r\n\r\nСобранный в Figma компонент учитывает все сценарии использовании и состоянии:\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/blazor6.png\" srcset=\"/images/blog/1x/blazor-6.png 1x, /images/blog/2x/blazor-6@2x.png 2x\" class=\"img-fluid\">\r\n\r\n# **Токенизация**\r\n\r\nКаждый компонент представлен в разных темах. Руками отрисовать или исправлять компонент в каждой теме очень дорого и ресурсозатратно.  \r\n\r\nБыло принято решение использовать дизайн-токены:\r\n\r\n- Чтобы быстро обновлять стили компонента под любую тему.\r\n- Гарантировать единообразие решений.\r\n- Использовать токены как мостик между дизайном и разработкой.\r\n\r\nБыла проведена большая работа над созданием архитектуры и структуры дизайн-токенов:\r\n\r\nКаждый компонент имеет полное покрытие токенами:\r\n\r\n- color,\r\n- font-weight,\r\n- letter-spacing,\r\n- line-height,\r\n- border-radius,\r\n- border-width,\r\n- font-size,\r\n- text-transform,\r\n- opacity,\r\n- box-shadow,\r\n- size.\r\n\r\nТакой подход позволяет быстро создавать новые темы, просто выставляя новые значения в токенах. Для работы использовался плагин Tokens Studio for Figma. Потому что он позволяет покрыть большое количество типов токенов, в отличии от встроенного Figma Variables.\r\n\r\nВ итоге, любой компонент в Figma легко протестировать с другими стилистическими настройками. А разработчики могут передавать значения токенов из Figma напрямую в свои стили.\r\n\r\n# **Документирование**\r\n\r\nДизайн-система описывает себя тремя основными способами:\r\n\r\n- **Компоненты и сценарии в Figma.** Главная точка входа в дизайн-систему.\r\n- **Дизайн-токены.** Служат мостом между дизайном и кодом.\r\n- **Внутренняя документация.** Содержит договоренности и рекомендации по разным аспектам дизайна: правила наименования, структура токенов, правила отрисовки иконок и так далее. Тут же можно найти результаты ресёрчей относящихся к различным дизайн-задачам.\r\n\r\n# **UI Kit**\r\n\r\nОдним из результатов работы над дизайн-системой стал выпуск UI кита в Figma.\r\n\r\n# **Результаты**\r\n\r\n- Получилось собрать крепкий каркас дизайн-системы в Figma.\r\n- Сильно улучшилась коммуникация дизайна и продукт менеджеров.\r\n    - Появились еженедельный созвоны с продукт менеджерами.\r\n    - Работа над задачами стала идти быстрее, на всех этапах.\r\n- Работа между дизайном и разработкой стала эффективнее.\r\n    - Макеты стали намного подробнее.\r\n    - Дополнительный слой информации передают дизайн-токены.\r\n- Появилась внутренняя документация.\r\n- Пользователи получили UI kit.', `Summary`='', `FormatterID`='neasden', `OriginalAlias`='blazor', `Uploads`='a:8:{i:0;s:33:\"/images/1x/maxim-petrov-photo.png\";i:1;s:28:\"/images/blog/1x/blazor-2.png\";i:2;s:28:\"/images/blog/1x/blazor-1.png\";i:3;s:15:\"empty-image.jpg\";i:4;s:28:\"/images/blog/1x/blazor-3.png\";i:5;s:28:\"/images/blog/1x/blazor-4.png\";i:6;s:28:\"/images/blog/1x/blazor-5.png\";i:7;s:27:\"/images/blog/1x/blazor6.png\";}', `IsPublished`='1', `IsCommentable`='0', `IsVisible`='1', `IsFavourite`='1', `Stamp`='1711384202', `LastModified`='1711817032', `Offset`='14400', `IsDST`='0', `IsIndexed`='1', `IsExternal`='0', `ReadCount`='3', `SourceID`='0', `SourceNoteID`='0', `SourceNoteURL`='', `SourceNoteJSONURL`='', `SourceNoteData`='' WHERE `SubsetID`=1 AND (`ID`=5);

UPDATE `e2BlogAliases` SET `EntityType`='n', `EntityID`='5', `Alias`='blazor', `Stamp`='1711818173' WHERE `SubsetID`=1 AND (`ID`=6);

UPDATE `e2BlogNotes` SET `SubsetID`='1', `Title`='Дизайн-система Blazor', `Text`='DevExpress Blazor — это набор компонентов пользовательского интерфейса. Активно применяется в приложениях на платформе Blazor и предлагает мощный набор компонентов: таблицы данных, календари, планировщики, выпадающие списки, диалоговые окна и многие другие.\r\n\r\nЗадача — переосмыслить и создать дизайн-систему в Figma на основе существующих артефактов и наработок.\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/blazor-1.png\" srcset=\"/images/blog/1x/blazor-1.png 1x, /images/blog/2x/blazor-1@2x.png 2x\" class=\"img-fluid\">\r\n\r\n# Вводные\r\n\r\nBlazor продукт развивался и вместе с этим росло количество и сложность компонентов. Раньше дизайнер рисовал отдельный макет под каждую задачу. Не было системного подхода и единых правил. Со временем этот подход начал приносить проблемы:\r\n- Разработка начала сильно обгонять дизайн.\r\n- Многие решения по краевым сценариям стали приниматься разработчиками.\r\n- Дизайнер тратил много времени на поиск UI и UX багов на поздних этапах.\r\n- Итоговая фича могла сильно отличаться от нарисованного макета.\r\n\r\nОтдельной проблемой была сложность каждого компонента:\r\n- **Разные темы**. В разных темах компонент не только меняет цвет, но и начинает обладать другими визуальными свойствами.\r\n- **Несколько размеров**. Каждый компонент линейки представлен в трёх размерах. \r\n- **Дополнительные стили**. Большой набор стилистических вариантов для компонентов-атомов.\r\n\r\nНапример, одна только кнопка состоит из 150 вариантов компонента:\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/blazor-2.png\" srcset=\"/images/blog/1x/blazor-2.png 1x, /images/blog/2x/blazor-2@2x.png 2x\" class=\"img-fluid\">\r\n\r\nБыло принято решение менять подход — разработать стандарты, правила постановки задач и проектирования.\r\n\r\n# Задачи\r\n\r\nПеред новой дизайн-системой поставили следующие задачи:\r\n\r\n1. **Оптимизация работы команды на этапах дизайна и разработки.** \r\nРаньше, эти процессы были довольно хаотичны. Дизайнер брал в задачу в работу и изображал примерную реализацию компонента. Многие краевые сценарии не учитывались. Какие-то решения в процессе разработки менялись на ходу. В итоге, разработка затягивалась, фичи резались и итоговый результат сильно отличался от исходной картинки.\r\n2. **Автоматизация и консистентность**. \r\nБольшой размер и сложность компонентов сильно затрудняли внесение любых изменений в дизайн. Даже небольшие стилистические изменения в базовом компоненте, типа кнопки, приводили к огромному количеству работы со стороны дизайнера. Так как нужно было учесть разные темы, размеры и стили.\r\n3. **Консистентность цвета**. \r\nОтдельно стоит отметить проблему с цветом. Многие цвета компонентов в коде рассчитывались с помощью миксинов. Это приводило ко многим проблемам, в том числе, проблемам с контрастностью.\r\n4. **Доступность.**\r\nПользователи продукта стали всё чаще интересоваться, насколько компоненты доступны для разных категорий пользователей. Нужно было сформировать подход, когда дизайнер на этапе проработки компонента учитывает все WCAG 2.2 AA требования.\r\n5. **Централизация знаний.**\r\nМногие знания о тех или иных дизайн-решениях нигде не фиксировались. Единственным источником знания были участвующие в работе на фичей члены команды. Нужно было сформировать систему документации.\r\n6. **UI Kit.**\r\nВсё чаще стали приходить запросы на UI Kit от пользователей. В добавок, это уже давно было у конкурентов.\r\n\r\n# Результат\r\n\r\n## Компоненты в Figma переработаны с нуля\r\n\r\nДизайн компонентов теперь полностью повторяет функционал кодовой реализации. Учтены все редкие сценарии и краевые состояния. Перед отрисовкой каждого компоненты изучались спецификация+API компонента и все сценарии его использования.\r\n\r\n### **Пример реализации компонента Grid**\r\n\r\nКомпонент Grid — один из самых больших и популярных в линейке Blazor. Представляет собой решение для отображения данных в табличном формате. Включает множество функций для управления данными. Например: фильтрация, группировка, пагинация, сортировка и многое другое.\r\n\r\nОсновную сложность представляет его размер:\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/blazor-3.png\" srcset=\"/images/blog/1x/blazor-3.png 1x, /images/blog/2x/blazor-3@2x.png 2x\" class=\"img-fluid\">\r\n\r\nКомпонент достаточно гибок в настройке. Так как пользователи используют его по-разному. Всё это отражено в дизайне. \r\n\r\nЧтобы отрисовать такой компонент в Figma, задачу разбили на этапе: \r\n\r\n- Изучить решения конкурентов.\r\n- Изучить и собрать файл со скриншотами всех состояний компонента.\r\n- Собрать все под-компоненты.\r\n- Собрать итоговый компонент с разными сценариями использования.\r\n\r\nСобранный в Figma компонент сильно упростил разработку новых фич для грида. Также, упростило создание прототипов для проработки различных сценариев.\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/blazor-4.png\" srcset=\"/images/blog/1x/blazor-4.png 1x, /images/blog/2x/blazor-4@2x.png 2x\" class=\"img-fluid\">\r\n\r\n## Отрисованы новые компоненты\r\n\r\nСоздание новых компонентов включает следующие шаги: \r\n\r\n- Обсудить требования с ПМом.\r\n- Исследовать решения на рынке.\r\n- Утвердить список фич.\r\n- Найти грамотный подход по клавиатурной навигации (поддержка A11Y).\r\n- Отрисовать компонент и все его составляющие.\r\n- Описать компонент в дизайн-токенах.\r\n- Проработать сценарии для демо-стендов.\r\n\r\n### **Пример реализации компонента TreeList**\r\n\r\nКомпонент TreeList — показывает табличные данные в виде древовидной структуры. Пользователи могут сворачивать и разворачивать данные, как им удобно. \r\n\r\nПри подготовке к работе был произведен ресёрч конкурентов, собран список идей и их примерные способы реализации. На каждом этапе приходили синхронизационные встречи с менеджером продукта, разработчиками и другими заинтересованными лицами:\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/blazor-5.png\" srcset=\"/images/blog/1x/blazor-5.png 1x, /images/blog/2x/blazor-5@2x.png 2x\" class=\"img-fluid\">\r\n\r\nСобранный в Figma компонент учитывает все сценарии использовании и состоянии:\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/blazor-6.png\" srcset=\"/images/blog/1x/blazor-6.png 1x, /images/blog/2x/blazor-6@2x.png 2x\" class=\"img-fluid\">\r\n\r\n# **Токенизация**\r\n\r\nКаждый компонент представлен в разных темах. Руками отрисовать или исправлять компонент в каждой теме очень дорого и ресурсозатратно.  \r\n\r\nБыло принято решение использовать дизайн-токены:\r\n\r\n- Чтобы быстро обновлять стили компонента под любую тему.\r\n- Гарантировать единообразие решений.\r\n- Использовать токены как мостик между дизайном и разработкой.\r\n\r\nБыла проведена большая работа над созданием архитектуры и структуры дизайн-токенов:\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/blazor-7.png\" srcset=\"/images/blog/1x/blazor-7.png 1x, /images/blog/2x/blazor-7@2x.png 2x\" class=\"img-fluid\">\r\n\r\nКаждый компонент имеет полное покрытие токенами:\r\n\r\n- color,\r\n- font-weight,\r\n- letter-spacing,\r\n- line-height,\r\n- border-radius,\r\n- border-width,\r\n- font-size,\r\n- text-transform,\r\n- opacity,\r\n- box-shadow,\r\n- size.\r\n\r\nТакой подход позволяет быстро создавать новые темы, просто выставляя новые значения в токенах. Для работы использовался плагин Tokens Studio for Figma. Потому что он позволяет покрыть большое количество типов токенов, в отличии от встроенного Figma Variables.\r\n\r\nВ итоге, любой компонент в Figma легко протестировать с другими стилистическими настройками. А разработчики могут передавать значения токенов из Figma напрямую в свои стили.\r\n\r\n# **Документирование**\r\n\r\nДизайн-система описывает себя тремя основными способами:\r\n\r\n- **Компоненты и сценарии в Figma.** Главная точка входа в дизайн-систему.\r\n- **Дизайн-токены.** Служат мостом между дизайном и кодом.\r\n- **Внутренняя документация.** Содержит договоренности и рекомендации по разным аспектам дизайна: правила наименования, структура токенов, правила отрисовки иконок и так далее. Тут же можно найти результаты ресёрчей относящихся к различным дизайн-задачам.\r\n\r\n# **UI Kit**\r\n\r\nОдним из результатов работы над дизайн-системой стал выпуск UI кита в Figma.\r\n\r\n# **Результаты**\r\n\r\n- Получилось собрать крепкий каркас дизайн-системы в Figma.\r\n- Сильно улучшилась коммуникация дизайна и продукт менеджеров.\r\n    - Появились еженедельный созвоны с продукт менеджерами.\r\n    - Работа над задачами стала идти быстрее, на всех этапах.\r\n- Работа между дизайном и разработкой стала эффективнее.\r\n    - Макеты стали намного подробнее.\r\n    - Дополнительный слой информации передают дизайн-токены.\r\n- Появилась внутренняя документация.\r\n- Пользователи получили UI kit.', `Summary`='', `FormatterID`='neasden', `OriginalAlias`='blazor', `Uploads`='a:8:{i:0;s:33:\"/images/1x/maxim-petrov-photo.png\";i:1;s:28:\"/images/blog/1x/blazor-2.png\";i:2;s:28:\"/images/blog/1x/blazor-1.png\";i:3;s:15:\"empty-image.jpg\";i:4;s:28:\"/images/blog/1x/blazor-3.png\";i:5;s:28:\"/images/blog/1x/blazor-4.png\";i:6;s:28:\"/images/blog/1x/blazor-5.png\";i:7;s:27:\"/images/blog/1x/blazor6.png\";}', `IsPublished`='1', `IsCommentable`='0', `IsVisible`='1', `IsFavourite`='1', `Stamp`='1711384202', `LastModified`='1711818173', `Offset`='14400', `IsDST`='0', `IsIndexed`='0', `IsExternal`='0', `ReadCount`='3', `SourceID`='0', `SourceNoteID`='0', `SourceNoteURL`='', `SourceNoteJSONURL`='', `SourceNoteData`='' WHERE `SubsetID`=1 AND (`ID`=5);

UPDATE `e2BlogNotes` SET `Uploads`='a:10:{i:0;s:33:"/images/1x/maxim-petrov-photo.png";i:1;s:28:"/images/blog/1x/blazor-2.png";i:2;s:28:"/images/blog/1x/blazor-1.png";i:3;s:15:"empty-image.jpg";i:4;s:28:"/images/blog/1x/blazor-3.png";i:5;s:28:"/images/blog/1x/blazor-4.png";i:6;s:28:"/images/blog/1x/blazor-5.png";i:7;s:27:"/images/blog/1x/blazor6.png";i:8;s:28:"/images/blog/1x/blazor-6.png";i:9;s:28:"/images/blog/1x/blazor-7.png";}' WHERE `SubsetID`=1 AND `ID`=5;

UPDATE `e2BlogNotes` SET `SubsetID`='1', `Title`='Дизайн-система Blazor', `Text`='DevExpress Blazor — это набор компонентов пользовательского интерфейса. Активно применяется в приложениях на платформе Blazor и предлагает мощный набор компонентов: таблицы данных, календари, планировщики, выпадающие списки, диалоговые окна и многие другие.\r\n\r\nЗадача — переосмыслить и создать дизайн-систему в Figma на основе существующих артефактов и наработок.\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/blazor-1.png\" srcset=\"/images/blog/1x/blazor-1.png 1x, /images/blog/2x/blazor-1@2x.png 2x\" class=\"img-fluid\">\r\n\r\n# Вводные\r\n\r\nBlazor продукт развивался и вместе с этим росло количество и сложность компонентов. Раньше дизайнер рисовал отдельный макет под каждую задачу. Не было системного подхода и единых правил. Со временем этот подход начал приносить проблемы:\r\n- Разработка начала сильно обгонять дизайн.\r\n- Многие решения по краевым сценариям стали приниматься разработчиками.\r\n- Дизайнер тратил много времени на поиск UI и UX багов на поздних этапах.\r\n- Итоговая фича могла сильно отличаться от нарисованного макета.\r\n\r\nОтдельной проблемой была сложность каждого компонента:\r\n- **Разные темы**. В разных темах компонент не только меняет цвет, но и начинает обладать другими визуальными свойствами.\r\n- **Несколько размеров**. Каждый компонент линейки представлен в трёх размерах. \r\n- **Дополнительные стили**. Большой набор стилистических вариантов для компонентов-атомов.\r\n\r\nНапример, одна только кнопка состоит из 150 вариантов компонента:\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/blazor-2.png\" srcset=\"/images/blog/1x/blazor-2.png 1x, /images/blog/2x/blazor-2@2x.png 2x\" class=\"img-fluid\">\r\n\r\nБыло принято решение менять подход — разработать стандарты, правила постановки задач и проектирования.\r\n\r\n# Задачи\r\n\r\nПеред новой дизайн-системой поставили следующие задачи:\r\n\r\n1. **Оптимизация работы команды на этапах дизайна и разработки.** \r\nРаньше, эти процессы были довольно хаотичны. Дизайнер брал в задачу в работу и изображал примерную реализацию компонента. Многие краевые сценарии не учитывались. Какие-то решения в процессе разработки менялись на ходу. В итоге, разработка затягивалась, фичи резались и итоговый результат сильно отличался от исходной картинки.\r\n2. **Автоматизация и консистентность**. \r\nБольшой размер и сложность компонентов сильно затрудняли внесение любых изменений в дизайн. Даже небольшие стилистические изменения в базовом компоненте, типа кнопки, приводили к огромному количеству работы со стороны дизайнера. Так как нужно было учесть разные темы, размеры и стили.\r\n3. **Консистентность цвета**. \r\nОтдельно стоит отметить проблему с цветом. Многие цвета компонентов в коде рассчитывались с помощью миксинов. Это приводило ко многим проблемам, в том числе, проблемам с контрастностью.\r\n4. **Доступность.**\r\nПользователи продукта стали всё чаще интересоваться, насколько компоненты доступны для разных категорий пользователей. Нужно было сформировать подход, когда дизайнер на этапе проработки компонента учитывает все WCAG 2.2 AA требования.\r\n5. **Централизация знаний.**\r\nМногие знания о тех или иных дизайн-решениях нигде не фиксировались. Единственным источником знания были участвующие в работе на фичей члены команды. Нужно было сформировать систему документации.\r\n6. **UI Kit.**\r\nВсё чаще стали приходить запросы на UI Kit от пользователей. В добавок, это уже давно было у конкурентов.\r\n\r\n# Результат\r\n\r\n## Компоненты в Figma переработаны с нуля\r\n\r\nДизайн компонентов теперь полностью повторяет функционал кодовой реализации. Учтены все редкие сценарии и краевые состояния. Перед отрисовкой каждого компоненты изучались спецификация+API компонента и все сценарии его использования.\r\n\r\n### **Пример реализации компонента Grid**\r\n\r\nКомпонент Grid — один из самых больших и популярных в линейке Blazor. Представляет собой решение для отображения данных в табличном формате. Включает множество функций для управления данными. Например: фильтрация, группировка, пагинация, сортировка и многое другое.\r\n\r\nОсновную сложность представляет его размер:\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/blazor-3.png\" srcset=\"/images/blog/1x/blazor-3.png 1x, /images/blog/2x/blazor-3@2x.png 2x\" class=\"img-fluid\">\r\n\r\nКомпонент достаточно гибок в настройке. Так как пользователи используют его по-разному. Всё это отражено в дизайне. \r\n\r\nЧтобы отрисовать такой компонент в Figma, задачу разбили на этапе: \r\n\r\n- Изучить решения конкурентов.\r\n- Изучить и собрать файл со скриншотами всех состояний компонента.\r\n- Собрать все под-компоненты.\r\n- Собрать итоговый компонент с разными сценариями использования.\r\n\r\nСобранный в Figma компонент сильно упростил разработку новых фич для грида. Также, упростило создание прототипов для проработки различных сценариев.\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/blazor-4.png\" srcset=\"/images/blog/1x/blazor-4.png 1x, /images/blog/2x/blazor-4@2x.png 2x\" class=\"img-fluid\">\r\n\r\n## Отрисованы новые компоненты\r\n\r\nСоздание новых компонентов включает следующие шаги: \r\n\r\n- Обсудить требования с ПМом.\r\n- Исследовать решения на рынке.\r\n- Утвердить список фич.\r\n- Найти грамотный подход по клавиатурной навигации (поддержка A11Y).\r\n- Отрисовать компонент и все его составляющие.\r\n- Описать компонент в дизайн-токенах.\r\n- Проработать сценарии для демо-стендов.\r\n\r\n### **Пример реализации компонента TreeList**\r\n\r\nКомпонент TreeList — показывает табличные данные в виде древовидной структуры. Пользователи могут сворачивать и разворачивать данные, как им удобно. \r\n\r\nПри подготовке к работе был произведен ресёрч конкурентов, собран список идей и их примерные способы реализации. На каждом этапе приходили синхронизационные встречи с менеджером продукта, разработчиками и другими заинтересованными лицами:\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/blazor-5.png\" srcset=\"/images/blog/1x/blazor-5.png 1x, /images/blog/2x/blazor-5@2x.png 2x\" class=\"img-fluid\">\r\n\r\nСобранный в Figma компонент учитывает все сценарии использовании и состоянии:\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/blazor-6.png\" srcset=\"/images/blog/1x/blazor-6.png 1x, /images/blog/2x/blazor-6@2x.png 2x\" class=\"img-fluid\">\r\n\r\n# **Токенизация**\r\n\r\nКаждый компонент представлен в разных темах. Руками отрисовать или исправлять компонент в каждой теме очень дорого и ресурсозатратно.  \r\n\r\nБыло принято решение использовать дизайн-токены:\r\n\r\n- Чтобы быстро обновлять стили компонента под любую тему.\r\n- Гарантировать единообразие решений.\r\n- Использовать токены как мостик между дизайном и разработкой.\r\n\r\nБыла проведена большая работа над созданием архитектуры и структуры дизайн-токенов:\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/blazor-7.png\" srcset=\"/images/blog/1x/blazor-7.png 1x, /images/blog/2x/blazor-7@2x.png 2x\" class=\"img-fluid\">\r\n\r\nКаждый компонент имеет полное покрытие токенами:\r\n\r\n- color,\r\n- font-weight,\r\n- letter-spacing,\r\n- line-height,\r\n- border-radius,\r\n- border-width,\r\n- font-size,\r\n- text-transform,\r\n- opacity,\r\n- box-shadow,\r\n- size.\r\n\r\nТакой подход позволяет быстро создавать новые темы, просто выставляя новые значения в токенах. Для работы использовался плагин Tokens Studio for Figma. Потому что он позволяет покрыть большое количество типов токенов, в отличии от встроенного Figma Variables.\r\n\r\nВ итоге, любой компонент в Figma легко протестировать с другими стилистическими настройками. А разработчики могут передавать значения токенов из Figma напрямую в свои стили.\r\n\r\n# **Документирование**\r\n\r\nДизайн-система описывает себя тремя основными способами:\r\n\r\n- **Компоненты и сценарии в Figma.** Главная точка входа в дизайн-систему.\r\n- **Дизайн-токены.** Служат мостом между дизайном и кодом.\r\n- **Внутренняя документация.** Содержит договоренности и рекомендации по разным аспектам дизайна: правила наименования, структура токенов, правила отрисовки иконок и так далее. Тут же можно найти результаты ресёрчей относящихся к различным дизайн-задачам.\r\n\r\n# **UI Kit**\r\n\r\nОдним из результатов работы над дизайн-системой стал выпуск UI кита в Figma.\r\n\r\n# **Результаты**\r\n\r\n- Получилось собрать крепкий каркас дизайн-системы в Figma.\r\n- Сильно улучшилась коммуникация дизайна и продукт менеджеров.\r\n    - Появились еженедельный созвоны с продукт менеджерами.\r\n    - Работа над задачами стала идти быстрее, на всех этапах.\r\n- Работа между дизайном и разработкой стала эффективнее.\r\n    - Макеты стали намного подробнее.\r\n    - Дополнительный слой информации передают дизайн-токены.\r\n- Появилась внутренняя документация.\r\n- Пользователи получили UI kit.', `Summary`='', `FormatterID`='neasden', `OriginalAlias`='blazor', `Uploads`='a:8:{i:0;s:33:\"/images/1x/maxim-petrov-photo.png\";i:1;s:28:\"/images/blog/1x/blazor-2.png\";i:2;s:28:\"/images/blog/1x/blazor-1.png\";i:3;s:15:\"empty-image.jpg\";i:4;s:28:\"/images/blog/1x/blazor-3.png\";i:5;s:28:\"/images/blog/1x/blazor-4.png\";i:6;s:28:\"/images/blog/1x/blazor-5.png\";i:7;s:27:\"/images/blog/1x/blazor6.png\";}', `IsPublished`='1', `IsCommentable`='0', `IsVisible`='1', `IsFavourite`='1', `Stamp`='1711384202', `LastModified`='1711818173', `Offset`='14400', `IsDST`='0', `IsIndexed`='1', `IsExternal`='0', `ReadCount`='3', `SourceID`='0', `SourceNoteID`='0', `SourceNoteURL`='', `SourceNoteJSONURL`='', `SourceNoteData`='' WHERE `SubsetID`=1 AND (`ID`=5);

UPDATE `e2BlogNotes` SET `SubsetID`='1', `Title`='Дизайн-система Blazor', `Text`='DevExpress Blazor — это набор компонентов пользовательского интерфейса. Активно применяется в приложениях на платформе Blazor и предлагает мощный набор компонентов: таблицы данных, календари, планировщики, выпадающие списки, диалоговые окна и многие другие.\r\n\r\nЗадача — переосмыслить и создать дизайн-систему в Figma на основе существующих артефактов и наработок.\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/blazor-1.png\" srcset=\"/images/blog/1x/blazor-1.png 1x, /images/blog/2x/blazor-1@2x.png 2x\" class=\"img-fluid\">\r\n\r\n# Вводные\r\n\r\nBlazor продукт развивался и вместе с этим росло количество и сложность компонентов. Раньше дизайнер рисовал отдельный макет под каждую задачу. Не было системного подхода и единых правил. Со временем этот подход начал приносить проблемы:\r\n- Разработка начала сильно обгонять дизайн.\r\n- Многие решения по краевым сценариям стали приниматься разработчиками.\r\n- Дизайнер тратил много времени на поиск UI и UX багов на поздних этапах.\r\n- Итоговая фича могла сильно отличаться от нарисованного макета.\r\n\r\nОтдельной проблемой была сложность каждого компонента:\r\n- **Разные темы**. В разных темах компонент не только меняет цвет, но и начинает обладать другими визуальными свойствами.\r\n- **Несколько размеров**. Каждый компонент линейки представлен в трёх размерах. \r\n- **Дополнительные стили**. Большой набор стилистических вариантов для компонентов-атомов.\r\n\r\nНапример, одна только кнопка состоит из 150 вариантов компонента:\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/blazor-2.png\" srcset=\"/images/blog/1x/blazor-2.png 1x, /images/blog/2x/blazor-2@2x.png 2x\" class=\"img-fluid\">\r\n\r\nБыло принято решение менять подход — разработать стандарты, правила постановки задач и проектирования.\r\n\r\n# Задачи\r\n\r\nПеред новой дизайн-системой поставили следующие задачи:\r\n\r\n1. **Оптимизация работы команды на этапах дизайна и разработки.** \r\nРаньше, эти процессы были довольно хаотичны. Дизайнер брал в задачу в работу и изображал примерную реализацию компонента. Многие краевые сценарии не учитывались. Какие-то решения в процессе разработки менялись на ходу. В итоге, разработка затягивалась, фичи резались и итоговый результат сильно отличался от исходной картинки.\r\n2. **Автоматизация и консистентность**. \r\nБольшой размер и сложность компонентов сильно затрудняли внесение любых изменений в дизайн. Даже небольшие стилистические изменения в базовом компоненте, типа кнопки, приводили к огромному количеству работы со стороны дизайнера. Так как нужно было учесть разные темы, размеры и стили.\r\n3. **Консистентность цвета**. \r\nОтдельно стоит отметить проблему с цветом. Многие цвета компонентов в коде рассчитывались с помощью миксинов. Это приводило ко многим проблемам, в том числе, проблемам с контрастностью.\r\n4. **Доступность.**\r\nПользователи продукта стали всё чаще интересоваться, насколько компоненты доступны для разных категорий пользователей. Нужно было сформировать подход, когда дизайнер на этапе проработки компонента учитывает все WCAG 2.2 AA требования.\r\n5. **Централизация знаний.**\r\nМногие знания о тех или иных дизайн-решениях нигде не фиксировались. Единственным источником знания были участвующие в работе на фичей члены команды. Нужно было сформировать систему документации.\r\n6. **UI Kit.**\r\nВсё чаще стали приходить запросы на UI Kit от пользователей. В добавок, это уже давно было у конкурентов.\r\n\r\n# Результат\r\n\r\n## Компоненты в Figma переработаны с нуля\r\n\r\nДизайн компонентов теперь полностью повторяет функционал кодовой реализации. Учтены все редкие сценарии и краевые состояния. Перед отрисовкой каждого компоненты изучались спецификация+API компонента и все сценарии его использования.\r\n\r\n### **Пример реализации компонента Grid**\r\n\r\nКомпонент Grid — один из самых больших и популярных в линейке Blazor. Представляет собой решение для отображения данных в табличном формате. Включает множество функций для управления данными. Например: фильтрация, группировка, пагинация, сортировка и многое другое.\r\n\r\nОсновную сложность представляет его размер:\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/blazor-3.png\" srcset=\"/images/blog/1x/blazor-3.png 1x, /images/blog/2x/blazor-3@2x.png 2x\" class=\"img-fluid\">\r\n\r\nКомпонент достаточно гибок в настройке. Так как пользователи используют его по-разному. Всё это отражено в дизайне. \r\n\r\nЧтобы отрисовать такой компонент в Figma, задачу разбили на этапе: \r\n\r\n- Изучить решения конкурентов.\r\n- Изучить и собрать файл со скриншотами всех состояний компонента.\r\n- Собрать все под-компоненты.\r\n- Собрать итоговый компонент с разными сценариями использования.\r\n\r\nСобранный в Figma компонент сильно упростил разработку новых фич для грида. Также, упростило создание прототипов для проработки различных сценариев.\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/blazor-4.png\" srcset=\"/images/blog/1x/blazor-4.png 1x, /images/blog/2x/blazor-4@2x.png 2x\" class=\"img-fluid\">\r\n\r\n## Отрисованы новые компоненты\r\n\r\nСоздание новых компонентов включает следующие шаги: \r\n\r\n- Обсудить требования с ПМом.\r\n- Исследовать решения на рынке.\r\n- Утвердить список фич.\r\n- Найти грамотный подход по клавиатурной навигации (поддержка A11Y).\r\n- Отрисовать компонент и все его составляющие.\r\n- Описать компонент в дизайн-токенах.\r\n- Проработать сценарии для демо-стендов.\r\n\r\n### **Пример реализации компонента TreeList**\r\n\r\nКомпонент TreeList — показывает табличные данные в виде древовидной структуры. Пользователи могут сворачивать и разворачивать данные, как им удобно. \r\n\r\nПри подготовке к работе был произведен ресёрч конкурентов, собран список идей и их примерные способы реализации. На каждом этапе приходили синхронизационные встречи с менеджером продукта, разработчиками и другими заинтересованными лицами:\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/blazor-5.png\" srcset=\"/images/blog/1x/blazor-5.png 1x, /images/blog/2x/blazor-5@2x.png 2x\" class=\"img-fluid\">\r\n\r\nСобранный в Figma компонент учитывает все сценарии использовании и состоянии:\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/blazor-6.png\" srcset=\"/images/blog/1x/blazor-6.png 1x, /images/blog/2x/blazor-6@2x.png 2x\" class=\"img-fluid\">\r\n\r\n# **Токенизация**\r\n\r\nКаждый компонент представлен в разных темах. Руками отрисовать или исправлять компонент в каждой теме очень дорого и ресурсозатратно.  \r\n\r\nБыло принято решение использовать дизайн-токены:\r\n\r\n- Чтобы быстро обновлять стили компонента под любую тему.\r\n- Гарантировать единообразие решений.\r\n- Использовать токены как мостик между дизайном и разработкой.\r\n\r\nБыла проведена большая работа над созданием архитектуры и структуры дизайн-токенов:\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/blazor-7.png\" srcset=\"/images/blog/1x/blazor-7.png 1x, /images/blog/2x/blazor-7@2x.png 2x\" class=\"img-fluid\">\r\n\r\nКаждый компонент имеет полное покрытие токенами:\r\n\r\n- color,\r\n- font-weight,\r\n- letter-spacing,\r\n- line-height,\r\n- border-radius,\r\n- border-width,\r\n- font-size,\r\n- text-transform,\r\n- opacity,\r\n- box-shadow,\r\n- size.\r\n\r\nТакой подход позволяет быстро создавать новые темы, просто выставляя новые значения в токенах. Для работы использовался плагин Tokens Studio for Figma. Потому что он позволяет покрыть большое количество типов токенов, в отличии от встроенного Figma Variables.\r\n\r\nВ итоге, любой компонент в Figma легко протестировать с другими стилистическими настройками. А разработчики могут передавать значения токенов из Figma напрямую в свои стили.\r\n\r\n# **Документирование**\r\n\r\nДизайн-система описывает себя тремя основными способами:\r\n\r\n- **Компоненты и сценарии в Figma.** Главная точка входа в дизайн-систему.\r\n- **Дизайн-токены.** Служат мостом между дизайном и кодом.\r\n- **Внутренняя документация.** Содержит договоренности и рекомендации по разным аспектам дизайна: правила наименования, структура токенов, правила отрисовки иконок и так далее. Тут же можно найти результаты ресёрчей относящихся к различным дизайн-задачам.\r\n\r\n# **UI Kit**\r\n\r\nОдним из результатов работы над дизайн-системой стал выпуск UI кита в Figma.\r\n\r\n# **Результаты**\r\n\r\n- Получилось собрать крепкий каркас дизайн-системы в Figma.\r\n- Сильно улучшилась коммуникация дизайна и продукт менеджеров.\r\n    - Появились еженедельный созвоны с продукт менеджерами.\r\n    - Работа над задачами стала идти быстрее, на всех этапах.\r\n- Работа между дизайном и разработкой стала эффективнее.\r\n    - Макеты стали намного подробнее.\r\n    - Дополнительный слой информации передают дизайн-токены.\r\n- Появилась внутренняя документация.\r\n- Пользователи получили UI kit.', `Summary`='', `FormatterID`='neasden', `OriginalAlias`='blazor', `Uploads`='a:10:{i:0;s:33:\"/images/1x/maxim-petrov-photo.png\";i:1;s:28:\"/images/blog/1x/blazor-2.png\";i:2;s:28:\"/images/blog/1x/blazor-1.png\";i:3;s:15:\"empty-image.jpg\";i:4;s:28:\"/images/blog/1x/blazor-3.png\";i:5;s:28:\"/images/blog/1x/blazor-4.png\";i:6;s:28:\"/images/blog/1x/blazor-5.png\";i:7;s:27:\"/images/blog/1x/blazor6.png\";i:13;s:28:\"/images/blog/1x/blazor-6.png\";i:14;s:28:\"/images/blog/1x/blazor-7.png\";}', `IsPublished`='1', `IsCommentable`='0', `IsVisible`='1', `IsFavourite`='1', `Stamp`='1711384202', `LastModified`='1711818173', `Offset`='14400', `IsDST`='0', `IsIndexed`='1', `IsExternal`='0', `ReadCount`='3', `SourceID`='0', `SourceNoteID`='0', `SourceNoteURL`='', `SourceNoteJSONURL`='', `SourceNoteData`='' WHERE `SubsetID`=1 AND (`ID`=5);

UPDATE `e2BlogAliases` SET `EntityType`='n', `EntityID`='5', `Alias`='blazor', `Stamp`='1711818890' WHERE `SubsetID`=1 AND (`ID`=6);

UPDATE `e2BlogNotes` SET `SubsetID`='1', `Title`='Дизайн-система Blazor', `Text`='DevExpress Blazor — это набор компонентов пользовательского интерфейса. Активно применяется в приложениях на платформе Blazor и предлагает мощный набор компонентов: таблицы данных, календари, планировщики, выпадающие списки, диалоговые окна и многие другие.\r\n\r\nЗадача — переосмыслить и создать дизайн-систему в Figma на основе существующих артефактов и наработок.\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/blazor-1.png\" srcset=\"/images/blog/1x/blazor-1.png 1x, /images/blog/2x/blazor-1@2x.png 2x\" class=\"img-fluid\">\r\n\r\n# Вводные\r\n\r\nBlazor продукт развивался и вместе с этим росло количество и сложность компонентов. Раньше дизайнер рисовал отдельный макет под каждую задачу. Не было системного подхода и единых правил. Со временем этот подход начал приносить проблемы:\r\n- Разработка начала сильно обгонять дизайн.\r\n- Многие решения по краевым сценариям стали приниматься разработчиками.\r\n- Дизайнер тратил много времени на поиск UI и UX багов на поздних этапах.\r\n- Итоговая фича могла сильно отличаться от нарисованного макета.\r\n\r\nОтдельной проблемой была сложность каждого компонента:\r\n- **Разные темы**. В разных темах компонент не только меняет цвет, но и начинает обладать другими визуальными свойствами.\r\n- **Несколько размеров**. Каждый компонент линейки представлен в трёх размерах. \r\n- **Дополнительные стили**. Большой набор стилистических вариантов для компонентов-атомов.\r\n\r\nНапример, одна только кнопка состоит из 150 вариантов компонента:\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/blazor-2.png\" srcset=\"/images/blog/1x/blazor-2.png 1x, /images/blog/2x/blazor-2@2x.png 2x\" class=\"img-fluid\">\r\n\r\nБыло принято решение менять подход — разработать стандарты, правила постановки задач и проектирования.\r\n\r\n# Задачи\r\n\r\nПеред новой дизайн-системой поставили следующие задачи:\r\n\r\n1. **Оптимизация работы команды на этапах дизайна и разработки.** \r\nРаньше, эти процессы были довольно хаотичны. Дизайнер брал в задачу в работу и изображал примерную реализацию компонента. Многие краевые сценарии не учитывались. Какие-то решения в процессе разработки менялись на ходу. В итоге, разработка затягивалась, фичи резались и итоговый результат сильно отличался от исходной картинки.\r\n2. **Автоматизация и консистентность**. \r\nБольшой размер и сложность компонентов сильно затрудняли внесение любых изменений в дизайн. Даже небольшие стилистические изменения в базовом компоненте, типа кнопки, приводили к огромному количеству работы со стороны дизайнера. Так как нужно было учесть разные темы, размеры и стили.\r\n3. **Консистентность цвета**. \r\nОтдельно стоит отметить проблему с цветом. Многие цвета компонентов в коде рассчитывались с помощью миксинов. Это приводило ко многим проблемам, в том числе, проблемам с контрастностью.\r\n4. **Доступность.**\r\nПользователи продукта стали всё чаще интересоваться, насколько компоненты доступны для разных категорий пользователей. Нужно было сформировать подход, когда дизайнер на этапе проработки компонента учитывает все WCAG 2.2 AA требования.\r\n5. **Централизация знаний.**\r\nМногие знания о тех или иных дизайн-решениях нигде не фиксировались. Единственным источником знания были участвующие в работе на фичей члены команды. Нужно было сформировать систему документации.\r\n6. **UI Kit.**\r\nВсё чаще стали приходить запросы на UI Kit от пользователей. В добавок, это уже давно было у конкурентов.\r\n\r\n# Результат\r\n\r\n## Компоненты в Figma переработаны с нуля\r\n\r\nДизайн компонентов теперь полностью повторяет функционал кодовой реализации. Учтены все редкие сценарии и краевые состояния. Перед отрисовкой каждого компоненты изучались спецификация+API компонента и все сценарии его использования.\r\n\r\n### **Пример реализации компонента Grid**\r\n\r\nКомпонент Grid — один из самых больших и популярных в линейке Blazor. Представляет собой решение для отображения данных в табличном формате. Включает множество функций для управления данными. Например: фильтрация, группировка, пагинация, сортировка и многое другое.\r\n\r\nОсновную сложность представляет его размер:\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/blazor-3.png\" srcset=\"/images/blog/1x/blazor-3.png 1x, /images/blog/2x/blazor-3@2x.png 2x\" class=\"img-fluid\">\r\n\r\nКомпонент достаточно гибок в настройке. Так как пользователи используют его по-разному. Всё это отражено в дизайне. \r\n\r\nЧтобы отрисовать такой компонент в Figma, задачу разбили на этапе: \r\n\r\n- Изучить решения конкурентов.\r\n- Изучить и собрать файл со скриншотами всех состояний компонента.\r\n- Собрать все под-компоненты.\r\n- Собрать итоговый компонент с разными сценариями использования.\r\n\r\nСобранный в Figma компонент сильно упростил разработку новых фич для грида. Также, упростило создание прототипов для проработки различных сценариев.\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/blazor-4.png\" srcset=\"/images/blog/1x/blazor-4.png 1x, /images/blog/2x/blazor-4@2x.png 2x\" class=\"img-fluid\">\r\n\r\n## Отрисованы новые компоненты\r\n\r\nСоздание новых компонентов включает следующие шаги: \r\n\r\n- Обсудить требования с ПМом.\r\n- Исследовать решения на рынке.\r\n- Утвердить список фич.\r\n- Найти грамотный подход по клавиатурной навигации (поддержка A11Y).\r\n- Отрисовать компонент и все его составляющие.\r\n- Описать компонент в дизайн-токенах.\r\n- Проработать сценарии для демо-стендов.\r\n\r\n### **Пример реализации компонента TreeList**\r\n\r\nКомпонент TreeList — показывает табличные данные в виде древовидной структуры. Пользователи могут сворачивать и разворачивать данные, как им удобно. \r\n\r\nПри подготовке к работе был произведен ресёрч конкурентов, собран список идей и их примерные способы реализации. На каждом этапе приходили синхронизационные встречи с менеджером продукта, разработчиками и другими заинтересованными лицами:\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/blazor-5.png\" srcset=\"/images/blog/1x/blazor-5.png 1x, /images/blog/2x/blazor-5@2x.png 2x\" class=\"img-fluid\">\r\n\r\nСобранный в Figma компонент учитывает все сценарии использовании и состоянии:\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/blazor-6.png\" srcset=\"/images/blog/1x/blazor-6.png 1x, /images/blog/2x/blazor-6@2x.png 2x\" class=\"img-fluid\">\r\n\r\n# **Токенизация**\r\n\r\nКаждый компонент представлен в разных темах. Руками отрисовать или исправлять компонент в каждой теме очень дорого и ресурсозатратно.  \r\n\r\nБыло принято решение использовать дизайн-токены:\r\n\r\n- Чтобы быстро обновлять стили компонента под любую тему.\r\n- Гарантировать единообразие решений.\r\n- Использовать токены как мостик между дизайном и разработкой.\r\n\r\nБыла проведена большая работа над созданием архитектуры и структуры дизайн-токенов:\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/blazor-7.png\" srcset=\"/images/blog/1x/blazor-7.png 1x, /images/blog/2x/blazor-7@2x.png 2x\" class=\"img-fluid\">\r\n\r\nКаждый компонент имеет полное покрытие токенами:\r\n\r\n- color,\r\n- font-weight,\r\n- letter-spacing,\r\n- line-height,\r\n- border-radius,\r\n- border-width,\r\n- font-size,\r\n- text-transform,\r\n- opacity,\r\n- box-shadow,\r\n- size.\r\n\r\nТакой подход позволяет быстро создавать новые темы, просто выставляя новые значения в токенах. Для работы использовался плагин Tokens Studio for Figma. Потому что он позволяет покрыть большое количество типов токенов, в отличии от встроенного Figma Variables.\r\n\r\nВ итоге, любой компонент в Figma легко протестировать с другими стилистическими настройками. А разработчики могут передавать значения токенов из Figma напрямую в свои стили.\r\n\r\n# **Документирование**\r\n\r\nДизайн-система описывает себя тремя основными способами:\r\n\r\n- **Компоненты и сценарии в Figma.** Главная точка входа в дизайн-систему.\r\n- **Дизайн-токены.** Служат мостом между дизайном и кодом.\r\n- **Внутренняя документация.** Содержит договоренности и рекомендации по разным аспектам дизайна: правила наименования, структура токенов, правила отрисовки иконок и так далее. Тут же можно найти результаты ресёрчей относящихся к различным дизайн-задачам.\r\n\r\n# **UI Kit**\r\n\r\nОдним из результатов работы над дизайн-системой стал выпуск UI кита в Figma.\r\n\r\n# **Результаты**\r\n\r\n- Получилось собрать крепкий каркас дизайн-системы в Figma.\r\n- Сильно улучшилась коммуникация дизайна и продукт менеджеров.\r\n    - Появились еженедельный созвоны с продукт менеджерами.\r\n    - Работа над задачами стала идти быстрее, на всех этапах.\r\n- Работа между дизайном и разработкой стала эффективнее.\r\n    - Макеты стали намного подробнее.\r\n    - Дополнительный слой информации передают дизайн-токены.\r\n- Появилась внутренняя документация.\r\n- Пользователи получили UI kit.', `Summary`='', `FormatterID`='neasden', `OriginalAlias`='blazor', `Uploads`='a:10:{i:0;s:33:\"/images/1x/maxim-petrov-photo.png\";i:1;s:28:\"/images/blog/1x/blazor-2.png\";i:2;s:28:\"/images/blog/1x/blazor-1.png\";i:3;s:15:\"empty-image.jpg\";i:4;s:28:\"/images/blog/1x/blazor-3.png\";i:5;s:28:\"/images/blog/1x/blazor-4.png\";i:6;s:28:\"/images/blog/1x/blazor-5.png\";i:7;s:27:\"/images/blog/1x/blazor6.png\";i:13;s:28:\"/images/blog/1x/blazor-6.png\";i:14;s:28:\"/images/blog/1x/blazor-7.png\";}', `IsPublished`='1', `IsCommentable`='0', `IsVisible`='1', `IsFavourite`='1', `Stamp`='1711384202', `LastModified`='1711818890', `Offset`='14400', `IsDST`='0', `IsIndexed`='0', `IsExternal`='0', `ReadCount`='3', `SourceID`='0', `SourceNoteID`='0', `SourceNoteURL`='', `SourceNoteJSONURL`='', `SourceNoteData`='' WHERE `SubsetID`=1 AND (`ID`=5);

UPDATE `e2BlogNotes` SET `SubsetID`='1', `Title`='Дизайн-система Blazor', `Text`='DevExpress Blazor — это набор компонентов пользовательского интерфейса. Активно применяется в приложениях на платформе Blazor и предлагает мощный набор компонентов: таблицы данных, календари, планировщики, выпадающие списки, диалоговые окна и многие другие.\r\n\r\nЗадача — переосмыслить и создать дизайн-систему в Figma на основе существующих артефактов и наработок.\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/blazor-1.png\" srcset=\"/images/blog/1x/blazor-1.png 1x, /images/blog/2x/blazor-1@2x.png 2x\" class=\"img-fluid\">\r\n\r\n# Вводные\r\n\r\nBlazor продукт развивался и вместе с этим росло количество и сложность компонентов. Раньше дизайнер рисовал отдельный макет под каждую задачу. Не было системного подхода и единых правил. Со временем этот подход начал приносить проблемы:\r\n- Разработка начала сильно обгонять дизайн.\r\n- Многие решения по краевым сценариям стали приниматься разработчиками.\r\n- Дизайнер тратил много времени на поиск UI и UX багов на поздних этапах.\r\n- Итоговая фича могла сильно отличаться от нарисованного макета.\r\n\r\nОтдельной проблемой была сложность каждого компонента:\r\n- **Разные темы**. В разных темах компонент не только меняет цвет, но и начинает обладать другими визуальными свойствами.\r\n- **Несколько размеров**. Каждый компонент линейки представлен в трёх размерах. \r\n- **Дополнительные стили**. Большой набор стилистических вариантов для компонентов-атомов.\r\n\r\nНапример, одна только кнопка состоит из 150 вариантов компонента:\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/blazor-2.png\" srcset=\"/images/blog/1x/blazor-2.png 1x, /images/blog/2x/blazor-2@2x.png 2x\" class=\"img-fluid\">\r\n\r\nБыло принято решение менять подход — разработать стандарты, правила постановки задач и проектирования.\r\n\r\n# Задачи\r\n\r\nПеред новой дизайн-системой поставили следующие задачи:\r\n\r\n1. **Оптимизация работы команды на этапах дизайна и разработки.** \r\nРаньше, эти процессы были довольно хаотичны. Дизайнер брал в задачу в работу и изображал примерную реализацию компонента. Многие краевые сценарии не учитывались. Какие-то решения в процессе разработки менялись на ходу. В итоге, разработка затягивалась, фичи резались и итоговый результат сильно отличался от исходной картинки.\r\n2. **Автоматизация и консистентность**. \r\nБольшой размер и сложность компонентов сильно затрудняли внесение любых изменений в дизайн. Даже небольшие стилистические изменения в базовом компоненте, типа кнопки, приводили к огромному количеству работы со стороны дизайнера. Так как нужно было учесть разные темы, размеры и стили.\r\n3. **Консистентность цвета**. \r\nОтдельно стоит отметить проблему с цветом. Многие цвета компонентов в коде рассчитывались с помощью миксинов. Это приводило ко многим проблемам, в том числе, проблемам с контрастностью.\r\n4. **Доступность.**\r\nПользователи продукта стали всё чаще интересоваться, насколько компоненты доступны для разных категорий пользователей. Нужно было сформировать подход, когда дизайнер на этапе проработки компонента учитывает все WCAG 2.2 AA требования.\r\n5. **Централизация знаний.**\r\nМногие знания о тех или иных дизайн-решениях нигде не фиксировались. Единственным источником знания были участвующие в работе на фичей члены команды. Нужно было сформировать систему документации.\r\n6. **UI Kit.**\r\nВсё чаще стали приходить запросы на UI Kit от пользователей. В добавок, это уже давно было у конкурентов.\r\n\r\n# Результат\r\n\r\n## Компоненты в Figma переработаны с нуля\r\n\r\nДизайн компонентов теперь полностью повторяет функционал кодовой реализации. Учтены все редкие сценарии и краевые состояния. Перед отрисовкой каждого компоненты изучались спецификация+API компонента и все сценарии его использования.\r\n\r\n### **Пример реализации компонента Grid**\r\n\r\nКомпонент Grid — один из самых больших и популярных в линейке Blazor. Представляет собой решение для отображения данных в табличном формате. Включает множество функций для управления данными. Например: фильтрация, группировка, пагинация, сортировка и многое другое.\r\n\r\nОсновную сложность представляет его размер:\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/blazor-3.png\" srcset=\"/images/blog/1x/blazor-3.png 1x, /images/blog/2x/blazor-3@2x.png 2x\" class=\"img-fluid\">\r\n\r\nКомпонент достаточно гибок в настройке. Так как пользователи используют его по-разному. Всё это отражено в дизайне. \r\n\r\nЧтобы отрисовать такой компонент в Figma, задачу разбили на этапе: \r\n\r\n- Изучить решения конкурентов.\r\n- Изучить и собрать файл со скриншотами всех состояний компонента.\r\n- Собрать все под-компоненты.\r\n- Собрать итоговый компонент с разными сценариями использования.\r\n\r\nСобранный в Figma компонент сильно упростил разработку новых фич для грида. Также, упростило создание прототипов для проработки различных сценариев.\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/blazor-4.png\" srcset=\"/images/blog/1x/blazor-4.png 1x, /images/blog/2x/blazor-4@2x.png 2x\" class=\"img-fluid\">\r\n\r\n## Отрисованы новые компоненты\r\n\r\nСоздание новых компонентов включает следующие шаги: \r\n\r\n- Обсудить требования с ПМом.\r\n- Исследовать решения на рынке.\r\n- Утвердить список фич.\r\n- Найти грамотный подход по клавиатурной навигации (поддержка A11Y).\r\n- Отрисовать компонент и все его составляющие.\r\n- Описать компонент в дизайн-токенах.\r\n- Проработать сценарии для демо-стендов.\r\n\r\n### **Пример реализации компонента TreeList**\r\n\r\nКомпонент TreeList — показывает табличные данные в виде древовидной структуры. Пользователи могут сворачивать и разворачивать данные, как им удобно. \r\n\r\nПри подготовке к работе был произведен ресёрч конкурентов, собран список идей и их примерные способы реализации. На каждом этапе приходили синхронизационные встречи с менеджером продукта, разработчиками и другими заинтересованными лицами:\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/blazor-5.png\" srcset=\"/images/blog/1x/blazor-5.png 1x, /images/blog/2x/blazor-5@2x.png 2x\" class=\"img-fluid\">\r\n\r\nСобранный в Figma компонент учитывает все сценарии использовании и состоянии:\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/blazor-6.png\" srcset=\"/images/blog/1x/blazor-6.png 1x, /images/blog/2x/blazor-6@2x.png 2x\" class=\"img-fluid\">\r\n\r\n# **Токенизация**\r\n\r\nКаждый компонент представлен в разных темах. Руками отрисовать или исправлять компонент в каждой теме очень дорого и ресурсозатратно.  \r\n\r\nБыло принято решение использовать дизайн-токены:\r\n\r\n- Чтобы быстро обновлять стили компонента под любую тему.\r\n- Гарантировать единообразие решений.\r\n- Использовать токены как мостик между дизайном и разработкой.\r\n\r\nБыла проведена большая работа над созданием архитектуры и структуры дизайн-токенов:\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/blazor-7.png\" srcset=\"/images/blog/1x/blazor-7.png 1x, /images/blog/2x/blazor-7@2x.png 2x\" class=\"img-fluid\">\r\n\r\nКаждый компонент имеет полное покрытие токенами:\r\n\r\n- color,\r\n- font-weight,\r\n- letter-spacing,\r\n- line-height,\r\n- border-radius,\r\n- border-width,\r\n- font-size,\r\n- text-transform,\r\n- opacity,\r\n- box-shadow,\r\n- size.\r\n\r\nТакой подход позволяет быстро создавать новые темы, просто выставляя новые значения в токенах. Для работы использовался плагин Tokens Studio for Figma. Потому что он позволяет покрыть большое количество типов токенов, в отличии от встроенного Figma Variables.\r\n\r\nВ итоге, любой компонент в Figma легко протестировать с другими стилистическими настройками. А разработчики могут передавать значения токенов из Figma напрямую в свои стили.\r\n\r\n# **Документирование**\r\n\r\nДизайн-система описывает себя тремя основными способами:\r\n\r\n- **Компоненты и сценарии в Figma.** Главная точка входа в дизайн-систему.\r\n- **Дизайн-токены.** Служат мостом между дизайном и кодом.\r\n- **Внутренняя документация.** Содержит договоренности и рекомендации по разным аспектам дизайна: правила наименования, структура токенов, правила отрисовки иконок и так далее. Тут же можно найти результаты ресёрчей относящихся к различным дизайн-задачам.\r\n\r\n# **UI Kit**\r\n\r\nОдним из результатов работы над дизайн-системой стал выпуск UI кита в Figma.\r\n\r\n# **Результаты**\r\n\r\n- Получилось собрать крепкий каркас дизайн-системы в Figma.\r\n- Сильно улучшилась коммуникация дизайна и продукт менеджеров.\r\n    - Появились еженедельный созвоны с продукт менеджерами.\r\n    - Работа над задачами стала идти быстрее, на всех этапах.\r\n- Работа между дизайном и разработкой стала эффективнее.\r\n    - Макеты стали намного подробнее.\r\n    - Дополнительный слой информации передают дизайн-токены.\r\n- Появилась внутренняя документация.\r\n- Пользователи получили UI kit.', `Summary`='', `FormatterID`='neasden', `OriginalAlias`='blazor', `Uploads`='a:10:{i:0;s:33:\"/images/1x/maxim-petrov-photo.png\";i:1;s:28:\"/images/blog/1x/blazor-2.png\";i:2;s:28:\"/images/blog/1x/blazor-1.png\";i:3;s:15:\"empty-image.jpg\";i:4;s:28:\"/images/blog/1x/blazor-3.png\";i:5;s:28:\"/images/blog/1x/blazor-4.png\";i:6;s:28:\"/images/blog/1x/blazor-5.png\";i:7;s:27:\"/images/blog/1x/blazor6.png\";i:13;s:28:\"/images/blog/1x/blazor-6.png\";i:14;s:28:\"/images/blog/1x/blazor-7.png\";}', `IsPublished`='1', `IsCommentable`='0', `IsVisible`='1', `IsFavourite`='1', `Stamp`='1711384202', `LastModified`='1711818890', `Offset`='14400', `IsDST`='0', `IsIndexed`='1', `IsExternal`='0', `ReadCount`='3', `SourceID`='0', `SourceNoteID`='0', `SourceNoteURL`='', `SourceNoteJSONURL`='', `SourceNoteData`='' WHERE `SubsetID`=1 AND (`ID`=5);

UPDATE `e2BlogNotes` SET `SubsetID`='1', `Title`='Дизайн-система Blazor', `Text`='DevExpress Blazor — это набор компонентов пользовательского интерфейса. Активно применяется в приложениях на платформе Blazor и предлагает мощный набор компонентов: таблицы данных, календари, планировщики, выпадающие списки, диалоговые окна и многие другие.\r\n\r\nЗадача — переосмыслить и создать дизайн-систему в Figma на основе существующих артефактов и наработок.\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/blazor-1.png\" srcset=\"/images/blog/1x/blazor-1.png 1x, /images/blog/2x/blazor-1@2x.png 2x\" class=\"img-fluid\">\r\n\r\n# Вводные\r\n\r\nBlazor продукт развивался и вместе с этим росло количество и сложность компонентов. Раньше дизайнер рисовал отдельный макет под каждую задачу. Не было системного подхода и единых правил. Со временем этот подход начал приносить проблемы:\r\n- Разработка начала сильно обгонять дизайн.\r\n- Многие решения по краевым сценариям стали приниматься разработчиками.\r\n- Дизайнер тратил много времени на поиск UI и UX багов на поздних этапах.\r\n- Итоговая фича могла сильно отличаться от нарисованного макета.\r\n\r\nОтдельной проблемой была сложность каждого компонента:\r\n- **Разные темы**. В разных темах компонент не только меняет цвет, но и начинает обладать другими визуальными свойствами.\r\n- **Несколько размеров**. Каждый компонент линейки представлен в трёх размерах. \r\n- **Дополнительные стили**. Большой набор стилистических вариантов для компонентов-атомов.\r\n\r\nНапример, одна только кнопка состоит из 150 вариантов компонента:\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/blazor-2.png\" srcset=\"/images/blog/1x/blazor-2.png 1x, /images/blog/2x/blazor-2@2x.png 2x\" class=\"img-fluid\">\r\n\r\nБыло принято решение менять подход — разработать стандарты, правила постановки задач и проектирования.\r\n\r\n# Задачи\r\n\r\nПеред новой дизайн-системой поставили следующие задачи:\r\n\r\n1. **Оптимизация работы команды на этапах дизайна и разработки.** \r\nРаньше, эти процессы были довольно хаотичны. Дизайнер брал в задачу в работу и изображал примерную реализацию компонента. Многие краевые сценарии не учитывались. Какие-то решения в процессе разработки менялись на ходу. В итоге, разработка затягивалась, фичи резались и итоговый результат сильно отличался от исходной картинки.\r\n2. **Автоматизация и консистентность**. \r\nБольшой размер и сложность компонентов сильно затрудняли внесение любых изменений в дизайн. Даже небольшие стилистические изменения в базовом компоненте, типа кнопки, приводили к огромному количеству работы со стороны дизайнера. Так как нужно было учесть разные темы, размеры и стили.\r\n3. **Консистентность цвета**. \r\nОтдельно стоит отметить проблему с цветом. Многие цвета компонентов в коде рассчитывались с помощью миксинов. Это приводило ко многим проблемам, в том числе, проблемам с контрастностью.\r\n4. **Доступность.**\r\nПользователи продукта стали всё чаще интересоваться, насколько компоненты доступны для разных категорий пользователей. Нужно было сформировать подход, когда дизайнер на этапе проработки компонента учитывает все WCAG 2.2 AA требования.\r\n5. **Централизация знаний.**\r\nМногие знания о тех или иных дизайн-решениях нигде не фиксировались. Единственным источником знания были участвующие в работе на фичей члены команды. Нужно было сформировать систему документации.\r\n6. **UI Kit.**\r\nВсё чаще стали приходить запросы на UI Kit от пользователей. В добавок, это уже давно было у конкурентов.\r\n\r\n# Результат\r\n\r\n## Компоненты в Figma переработаны с нуля\r\n\r\nДизайн компонентов теперь полностью повторяет функционал кодовой реализации. Учтены все редкие сценарии и краевые состояния. Перед отрисовкой каждого компоненты изучались спецификация+API компонента и все сценарии его использования.\r\n\r\n### **Пример реализации компонента Grid**\r\n\r\nКомпонент Grid — один из самых больших и популярных в линейке Blazor. Представляет собой решение для отображения данных в табличном формате. Включает множество функций для управления данными. Например: фильтрация, группировка, пагинация, сортировка и многое другое.\r\n\r\nОсновную сложность представляет его размер:\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/blazor-3.png\" srcset=\"/images/blog/1x/blazor-3.png 1x, /images/blog/2x/blazor-3@2x.png 2x\" class=\"img-fluid\">\r\n\r\nКомпонент достаточно гибок в настройке. Так как пользователи используют его по-разному. Всё это отражено в дизайне. \r\n\r\nЧтобы отрисовать такой компонент в Figma, задачу разбили на этапе: \r\n\r\n- Изучить решения конкурентов.\r\n- Изучить и собрать файл со скриншотами всех состояний компонента.\r\n- Собрать все под-компоненты.\r\n- Собрать итоговый компонент с разными сценариями использования.\r\n\r\nСобранный в Figma компонент сильно упростил разработку новых фич для грида. Также, упростило создание прототипов для проработки различных сценариев.\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/blazor-4.png\" srcset=\"/images/blog/1x/blazor-4.png 1x, /images/blog/2x/blazor-4@2x.png 2x\" class=\"img-fluid\">\r\n\r\n## Отрисованы новые компоненты\r\n\r\nСоздание новых компонентов включает следующие шаги: \r\n\r\n- Обсудить требования с ПМом.\r\n- Исследовать решения на рынке.\r\n- Утвердить список фич.\r\n- Найти грамотный подход по клавиатурной навигации (поддержка A11Y).\r\n- Отрисовать компонент и все его составляющие.\r\n- Описать компонент в дизайн-токенах.\r\n- Проработать сценарии для демо-стендов.\r\n\r\n### **Пример реализации компонента TreeList**\r\n\r\nКомпонент TreeList — показывает табличные данные в виде древовидной структуры. Пользователи могут сворачивать и разворачивать данные, как им удобно. \r\n\r\nПри подготовке к работе был произведен ресёрч конкурентов, собран список идей и их примерные способы реализации. На каждом этапе приходили синхронизационные встречи с менеджером продукта, разработчиками и другими заинтересованными лицами:\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/blazor-5.png\" srcset=\"/images/blog/1x/blazor-5.png 1x, /images/blog/2x/blazor-5@2x.png 2x\" class=\"img-fluid\">\r\n\r\nСобранный в Figma компонент учитывает все сценарии использовании и состоянии:\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/blazor-6.png\" srcset=\"/images/blog/1x/blazor-6.png 1x, /images/blog/2x/blazor-6@2x.png 2x\" class=\"img-fluid\">\r\n\r\n# **Токенизация**\r\n\r\nКаждый компонент представлен в разных темах. Руками отрисовать или исправлять компонент в каждой теме очень дорого и ресурсозатратно.  \r\n\r\nБыло принято решение использовать дизайн-токены:\r\n\r\n- Чтобы быстро обновлять стили компонента под любую тему.\r\n- Гарантировать единообразие решений.\r\n- Использовать токены как мостик между дизайном и разработкой.\r\n\r\nБыла проведена большая работа над созданием архитектуры и структуры дизайн-токенов:\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/blazor-7.png\" srcset=\"/images/blog/1x/blazor-7.png 1x, /images/blog/2x/blazor-7@2x.png 2x\" class=\"img-fluid\">\r\n\r\nКаждый компонент имеет полное покрытие токенами:\r\n\r\n- color,\r\n- font-weight,\r\n- letter-spacing,\r\n- line-height,\r\n- border-radius,\r\n- border-width,\r\n- font-size,\r\n- text-transform,\r\n- opacity,\r\n- box-shadow,\r\n- size.\r\n\r\nТакой подход позволяет быстро создавать новые темы, просто выставляя новые значения в токенах. Для работы использовался плагин Tokens Studio for Figma. Потому что он позволяет покрыть большое количество типов токенов, в отличии от встроенного Figma Variables.\r\n\r\nВ итоге, любой компонент в Figma легко протестировать с другими стилистическими настройками. А разработчики могут передавать значения токенов из Figma напрямую в свои стили.\r\n\r\n# **Документирование**\r\n\r\nДизайн-система описывает себя тремя основными способами:\r\n\r\n- **Компоненты и сценарии в Figma.** Главная точка входа в дизайн-систему.\r\n- **Дизайн-токены.** Служат мостом между дизайном и кодом.\r\n- **Внутренняя документация.** Содержит договоренности и рекомендации по разным аспектам дизайна: правила наименования, структура токенов, правила отрисовки иконок и так далее. Тут же можно найти результаты ресёрчей относящихся к различным дизайн-задачам.\r\n\r\n# **UI Kit**\r\n\r\nОдним из результатов работы над дизайн-системой стал выпуск UI кита в Figma.\r\n\r\n# **Результаты**\r\n\r\n- Получилось собрать крепкий каркас дизайн-системы в Figma.\r\n- Сильно улучшилась коммуникация дизайна и продукт менеджеров.\r\n    - Появились еженедельный созвоны с продукт менеджерами.\r\n    - Работа над задачами стала идти быстрее, на всех этапах.\r\n- Работа между дизайном и разработкой стала эффективнее.\r\n    - Макеты стали намного подробнее.\r\n    - Дополнительный слой информации передают дизайн-токены.\r\n- Появилась внутренняя документация.\r\n- Пользователи получили UI kit.', `Summary`='', `FormatterID`='neasden', `OriginalAlias`='blazor', `Uploads`='a:10:{i:0;s:33:\"/images/1x/maxim-petrov-photo.png\";i:1;s:28:\"/images/blog/1x/blazor-2.png\";i:2;s:28:\"/images/blog/1x/blazor-1.png\";i:3;s:15:\"empty-image.jpg\";i:4;s:28:\"/images/blog/1x/blazor-3.png\";i:5;s:28:\"/images/blog/1x/blazor-4.png\";i:6;s:28:\"/images/blog/1x/blazor-5.png\";i:7;s:27:\"/images/blog/1x/blazor6.png\";i:8;s:28:\"/images/blog/1x/blazor-6.png\";i:9;s:28:\"/images/blog/1x/blazor-7.png\";}', `IsPublished`='1', `IsCommentable`='0', `IsVisible`='1', `IsFavourite`='1', `Stamp`='1711384202', `LastModified`='1711818890', `Offset`='14400', `IsDST`='0', `IsIndexed`='1', `IsExternal`='0', `ReadCount`='3', `SourceID`='0', `SourceNoteID`='0', `SourceNoteURL`='', `SourceNoteJSONURL`='', `SourceNoteData`='' WHERE `SubsetID`=1 AND (`ID`=5);

UPDATE `e2BlogAliases` SET `EntityType`='n', `EntityID`='5', `Alias`='blazor', `Stamp`='1711819943' WHERE `SubsetID`=1 AND (`ID`=6);

UPDATE `e2BlogNotes` SET `SubsetID`='1', `Title`='Дизайн-система Blazor', `Text`='DevExpress Blazor — это набор компонентов пользовательского интерфейса. Активно применяется в приложениях на платформе Blazor и предлагает мощный набор компонентов: таблицы данных, календари, планировщики, выпадающие списки, диалоговые окна и многие другие.\r\n\r\nЗадача — переосмыслить и создать дизайн-систему в Figma на основе существующих артефактов и наработок.\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/blazor-1.png\" srcset=\"/images/blog/1x/blazor-1.png 1x, /images/blog/2x/blazor-1@2x.png 2x\" class=\"img-fluid\">\r\n\r\n# Вводные\r\n\r\nBlazor продукт развивался и вместе с этим росло количество и сложность компонентов. Раньше дизайнер рисовал отдельный макет под каждую задачу. Не было системного подхода и единых правил. Со временем этот подход начал приносить проблемы:\r\n- Разработка начала сильно обгонять дизайн.\r\n- Многие решения по краевым сценариям стали приниматься разработчиками.\r\n- Дизайнер тратил много времени на поиск UI и UX багов на поздних этапах.\r\n- Итоговая фича могла сильно отличаться от нарисованного макета.\r\n\r\nОтдельной проблемой была сложность каждого компонента:\r\n- **Разные темы**. В разных темах компонент не только меняет цвет, но и начинает обладать другими визуальными свойствами.\r\n- **Несколько размеров**. Каждый компонент линейки представлен в трёх размерах. \r\n- **Дополнительные стили**. Большой набор стилистических вариантов для компонентов-атомов.\r\n\r\nНапример, одна только кнопка состоит из 150 вариантов компонента:\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/blazor-2.png\" srcset=\"/images/blog/1x/blazor-2.png 1x, /images/blog/2x/blazor-2@2x.png 2x\" class=\"img-fluid\">\r\n\r\nБыло принято решение менять подход — разработать стандарты, правила постановки задач и проектирования.\r\n\r\n# Задачи\r\n\r\nПеред новой дизайн-системой поставили следующие задачи:\r\n\r\n1. **Оптимизация работы команды на этапах дизайна и разработки.** \r\nРаньше, эти процессы были довольно хаотичны. Дизайнер брал в задачу в работу и изображал примерную реализацию компонента. Многие краевые сценарии не учитывались. Какие-то решения в процессе разработки менялись на ходу. В итоге, разработка затягивалась, фичи резались и итоговый результат сильно отличался от исходной картинки.\r\n2. **Автоматизация и консистентность**. \r\nБольшой размер и сложность компонентов сильно затрудняли внесение любых изменений в дизайн. Даже небольшие стилистические изменения в базовом компоненте, типа кнопки, приводили к огромному количеству работы со стороны дизайнера. Так как нужно было учесть разные темы, размеры и стили.\r\n3. **Консистентность цвета**. \r\nОтдельно стоит отметить проблему с цветом. Многие цвета компонентов в коде рассчитывались с помощью миксинов. Это приводило ко многим проблемам, в том числе, проблемам с контрастностью.\r\n4. **Доступность.**\r\nПользователи продукта стали всё чаще интересоваться, насколько компоненты доступны для разных категорий пользователей. Нужно было сформировать подход, когда дизайнер на этапе проработки компонента учитывает все WCAG 2.2 AA требования.\r\n5. **Централизация знаний.**\r\nМногие знания о тех или иных дизайн-решениях нигде не фиксировались. Единственным источником знания были участвующие в работе на фичей члены команды. Нужно было сформировать систему документации.\r\n6. **UI Kit.**\r\nВсё чаще стали приходить запросы на UI Kit от пользователей. В добавок, это уже давно было у конкурентов.\r\n\r\n# Результат\r\n\r\n## Компоненты в Figma переработаны с нуля\r\n\r\nДизайн компонентов теперь полностью повторяет функционал кодовой реализации. Учтены все редкие сценарии и краевые состояния. Перед отрисовкой каждого компоненты изучались спецификация+API компонента и все сценарии его использования.\r\n\r\n### **Пример реализации компонента Grid**\r\n\r\nКомпонент Grid — один из самых больших и популярных в линейке Blazor. Представляет собой решение для отображения данных в табличном формате. Включает множество функций для управления данными. Например: фильтрация, группировка, пагинация, сортировка и многое другое.\r\n\r\nОсновную сложность представляет его размер:\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/blazor-3.png\" srcset=\"/images/blog/1x/blazor-3.png 1x, /images/blog/2x/blazor-3@2x.png 2x\" class=\"img-fluid\">\r\n\r\nКомпонент достаточно гибок в настройке. Так как пользователи используют его по-разному. Всё это отражено в дизайне. \r\n\r\nЧтобы отрисовать такой компонент в Figma, задачу разбили на этапе: \r\n\r\n- Изучить решения конкурентов.\r\n- Изучить и собрать файл со скриншотами всех состояний компонента.\r\n- Собрать все под-компоненты.\r\n- Собрать итоговый компонент с разными сценариями использования.\r\n\r\nСобранный в Figma компонент сильно упростил разработку новых фич для грида. Также, упростило создание прототипов для проработки различных сценариев.\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/blazor-4.png\" srcset=\"/images/blog/1x/blazor-4.png 1x, /images/blog/2x/blazor-4@2x.png 2x\" class=\"img-fluid\">\r\n\r\n## Отрисованы новые компоненты\r\n\r\nСоздание новых компонентов включает следующие шаги: \r\n\r\n- Обсудить требования с ПМом.\r\n- Исследовать решения на рынке.\r\n- Утвердить список фич.\r\n- Найти грамотный подход по клавиатурной навигации (поддержка A11Y).\r\n- Отрисовать компонент и все его составляющие.\r\n- Описать компонент в дизайн-токенах.\r\n- Проработать сценарии для демо-стендов.\r\n\r\n### **Пример реализации компонента TreeList**\r\n\r\nКомпонент TreeList — показывает табличные данные в виде древовидной структуры. Пользователи могут сворачивать и разворачивать данные, как им удобно. \r\n\r\nПри подготовке к работе был произведен ресёрч конкурентов, собран список идей и их примерные способы реализации. На каждом этапе приходили синхронизационные встречи с менеджером продукта, разработчиками и другими заинтересованными лицами:\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/blazor-5.png\" srcset=\"/images/blog/1x/blazor-5.png 1x, /images/blog/2x/blazor-5@2x.png 2x\" class=\"img-fluid\">\r\n\r\nСобранный в Figma компонент учитывает все сценарии использовании и состоянии:\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/blazor-6.png\" srcset=\"/images/blog/1x/blazor-6.png 1x, /images/blog/2x/blazor-6@2x.png 2x\" class=\"img-fluid\">\r\n\r\n# **Токенизация**\r\n\r\nКаждый компонент представлен в разных темах. Руками отрисовать или исправлять компонент в каждой теме очень дорого и ресурсозатратно.  \r\n\r\nБыло принято решение использовать дизайн-токены:\r\n\r\n- Чтобы быстро обновлять стили компонента под любую тему.\r\n- Гарантировать единообразие решений.\r\n- Использовать токены как мостик между дизайном и разработкой.\r\n\r\nБыла проведена большая работа над созданием архитектуры и структуры дизайн-токенов:\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/blazor-7.png\" srcset=\"/images/blog/1x/blazor-7.png 1x, /images/blog/2x/blazor-7@2x.png 2x\" class=\"img-fluid\">\r\n\r\nКаждый компонент имеет полное покрытие токенами:\r\n\r\n- color,\r\n- font-weight,\r\n- letter-spacing,\r\n- line-height,\r\n- border-radius,\r\n- border-width,\r\n- font-size,\r\n- text-transform,\r\n- opacity,\r\n- box-shadow,\r\n- size.\r\n\r\nТакой подход позволяет быстро создавать новые темы, просто выставляя новые значения в токенах. Для работы использовался плагин Tokens Studio for Figma. Потому что он позволяет покрыть большое количество типов токенов, в отличии от встроенного Figma Variables.\r\n\r\nВ итоге, любой компонент в Figma легко протестировать с другими стилистическими настройками. А разработчики могут передавать значения токенов из Figma напрямую в свои стили.\r\n\r\n# **Документирование**\r\n\r\nДизайн-система описывает себя тремя основными способами:\r\n\r\n- **Компоненты и сценарии в Figma.** Главная точка входа в дизайн-систему.\r\n- **Дизайн-токены.** Служат мостом между дизайном и кодом.\r\n- **Внутренняя документация.** Содержит договоренности и рекомендации по разным аспектам дизайна: правила наименования, структура токенов, правила отрисовки иконок и так далее. Тут же можно найти результаты ресёрчей относящихся к различным дизайн-задачам.\r\n\r\n# **UI Kit**\r\n\r\nОдним из результатов работы над дизайн-системой стал выпуск UI кита в Figma.\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/blazor-8.png\" srcset=\"/images/blog/1x/blazor-8.png 1x, /images/blog/2x/blazor-8@2x.png 2x\" class=\"img-fluid\">\r\n\r\n# **Результаты**\r\n\r\n- Получилось собрать крепкий каркас дизайн-системы в Figma.\r\n- Сильно улучшилась коммуникация дизайна и продукт менеджеров.\r\n    - Появились еженедельный созвоны с продукт менеджерами.\r\n    - Работа над задачами стала идти быстрее, на всех этапах.\r\n- Работа между дизайном и разработкой стала эффективнее.\r\n    - Макеты стали намного подробнее.\r\n    - Дополнительный слой информации передают дизайн-токены.\r\n- Появилась внутренняя документация.\r\n- Пользователи получили UI kit.', `Summary`='', `FormatterID`='neasden', `OriginalAlias`='blazor', `Uploads`='a:10:{i:0;s:33:\"/images/1x/maxim-petrov-photo.png\";i:1;s:28:\"/images/blog/1x/blazor-2.png\";i:2;s:28:\"/images/blog/1x/blazor-1.png\";i:3;s:15:\"empty-image.jpg\";i:4;s:28:\"/images/blog/1x/blazor-3.png\";i:5;s:28:\"/images/blog/1x/blazor-4.png\";i:6;s:28:\"/images/blog/1x/blazor-5.png\";i:7;s:27:\"/images/blog/1x/blazor6.png\";i:8;s:28:\"/images/blog/1x/blazor-6.png\";i:9;s:28:\"/images/blog/1x/blazor-7.png\";}', `IsPublished`='1', `IsCommentable`='0', `IsVisible`='1', `IsFavourite`='1', `Stamp`='1711384202', `LastModified`='1711819943', `Offset`='14400', `IsDST`='0', `IsIndexed`='0', `IsExternal`='0', `ReadCount`='3', `SourceID`='0', `SourceNoteID`='0', `SourceNoteURL`='', `SourceNoteJSONURL`='', `SourceNoteData`='' WHERE `SubsetID`=1 AND (`ID`=5);

UPDATE `e2BlogNotes` SET `Uploads`='a:11:{i:0;s:33:"/images/1x/maxim-petrov-photo.png";i:1;s:28:"/images/blog/1x/blazor-2.png";i:2;s:28:"/images/blog/1x/blazor-1.png";i:3;s:15:"empty-image.jpg";i:4;s:28:"/images/blog/1x/blazor-3.png";i:5;s:28:"/images/blog/1x/blazor-4.png";i:6;s:28:"/images/blog/1x/blazor-5.png";i:7;s:27:"/images/blog/1x/blazor6.png";i:8;s:28:"/images/blog/1x/blazor-6.png";i:9;s:28:"/images/blog/1x/blazor-7.png";i:10;s:28:"/images/blog/1x/blazor-8.png";}' WHERE `SubsetID`=1 AND `ID`=5;

UPDATE `e2BlogNotes` SET `SubsetID`='1', `Title`='Дизайн-система Blazor', `Text`='DevExpress Blazor — это набор компонентов пользовательского интерфейса. Активно применяется в приложениях на платформе Blazor и предлагает мощный набор компонентов: таблицы данных, календари, планировщики, выпадающие списки, диалоговые окна и многие другие.\r\n\r\nЗадача — переосмыслить и создать дизайн-систему в Figma на основе существующих артефактов и наработок.\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/blazor-1.png\" srcset=\"/images/blog/1x/blazor-1.png 1x, /images/blog/2x/blazor-1@2x.png 2x\" class=\"img-fluid\">\r\n\r\n# Вводные\r\n\r\nBlazor продукт развивался и вместе с этим росло количество и сложность компонентов. Раньше дизайнер рисовал отдельный макет под каждую задачу. Не было системного подхода и единых правил. Со временем этот подход начал приносить проблемы:\r\n- Разработка начала сильно обгонять дизайн.\r\n- Многие решения по краевым сценариям стали приниматься разработчиками.\r\n- Дизайнер тратил много времени на поиск UI и UX багов на поздних этапах.\r\n- Итоговая фича могла сильно отличаться от нарисованного макета.\r\n\r\nОтдельной проблемой была сложность каждого компонента:\r\n- **Разные темы**. В разных темах компонент не только меняет цвет, но и начинает обладать другими визуальными свойствами.\r\n- **Несколько размеров**. Каждый компонент линейки представлен в трёх размерах. \r\n- **Дополнительные стили**. Большой набор стилистических вариантов для компонентов-атомов.\r\n\r\nНапример, одна только кнопка состоит из 150 вариантов компонента:\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/blazor-2.png\" srcset=\"/images/blog/1x/blazor-2.png 1x, /images/blog/2x/blazor-2@2x.png 2x\" class=\"img-fluid\">\r\n\r\nБыло принято решение менять подход — разработать стандарты, правила постановки задач и проектирования.\r\n\r\n# Задачи\r\n\r\nПеред новой дизайн-системой поставили следующие задачи:\r\n\r\n1. **Оптимизация работы команды на этапах дизайна и разработки.** \r\nРаньше, эти процессы были довольно хаотичны. Дизайнер брал в задачу в работу и изображал примерную реализацию компонента. Многие краевые сценарии не учитывались. Какие-то решения в процессе разработки менялись на ходу. В итоге, разработка затягивалась, фичи резались и итоговый результат сильно отличался от исходной картинки.\r\n2. **Автоматизация и консистентность**. \r\nБольшой размер и сложность компонентов сильно затрудняли внесение любых изменений в дизайн. Даже небольшие стилистические изменения в базовом компоненте, типа кнопки, приводили к огромному количеству работы со стороны дизайнера. Так как нужно было учесть разные темы, размеры и стили.\r\n3. **Консистентность цвета**. \r\nОтдельно стоит отметить проблему с цветом. Многие цвета компонентов в коде рассчитывались с помощью миксинов. Это приводило ко многим проблемам, в том числе, проблемам с контрастностью.\r\n4. **Доступность.**\r\nПользователи продукта стали всё чаще интересоваться, насколько компоненты доступны для разных категорий пользователей. Нужно было сформировать подход, когда дизайнер на этапе проработки компонента учитывает все WCAG 2.2 AA требования.\r\n5. **Централизация знаний.**\r\nМногие знания о тех или иных дизайн-решениях нигде не фиксировались. Единственным источником знания были участвующие в работе на фичей члены команды. Нужно было сформировать систему документации.\r\n6. **UI Kit.**\r\nВсё чаще стали приходить запросы на UI Kit от пользователей. В добавок, это уже давно было у конкурентов.\r\n\r\n# Результат\r\n\r\n## Компоненты в Figma переработаны с нуля\r\n\r\nДизайн компонентов теперь полностью повторяет функционал кодовой реализации. Учтены все редкие сценарии и краевые состояния. Перед отрисовкой каждого компоненты изучались спецификация+API компонента и все сценарии его использования.\r\n\r\n### **Пример реализации компонента Grid**\r\n\r\nКомпонент Grid — один из самых больших и популярных в линейке Blazor. Представляет собой решение для отображения данных в табличном формате. Включает множество функций для управления данными. Например: фильтрация, группировка, пагинация, сортировка и многое другое.\r\n\r\nОсновную сложность представляет его размер:\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/blazor-3.png\" srcset=\"/images/blog/1x/blazor-3.png 1x, /images/blog/2x/blazor-3@2x.png 2x\" class=\"img-fluid\">\r\n\r\nКомпонент достаточно гибок в настройке. Так как пользователи используют его по-разному. Всё это отражено в дизайне. \r\n\r\nЧтобы отрисовать такой компонент в Figma, задачу разбили на этапе: \r\n\r\n- Изучить решения конкурентов.\r\n- Изучить и собрать файл со скриншотами всех состояний компонента.\r\n- Собрать все под-компоненты.\r\n- Собрать итоговый компонент с разными сценариями использования.\r\n\r\nСобранный в Figma компонент сильно упростил разработку новых фич для грида. Также, упростило создание прототипов для проработки различных сценариев.\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/blazor-4.png\" srcset=\"/images/blog/1x/blazor-4.png 1x, /images/blog/2x/blazor-4@2x.png 2x\" class=\"img-fluid\">\r\n\r\n## Отрисованы новые компоненты\r\n\r\nСоздание новых компонентов включает следующие шаги: \r\n\r\n- Обсудить требования с ПМом.\r\n- Исследовать решения на рынке.\r\n- Утвердить список фич.\r\n- Найти грамотный подход по клавиатурной навигации (поддержка A11Y).\r\n- Отрисовать компонент и все его составляющие.\r\n- Описать компонент в дизайн-токенах.\r\n- Проработать сценарии для демо-стендов.\r\n\r\n### **Пример реализации компонента TreeList**\r\n\r\nКомпонент TreeList — показывает табличные данные в виде древовидной структуры. Пользователи могут сворачивать и разворачивать данные, как им удобно. \r\n\r\nПри подготовке к работе был произведен ресёрч конкурентов, собран список идей и их примерные способы реализации. На каждом этапе приходили синхронизационные встречи с менеджером продукта, разработчиками и другими заинтересованными лицами:\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/blazor-5.png\" srcset=\"/images/blog/1x/blazor-5.png 1x, /images/blog/2x/blazor-5@2x.png 2x\" class=\"img-fluid\">\r\n\r\nСобранный в Figma компонент учитывает все сценарии использовании и состоянии:\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/blazor-6.png\" srcset=\"/images/blog/1x/blazor-6.png 1x, /images/blog/2x/blazor-6@2x.png 2x\" class=\"img-fluid\">\r\n\r\n# **Токенизация**\r\n\r\nКаждый компонент представлен в разных темах. Руками отрисовать или исправлять компонент в каждой теме очень дорого и ресурсозатратно.  \r\n\r\nБыло принято решение использовать дизайн-токены:\r\n\r\n- Чтобы быстро обновлять стили компонента под любую тему.\r\n- Гарантировать единообразие решений.\r\n- Использовать токены как мостик между дизайном и разработкой.\r\n\r\nБыла проведена большая работа над созданием архитектуры и структуры дизайн-токенов:\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/blazor-7.png\" srcset=\"/images/blog/1x/blazor-7.png 1x, /images/blog/2x/blazor-7@2x.png 2x\" class=\"img-fluid\">\r\n\r\nКаждый компонент имеет полное покрытие токенами:\r\n\r\n- color,\r\n- font-weight,\r\n- letter-spacing,\r\n- line-height,\r\n- border-radius,\r\n- border-width,\r\n- font-size,\r\n- text-transform,\r\n- opacity,\r\n- box-shadow,\r\n- size.\r\n\r\nТакой подход позволяет быстро создавать новые темы, просто выставляя новые значения в токенах. Для работы использовался плагин Tokens Studio for Figma. Потому что он позволяет покрыть большое количество типов токенов, в отличии от встроенного Figma Variables.\r\n\r\nВ итоге, любой компонент в Figma легко протестировать с другими стилистическими настройками. А разработчики могут передавать значения токенов из Figma напрямую в свои стили.\r\n\r\n# **Документирование**\r\n\r\nДизайн-система описывает себя тремя основными способами:\r\n\r\n- **Компоненты и сценарии в Figma.** Главная точка входа в дизайн-систему.\r\n- **Дизайн-токены.** Служат мостом между дизайном и кодом.\r\n- **Внутренняя документация.** Содержит договоренности и рекомендации по разным аспектам дизайна: правила наименования, структура токенов, правила отрисовки иконок и так далее. Тут же можно найти результаты ресёрчей относящихся к различным дизайн-задачам.\r\n\r\n# **UI Kit**\r\n\r\nОдним из результатов работы над дизайн-системой стал выпуск UI кита в Figma.\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/blazor-8.png\" srcset=\"/images/blog/1x/blazor-8.png 1x, /images/blog/2x/blazor-8@2x.png 2x\" class=\"img-fluid\">\r\n\r\n# **Результаты**\r\n\r\n- Получилось собрать крепкий каркас дизайн-системы в Figma.\r\n- Сильно улучшилась коммуникация дизайна и продукт менеджеров.\r\n    - Появились еженедельный созвоны с продукт менеджерами.\r\n    - Работа над задачами стала идти быстрее, на всех этапах.\r\n- Работа между дизайном и разработкой стала эффективнее.\r\n    - Макеты стали намного подробнее.\r\n    - Дополнительный слой информации передают дизайн-токены.\r\n- Появилась внутренняя документация.\r\n- Пользователи получили UI kit.', `Summary`='', `FormatterID`='neasden', `OriginalAlias`='blazor', `Uploads`='a:10:{i:0;s:33:\"/images/1x/maxim-petrov-photo.png\";i:1;s:28:\"/images/blog/1x/blazor-2.png\";i:2;s:28:\"/images/blog/1x/blazor-1.png\";i:3;s:15:\"empty-image.jpg\";i:4;s:28:\"/images/blog/1x/blazor-3.png\";i:5;s:28:\"/images/blog/1x/blazor-4.png\";i:6;s:28:\"/images/blog/1x/blazor-5.png\";i:7;s:27:\"/images/blog/1x/blazor6.png\";i:8;s:28:\"/images/blog/1x/blazor-6.png\";i:9;s:28:\"/images/blog/1x/blazor-7.png\";}', `IsPublished`='1', `IsCommentable`='0', `IsVisible`='1', `IsFavourite`='1', `Stamp`='1711384202', `LastModified`='1711819943', `Offset`='14400', `IsDST`='0', `IsIndexed`='1', `IsExternal`='0', `ReadCount`='3', `SourceID`='0', `SourceNoteID`='0', `SourceNoteURL`='', `SourceNoteJSONURL`='', `SourceNoteData`='' WHERE `SubsetID`=1 AND (`ID`=5);

UPDATE `e2BlogAliases` SET `EntityType`='n', `EntityID`='1', `Alias`='support-center', `Stamp`='1711820100' WHERE `SubsetID`=1 AND (`ID`=1);

UPDATE `e2BlogNotes` SET `SubsetID`='1', `Title`='Support Center', `Text`='Система поддержки пользователей. Включает различные информационные ресурсы: вопросы от пользователей, статьи в базе знаний и истории версий.\r\n\r\nЕжедневно в Support Center создаются сотни новых вопросов и на них отвечают десятки саппорт-инженеров. За годы работы старый интерфейс устарел как внешне, так и с точки зрения удобства и функциональности. Пришла задача полностью переработать платформу, с учётом всех бизнес-требований.\r\n\r\n# Вводная\r\n\r\nСистема состоит из трёх основных порталов:\r\n\r\n- Клиентский портал\r\n- Внутренний портал для сотрудников\r\n- Админ-панель\r\n\r\nКаждым порталом пользуется свой сегмент пользователей. Клиенты компании ожидают простой и понятный интерфейс . В то время как саппорт-инженеры привыкли к определенным сценариям, которые тоже нужно было сохранить.\r\n\r\n# Клиентский портал\r\n\r\nНа этот ресурс были задействованы основные силы. Клиентский портал даёт возможность клиентам задавать вопросы технического характера и получать на них ответы. \r\n\r\nПеред редизайном ставились следующие задачи:\r\n\r\n- **Снизить нагрузку на саппорт-инженеров.** Помочь пользователям находить ответы самостоятельно, если на вопрос уже отвечали ранее или решение описано в документации.\r\n- **Улучшить UX.** Накопился список проблем, которые нужно было решать:\r\n    - **Пользователи выбирают неверный продукт при создании вопроса.** DevExpress разрабатывает и поддерживает десятки продуктов. У каждого продукта могут быть разные платформы и версии. Иногда важно знать, какая ОС установлена у пользователя, каким IDE он пользуется. Нужно было сделать так, чтобы у пользователя не возникали проблемы при выборе нужных значений. Помочь ему на этом пути.\r\n    - **Возникают проблемы при форматировании текста.** Пользователи приходят в поддержку с техническими проблемами. Описание проблемы содержит куски кода или целые архивы с проектами. В старой версии сайта пользователи путались в текстовом редакторе и отправляли не отформатированные куски куда, которые сливались с обычным текстом. Также, пользователи не всегда понимали как аттачить файлы. Всё это приводило к дополнительной нагрузке на саппорт-инженеров.\r\n    - **Пользователи не замечают уведомления об ответах в их тикете.** Проблема касалась как веб-интерфейса, так и уведомлений приходящих пользователю на почту. Пользователи либо не замечали уведомления, либо не понимали к чему они относятся, либо ранее отключали уведомления и забывали об этом. В связи с этим, среднее время на решение таких тикетов значительно увеличивалось.\r\n    - **Клиенты из одной и той же компании не видят вопросы друг друга.** Большинство клиентов предпочитает оставлять свои вопросы приватно. Чтобы их могли видеть только саппорт-инженеры. Из-за этого возникала проблема, что вопросы становились приватными полностью и их не могли видеть даже сотрудники одной и той же компании с разных аккаунтов.\r\n    - **Неудобные фильтры.** Пользователи, что на странице со списком публичных тикетов невозможно ничего найти. Фильтров мало, а то, что есть не всегда работает очевидным образом.\r\n- **Переосмыслить встроенный инструмент “Version History”.**\r\n- **Улучшить аналитику.**\r\n- **Освежить внешний вид.**\r\n\r\n## Подготовка к работе\r\n\r\nПеред началом работы над редизайном была проведена подготовительная работы. Подготовлен общий план работы и проведены встречи со всеми заинтересованными лицами. Был подготовлен итоговый бриф проекта. \r\n\r\nЧасть работ, которые были проведены на этом этапе:\r\n\r\n- **Анализ текущего дизайна.** UX-тестирование текущего сайта, поиск проблем.\r\n- **Ресёрч конкурентов.** Изучение как прямых конкурентов, так и решений крупных платформ. Например, Zendesk, Freshdesk, Zoho Desk.\r\n- **Сбор и анализ существующего фидбека.** За годы работы, накопилось большое количество тикетов, комментарием и другой обратной связи касаемо работы портала. Была проведена большая работу по сбору всей это информации в один документ, её анализу и приоритизации.\r\n- **Сбор информации от саппорт-инженеров.** Инженеры поддержки активнее всего общаются с пользователями и знают детали и проблемы, которые могут быть неизвестны и неочевидны другим членам команды.\r\n- **Изучение текущих данных аналитики и список того, что хотим собирать ещё в новом дизайне.** Для работы с данными использовались:  Google Analytics (+Google Tag Manager), Matomo, внутренние инструменты.\r\n- **Сбор требований от заказчиков и всех заинтересованных лиц.**\r\n- **Подготовка брифа.** Описание проблем, целей и задач. Развёрнутый ответ на вопрос, что мы будем считать успешным редизайном.\r\n\r\n## Процесс\r\n\r\nРабота над сайтом строилась 2-4 недельными спринтами. В конце каждого спринта проводились синхронизационные встречи с заказчиками. \r\n\r\nВ начале работы над дизайном была согласована общая концепция. Отрисованы низко детализированные прототипы с решением основных UX проблем. Найден общий подход к внешнему виду.  \r\n\r\nЧтобы работа над новым дизайном была эффективной и обратная связь поступала как можно быстрее был принят рад мер:\r\n\r\n- Продукт менеджер продукта показывал прототипы и просто картинки небольшой выборке самых активных и заинтересованных пользователей саппорт-центра. Благодаря этому получалось очень быстро собрать много полезной информации, которая помогала намного быстрее замечать точки роста.\r\n- Тесное общение с разработчиками. Так дизайн значительно обгонял разработку, нужно было сразу учитывать технические ограничения. Для этого проводились постоянные встречи между разработчикам, заказчиками и дизайнером. Так мы оценивали техническую сложность каждой фичи и на основе этого принимали решение, будем мы брать её в работу или нет.\r\n- На этапе, когда появилась первая работающая версия сайта, его стали тестировать сотрудники. В первую очередь, к тестированию подключались саппорт-инженеры. На этом этапе было собрано большое количество фидбека как по техническим багам, визуальным багам, так и просто по неудачным UX-решениям.\r\n- На следующем этапе снова к фидбеку снова были подключены активные клиенты. Которые были готовы дать развёрнутый фидбек.\r\n- На одном из финальных этапов сайт стал доступен для всех пользователей, но в виде бета-версии. При этом, каждый пользователь мог вернуться к старой версии сайта. Со временем, пользователей вернувшихся на старый сайт становилось меньше. Также, мы старались собирать фидбек от таких пользователей. Чтобы понять, почему они вернулись на старую версию сайта.\r\n- К новой версии сайта была прикручена продвинутая аналитика.\r\n\r\n## Примеры реализации\r\n\r\n### Релевантные подсказки при создании тикета\r\n\r\n### Подсказки при заполнении деталей, на основе подписки пользователя и прошлых тикетов\r\n\r\n### Упрощена навигация по дискуссии с ветвистой иерархией\r\n\r\n### Обновлён текстовый редактор\r\n\r\n### Обновлены инструменты фильтра на странице со списком тикетов\r\n\r\n### Обновлены почтовые уведомлению, улучшения подписка на уведомления на самом сайте\r\n\r\n# Внутренний портал и админ-панель\r\n\r\nОтдельной крупной задачей была необходимость сделать внутренний портал для сотрудников. Главным вызовом было задача учесть флоу саппорт-инженеров из разных команд. Ингода оно сильно отличалось и нужно было найти решения, которые устроят всех.\r\n\r\nДля этого проводилось множество сложных встреч с саппорт-инженерами из разных команд и топ-саппортом. По каким-то сценариям приходилось идти на компромиссы, по каким-то — выбирать один вариант и убеждать в правильности этого варианта остальных.\r\n\r\nВ результате, судя по опросам и личным разговорам, большая часть сотрудников осталась довольна новой системой.\r\n\r\nТакже, для более гибкой работы и настройки системы под текущие нужды бизнеса была спроектирована админ-панель, где можно точечно настроить различные параметры системы.\r\n\r\nТак как решения внутренние, вдаваться в подробности и показывать скриншоты я не могу.  \r\n\r\n# Результаты\r\n\r\nВ итоге, полный переход на новую версию получился безболезненным. На каждой итерации выявлялись проблемные места и не учтённые сценарий. Большая часть из них решалась, от небольшой части осознанно отказывались.\r\n\r\nСтарая версия сайта постепенно была отключена, когда количество её пользователей стало совсем небольшим.\r\n\r\nОбщая оценка редизайна была оценена как успешная. Как со стороны клиентов, так и со стороны сотрудников. Поставленные перед редизайном цели были достигнуты:\r\n\r\n- **Уменьшилась нагрузка на саппорт-инженеров.**\r\n    - Пользователи стали чаще находить решения самостоятельно: улучшен движок поиска, предлагаются релевантные ссылки при создании тикета, улучшена фильтрация.\r\n    - Пользователи стали реже ошибаться с выбором платформы/продукта и других деталей при создании тикета.\r\n    - Во внутреннем портале появились инструменты, помогающие саппорт-инженерам быстрее отвечать на тикеты, ответ на которые уже давался ранее.\r\n- **Не отформатированные тикеты появляются гораздо реже.** Решилась проблема с тем, что пользователи не понимали, как отправлять аттачи.\r\n- **Уменьшилось количество проблем, когда пользователи не получают уведомления вовремя.**\r\n    - В настройках уведомлений появился отдельный чекбокс, для получения уведомлений от саппорт-центра (раньше был единый чекбокс, для всех почтовых рассылок).\r\n    - Даже если пользователь отключил уведомления от таких рассылок, то саппорт-инженер будет об этом знать. И, если у пользователя возникают с этим проблемы, подсказать варианты решения.\r\n    - Сами почтовые уведомления стали понятнее, появилась возможность подключить браузерные уведомления.\r\n    - Появилась возможность подписать на рассылку на любой тикет со страницы этого тикета.\r\n- **Более точечно настроена аналитика.**\r\n    - Саппорт-инженер теперь может видеть карточку пользователя с историей посещений тикетов и документов в документации. Так инженер поддержки сразу может понять, какие ссылки есть смысл советовать, а какие — нет, так как пользователь их уже посещал.\r\n    - Добавлены ивенты на целевые действия.\r\n    - Созданный внутренние дашборды с анализом различных данных, необходимых для оценки поступаемого  количества тикетов и оценки эффективности саппорта.\r\n- **Поиск по тикетам стал гибче и проще.**\r\n    - Были докручены мета-теги, чтобы тикеты лучше искались поисковиками.\r\n    - Переосмыслены фильтры, добавлены готовые пресеты и возможность подписаться на созданный фильтр.\r\n    - Оптимизирована внутренняя страница поиска.\r\n- **Сделана мобильная версия клиентского портала.**', `Summary`='', `FormatterID`='neasden', `OriginalAlias`='support-center', `Uploads`='a:0:{}', `IsPublished`='1', `IsCommentable`='0', `IsVisible`='1', `IsFavourite`='1', `Stamp`='1711383800', `LastModified`='1711820100', `Offset`='14400', `IsDST`='0', `IsIndexed`='0', `IsExternal`='0', `ReadCount`='1', `SourceID`='0', `SourceNoteID`='0', `SourceNoteURL`='', `SourceNoteJSONURL`='', `SourceNoteData`='' WHERE `SubsetID`=1 AND (`ID`=1);

UPDATE `e2BlogNotes` SET `SubsetID`='1', `Title`='Support Center', `Text`='Система поддержки пользователей. Включает различные информационные ресурсы: вопросы от пользователей, статьи в базе знаний и истории версий.\r\n\r\nЕжедневно в Support Center создаются сотни новых вопросов и на них отвечают десятки саппорт-инженеров. За годы работы старый интерфейс устарел как внешне, так и с точки зрения удобства и функциональности. Пришла задача полностью переработать платформу, с учётом всех бизнес-требований.\r\n\r\n# Вводная\r\n\r\nСистема состоит из трёх основных порталов:\r\n\r\n- Клиентский портал\r\n- Внутренний портал для сотрудников\r\n- Админ-панель\r\n\r\nКаждым порталом пользуется свой сегмент пользователей. Клиенты компании ожидают простой и понятный интерфейс . В то время как саппорт-инженеры привыкли к определенным сценариям, которые тоже нужно было сохранить.\r\n\r\n# Клиентский портал\r\n\r\nНа этот ресурс были задействованы основные силы. Клиентский портал даёт возможность клиентам задавать вопросы технического характера и получать на них ответы. \r\n\r\nПеред редизайном ставились следующие задачи:\r\n\r\n- **Снизить нагрузку на саппорт-инженеров.** Помочь пользователям находить ответы самостоятельно, если на вопрос уже отвечали ранее или решение описано в документации.\r\n- **Улучшить UX.** Накопился список проблем, которые нужно было решать:\r\n    - **Пользователи выбирают неверный продукт при создании вопроса.** DevExpress разрабатывает и поддерживает десятки продуктов. У каждого продукта могут быть разные платформы и версии. Иногда важно знать, какая ОС установлена у пользователя, каким IDE он пользуется. Нужно было сделать так, чтобы у пользователя не возникали проблемы при выборе нужных значений. Помочь ему на этом пути.\r\n    - **Возникают проблемы при форматировании текста.** Пользователи приходят в поддержку с техническими проблемами. Описание проблемы содержит куски кода или целые архивы с проектами. В старой версии сайта пользователи путались в текстовом редакторе и отправляли не отформатированные куски куда, которые сливались с обычным текстом. Также, пользователи не всегда понимали как аттачить файлы. Всё это приводило к дополнительной нагрузке на саппорт-инженеров.\r\n    - **Пользователи не замечают уведомления об ответах в их тикете.** Проблема касалась как веб-интерфейса, так и уведомлений приходящих пользователю на почту. Пользователи либо не замечали уведомления, либо не понимали к чему они относятся, либо ранее отключали уведомления и забывали об этом. В связи с этим, среднее время на решение таких тикетов значительно увеличивалось.\r\n    - **Клиенты из одной и той же компании не видят вопросы друг друга.** Большинство клиентов предпочитает оставлять свои вопросы приватно. Чтобы их могли видеть только саппорт-инженеры. Из-за этого возникала проблема, что вопросы становились приватными полностью и их не могли видеть даже сотрудники одной и той же компании с разных аккаунтов.\r\n    - **Неудобные фильтры.** Пользователи, что на странице со списком публичных тикетов невозможно ничего найти. Фильтров мало, а то, что есть не всегда работает очевидным образом.\r\n- **Переосмыслить встроенный инструмент “Version History”.**\r\n- **Улучшить аналитику.**\r\n- **Освежить внешний вид.**\r\n\r\n## Подготовка к работе\r\n\r\nПеред началом работы над редизайном была проведена подготовительная работы. Подготовлен общий план работы и проведены встречи со всеми заинтересованными лицами. Был подготовлен итоговый бриф проекта. \r\n\r\nЧасть работ, которые были проведены на этом этапе:\r\n\r\n- **Анализ текущего дизайна.** UX-тестирование текущего сайта, поиск проблем.\r\n- **Ресёрч конкурентов.** Изучение как прямых конкурентов, так и решений крупных платформ. Например, Zendesk, Freshdesk, Zoho Desk.\r\n- **Сбор и анализ существующего фидбека.** За годы работы, накопилось большое количество тикетов, комментарием и другой обратной связи касаемо работы портала. Была проведена большая работу по сбору всей это информации в один документ, её анализу и приоритизации.\r\n- **Сбор информации от саппорт-инженеров.** Инженеры поддержки активнее всего общаются с пользователями и знают детали и проблемы, которые могут быть неизвестны и неочевидны другим членам команды.\r\n- **Изучение текущих данных аналитики и список того, что хотим собирать ещё в новом дизайне.** Для работы с данными использовались:  Google Analytics (+Google Tag Manager), Matomo, внутренние инструменты.\r\n- **Сбор требований от заказчиков и всех заинтересованных лиц.**\r\n- **Подготовка брифа.** Описание проблем, целей и задач. Развёрнутый ответ на вопрос, что мы будем считать успешным редизайном.\r\n\r\n## Процесс\r\n\r\nРабота над сайтом строилась 2-4 недельными спринтами. В конце каждого спринта проводились синхронизационные встречи с заказчиками. \r\n\r\nВ начале работы над дизайном была согласована общая концепция. Отрисованы низко детализированные прототипы с решением основных UX проблем. Найден общий подход к внешнему виду.  \r\n\r\nЧтобы работа над новым дизайном была эффективной и обратная связь поступала как можно быстрее был принят рад мер:\r\n\r\n- Продукт менеджер продукта показывал прототипы и просто картинки небольшой выборке самых активных и заинтересованных пользователей саппорт-центра. Благодаря этому получалось очень быстро собрать много полезной информации, которая помогала намного быстрее замечать точки роста.\r\n- Тесное общение с разработчиками. Так дизайн значительно обгонял разработку, нужно было сразу учитывать технические ограничения. Для этого проводились постоянные встречи между разработчикам, заказчиками и дизайнером. Так мы оценивали техническую сложность каждой фичи и на основе этого принимали решение, будем мы брать её в работу или нет.\r\n- На этапе, когда появилась первая работающая версия сайта, его стали тестировать сотрудники. В первую очередь, к тестированию подключались саппорт-инженеры. На этом этапе было собрано большое количество фидбека как по техническим багам, визуальным багам, так и просто по неудачным UX-решениям.\r\n- На следующем этапе снова к фидбеку снова были подключены активные клиенты. Которые были готовы дать развёрнутый фидбек.\r\n- На одном из финальных этапов сайт стал доступен для всех пользователей, но в виде бета-версии. При этом, каждый пользователь мог вернуться к старой версии сайта. Со временем, пользователей вернувшихся на старый сайт становилось меньше. Также, мы старались собирать фидбек от таких пользователей. Чтобы понять, почему они вернулись на старую версию сайта.\r\n- К новой версии сайта была прикручена продвинутая аналитика.\r\n\r\n## Примеры реализации\r\n\r\n### Релевантные подсказки при создании тикета\r\n\r\n### Подсказки при заполнении деталей, на основе подписки пользователя и прошлых тикетов\r\n\r\n### Упрощена навигация по дискуссии с ветвистой иерархией\r\n\r\n### Обновлён текстовый редактор\r\n\r\n### Обновлены инструменты фильтра на странице со списком тикетов\r\n\r\n### Обновлены почтовые уведомлению, улучшения подписка на уведомления на самом сайте\r\n\r\n# Внутренний портал и админ-панель\r\n\r\nОтдельной крупной задачей была необходимость сделать внутренний портал для сотрудников. Главным вызовом было задача учесть флоу саппорт-инженеров из разных команд. Ингода оно сильно отличалось и нужно было найти решения, которые устроят всех.\r\n\r\nДля этого проводилось множество сложных встреч с саппорт-инженерами из разных команд и топ-саппортом. По каким-то сценариям приходилось идти на компромиссы, по каким-то — выбирать один вариант и убеждать в правильности этого варианта остальных.\r\n\r\nВ результате, судя по опросам и личным разговорам, большая часть сотрудников осталась довольна новой системой.\r\n\r\nТакже, для более гибкой работы и настройки системы под текущие нужды бизнеса была спроектирована админ-панель, где можно точечно настроить различные параметры системы.\r\n\r\nТак как решения внутренние, вдаваться в подробности и показывать скриншоты я не могу.  \r\n\r\n# Результаты\r\n\r\nВ итоге, полный переход на новую версию получился безболезненным. На каждой итерации выявлялись проблемные места и не учтённые сценарий. Большая часть из них решалась, от небольшой части осознанно отказывались.\r\n\r\nСтарая версия сайта постепенно была отключена, когда количество её пользователей стало совсем небольшим.\r\n\r\nОбщая оценка редизайна была оценена как успешная. Как со стороны клиентов, так и со стороны сотрудников. Поставленные перед редизайном цели были достигнуты:\r\n\r\n- **Уменьшилась нагрузка на саппорт-инженеров.**\r\n    - Пользователи стали чаще находить решения самостоятельно: улучшен движок поиска, предлагаются релевантные ссылки при создании тикета, улучшена фильтрация.\r\n    - Пользователи стали реже ошибаться с выбором платформы/продукта и других деталей при создании тикета.\r\n    - Во внутреннем портале появились инструменты, помогающие саппорт-инженерам быстрее отвечать на тикеты, ответ на которые уже давался ранее.\r\n- **Не отформатированные тикеты появляются гораздо реже.** Решилась проблема с тем, что пользователи не понимали, как отправлять аттачи.\r\n- **Уменьшилось количество проблем, когда пользователи не получают уведомления вовремя.**\r\n    - В настройках уведомлений появился отдельный чекбокс, для получения уведомлений от саппорт-центра (раньше был единый чекбокс, для всех почтовых рассылок).\r\n    - Даже если пользователь отключил уведомления от таких рассылок, то саппорт-инженер будет об этом знать. И, если у пользователя возникают с этим проблемы, подсказать варианты решения.\r\n    - Сами почтовые уведомления стали понятнее, появилась возможность подключить браузерные уведомления.\r\n    - Появилась возможность подписать на рассылку на любой тикет со страницы этого тикета.\r\n- **Более точечно настроена аналитика.**\r\n    - Саппорт-инженер теперь может видеть карточку пользователя с историей посещений тикетов и документов в документации. Так инженер поддержки сразу может понять, какие ссылки есть смысл советовать, а какие — нет, так как пользователь их уже посещал.\r\n    - Добавлены ивенты на целевые действия.\r\n    - Созданный внутренние дашборды с анализом различных данных, необходимых для оценки поступаемого  количества тикетов и оценки эффективности саппорта.\r\n- **Поиск по тикетам стал гибче и проще.**\r\n    - Были докручены мета-теги, чтобы тикеты лучше искались поисковиками.\r\n    - Переосмыслены фильтры, добавлены готовые пресеты и возможность подписаться на созданный фильтр.\r\n    - Оптимизирована внутренняя страница поиска.\r\n- **Сделана мобильная версия клиентского портала.**', `Summary`='', `FormatterID`='neasden', `OriginalAlias`='support-center', `Uploads`='a:0:{}', `IsPublished`='1', `IsCommentable`='0', `IsVisible`='1', `IsFavourite`='1', `Stamp`='1711383800', `LastModified`='1711820100', `Offset`='14400', `IsDST`='0', `IsIndexed`='1', `IsExternal`='0', `ReadCount`='1', `SourceID`='0', `SourceNoteID`='0', `SourceNoteURL`='', `SourceNoteJSONURL`='', `SourceNoteData`='' WHERE `SubsetID`=1 AND (`ID`=1);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 1;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '1', '1711818000', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1709228439);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 4;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '4', '1711818000', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1709228439);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 3;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '3', '1711818000', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1709228440);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 2;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '2', '1711818000', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1709228440);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1711818000', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1709228446);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 6;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '6', '1711818000', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1709228457);

UPDATE `e2BlogNotes` SET `SubsetID`='1', `Title`='Дизайн-система Blazor', `Text`='DevExpress Blazor — это набор компонентов пользовательского интерфейса. Активно применяется в приложениях на платформе Blazor и предлагает мощный набор компонентов: таблицы данных, календари, планировщики, выпадающие списки, диалоговые окна и многие другие.\r\n\r\nЗадача — переосмыслить и создать дизайн-систему в Figma на основе существующих артефактов и наработок.\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/blazor-1.png\" srcset=\"/images/blog/1x/blazor-1.png 1x, /images/blog/2x/blazor-1@2x.png 2x\" class=\"img-fluid\">\r\n\r\n# Вводные\r\n\r\nBlazor продукт развивался и вместе с этим росло количество и сложность компонентов. Раньше дизайнер рисовал отдельный макет под каждую задачу. Не было системного подхода и единых правил. Со временем этот подход начал приносить проблемы:\r\n- Разработка начала сильно обгонять дизайн.\r\n- Многие решения по краевым сценариям стали приниматься разработчиками.\r\n- Дизайнер тратил много времени на поиск UI и UX багов на поздних этапах.\r\n- Итоговая фича могла сильно отличаться от нарисованного макета.\r\n\r\nОтдельной проблемой была сложность каждого компонента:\r\n- **Разные темы**. В разных темах компонент не только меняет цвет, но и начинает обладать другими визуальными свойствами.\r\n- **Несколько размеров**. Каждый компонент линейки представлен в трёх размерах. \r\n- **Дополнительные стили**. Большой набор стилистических вариантов для компонентов-атомов.\r\n\r\nНапример, одна только кнопка состоит из 150 вариантов компонента:\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/blazor-2.png\" srcset=\"/images/blog/1x/blazor-2.png 1x, /images/blog/2x/blazor-2@2x.png 2x\" class=\"img-fluid\">\r\n\r\nБыло принято решение менять подход — разработать стандарты, правила постановки задач и проектирования.\r\n\r\n# Задачи\r\n\r\nПеред новой дизайн-системой поставили следующие задачи:\r\n\r\n1. **Оптимизация работы команды на этапах дизайна и разработки.** \r\nРаньше, эти процессы были довольно хаотичны. Дизайнер брал в задачу в работу и изображал примерную реализацию компонента. Многие краевые сценарии не учитывались. Какие-то решения в процессе разработки менялись на ходу. В итоге, разработка затягивалась, фичи резались и итоговый результат сильно отличался от исходной картинки.\r\n2. **Автоматизация и консистентность**. \r\nБольшой размер и сложность компонентов сильно затрудняли внесение любых изменений в дизайн. Даже небольшие стилистические изменения в базовом компоненте, типа кнопки, приводили к огромному количеству работы со стороны дизайнера. Так как нужно было учесть разные темы, размеры и стили.\r\n3. **Консистентность цвета**. \r\nОтдельно стоит отметить проблему с цветом. Многие цвета компонентов в коде рассчитывались с помощью миксинов. Это приводило ко многим проблемам, в том числе, проблемам с контрастностью.\r\n4. **Доступность.**\r\nПользователи продукта стали всё чаще интересоваться, насколько компоненты доступны для разных категорий пользователей. Нужно было сформировать подход, когда дизайнер на этапе проработки компонента учитывает все WCAG 2.2 AA требования.\r\n5. **Централизация знаний.**\r\nМногие знания о тех или иных дизайн-решениях нигде не фиксировались. Единственным источником знания были участвующие в работе на фичей члены команды. Нужно было сформировать систему документации.\r\n6. **UI Kit.**\r\nВсё чаще стали приходить запросы на UI Kit от пользователей. В добавок, это уже давно было у конкурентов.\r\n\r\n# Результат\r\n\r\n## Компоненты в Figma переработаны с нуля\r\n\r\nДизайн компонентов теперь полностью повторяет функционал кодовой реализации. Учтены все редкие сценарии и краевые состояния. Перед отрисовкой каждого компоненты изучались спецификация+API компонента и все сценарии его использования.\r\n\r\n### **Пример реализации компонента Grid**\r\n\r\nКомпонент Grid — один из самых больших и популярных в линейке Blazor. Представляет собой решение для отображения данных в табличном формате. Включает множество функций для управления данными. Например: фильтрация, группировка, пагинация, сортировка и многое другое.\r\n\r\nОсновную сложность представляет его размер:\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/blazor-3.png\" srcset=\"/images/blog/1x/blazor-3.png 1x, /images/blog/2x/blazor-3@2x.png 2x\" class=\"img-fluid\">\r\n\r\nКомпонент достаточно гибок в настройке. Так как пользователи используют его по-разному. Всё это отражено в дизайне. \r\n\r\nЧтобы отрисовать такой компонент в Figma, задачу разбили на этапе: \r\n\r\n- Изучить решения конкурентов.\r\n- Изучить и собрать файл со скриншотами всех состояний компонента.\r\n- Собрать все под-компоненты.\r\n- Собрать итоговый компонент с разными сценариями использования.\r\n\r\nСобранный в Figma компонент сильно упростил разработку новых фич для грида. Также, упростило создание прототипов для проработки различных сценариев.\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/blazor-4.png\" srcset=\"/images/blog/1x/blazor-4.png 1x, /images/blog/2x/blazor-4@2x.png 2x\" class=\"img-fluid\">\r\n\r\n## Отрисованы новые компоненты\r\n\r\nСоздание новых компонентов включает следующие шаги: \r\n\r\n- Обсудить требования с ПМом.\r\n- Исследовать решения на рынке.\r\n- Утвердить список фич.\r\n- Найти грамотный подход по клавиатурной навигации (поддержка A11Y).\r\n- Отрисовать компонент и все его составляющие.\r\n- Описать компонент в дизайн-токенах.\r\n- Проработать сценарии для демо-стендов.\r\n\r\n### **Пример реализации компонента TreeList**\r\n\r\nКомпонент TreeList — показывает табличные данные в виде древовидной структуры. Пользователи могут сворачивать и разворачивать данные, как им удобно. \r\n\r\nПри подготовке к работе был произведен ресёрч конкурентов, собран список идей и их примерные способы реализации. На каждом этапе приходили синхронизационные встречи с менеджером продукта, разработчиками и другими заинтересованными лицами:\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/blazor-5.png\" srcset=\"/images/blog/1x/blazor-5.png 1x, /images/blog/2x/blazor-5@2x.png 2x\" class=\"img-fluid\">\r\n\r\nСобранный в Figma компонент учитывает все сценарии использовании и состоянии:\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/blazor-6.png\" srcset=\"/images/blog/1x/blazor-6.png 1x, /images/blog/2x/blazor-6@2x.png 2x\" class=\"img-fluid\">\r\n\r\n# **Токенизация**\r\n\r\nКаждый компонент представлен в разных темах. Руками отрисовать или исправлять компонент в каждой теме очень дорого и ресурсозатратно.  \r\n\r\nБыло принято решение использовать дизайн-токены:\r\n\r\n- Чтобы быстро обновлять стили компонента под любую тему.\r\n- Гарантировать единообразие решений.\r\n- Использовать токены как мостик между дизайном и разработкой.\r\n\r\nБыла проведена большая работа над созданием архитектуры и структуры дизайн-токенов:\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/blazor-7.png\" srcset=\"/images/blog/1x/blazor-7.png 1x, /images/blog/2x/blazor-7@2x.png 2x\" class=\"img-fluid\">\r\n\r\nКаждый компонент имеет полное покрытие токенами:\r\n\r\n- color,\r\n- font-weight,\r\n- letter-spacing,\r\n- line-height,\r\n- border-radius,\r\n- border-width,\r\n- font-size,\r\n- text-transform,\r\n- opacity,\r\n- box-shadow,\r\n- size.\r\n\r\nТакой подход позволяет быстро создавать новые темы, просто выставляя новые значения в токенах. Для работы использовался плагин Tokens Studio for Figma. Потому что он позволяет покрыть большое количество типов токенов, в отличии от встроенного Figma Variables.\r\n\r\nВ итоге, любой компонент в Figma легко протестировать с другими стилистическими настройками. А разработчики могут передавать значения токенов из Figma напрямую в свои стили.\r\n\r\n# **Документирование**\r\n\r\nДизайн-система описывает себя тремя основными способами:\r\n\r\n- **Компоненты и сценарии в Figma.** Главная точка входа в дизайн-систему.\r\n- **Дизайн-токены.** Служат мостом между дизайном и кодом.\r\n- **Внутренняя документация.** Содержит договоренности и рекомендации по разным аспектам дизайна: правила наименования, структура токенов, правила отрисовки иконок и так далее. Тут же можно найти результаты ресёрчей относящихся к различным дизайн-задачам.\r\n\r\n# **UI Kit**\r\n\r\nОдним из результатов работы над дизайн-системой стал выпуск UI кита в Figma.\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/blazor-8.png\" srcset=\"/images/blog/1x/blazor-8.png 1x, /images/blog/2x/blazor-8@2x.png 2x\" class=\"img-fluid\">\r\n\r\n# **Результаты**\r\n\r\n- Получилось собрать крепкий каркас дизайн-системы в Figma.\r\n- Сильно улучшилась коммуникация дизайна и продукт менеджеров.\r\n    - Появились еженедельный созвоны с продукт менеджерами.\r\n    - Работа над задачами стала идти быстрее, на всех этапах.\r\n- Работа между дизайном и разработкой стала эффективнее.\r\n    - Макеты стали намного подробнее.\r\n    - Дополнительный слой информации передают дизайн-токены.\r\n- Появилась внутренняя документация.\r\n- Пользователи получили UI kit.', `Summary`='', `FormatterID`='neasden', `OriginalAlias`='blazor', `Uploads`='a:11:{i:0;s:33:\"/images/1x/maxim-petrov-photo.png\";i:1;s:28:\"/images/blog/1x/blazor-2.png\";i:2;s:28:\"/images/blog/1x/blazor-1.png\";i:3;s:15:\"empty-image.jpg\";i:4;s:28:\"/images/blog/1x/blazor-3.png\";i:5;s:28:\"/images/blog/1x/blazor-4.png\";i:6;s:28:\"/images/blog/1x/blazor-5.png\";i:7;s:27:\"/images/blog/1x/blazor6.png\";i:8;s:28:\"/images/blog/1x/blazor-6.png\";i:9;s:28:\"/images/blog/1x/blazor-7.png\";i:17;s:28:\"/images/blog/1x/blazor-8.png\";}', `IsPublished`='1', `IsCommentable`='0', `IsVisible`='1', `IsFavourite`='1', `Stamp`='1711384202', `LastModified`='1711819943', `Offset`='14400', `IsDST`='0', `IsIndexed`='1', `IsExternal`='0', `ReadCount`='4', `SourceID`='0', `SourceNoteID`='0', `SourceNoteURL`='', `SourceNoteJSONURL`='', `SourceNoteData`='' WHERE `SubsetID`=1 AND (`ID`=5);

UPDATE `e2BlogAliases` SET `EntityType`='n', `EntityID`='1', `Alias`='support-center', `Stamp`='1711821011' WHERE `SubsetID`=1 AND (`ID`=1);

UPDATE `e2BlogNotes` SET `SubsetID`='1', `Title`='Support Center', `Text`='Система поддержки пользователей. Включает различные информационные ресурсы: вопросы от пользователей, статьи в базе знаний и истории версий.\r\n\r\nЕжедневно в Support Center создаются сотни новых вопросов и на них отвечают десятки саппорт-инженеров. За годы работы старый интерфейс устарел как внешне, так и с точки зрения удобства и функциональности. Пришла задача полностью переработать платформу, с учётом всех бизнес-требований.\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/sc-1.png\" srcset=\"/images/blog/1x/sc-1.png 1x, /images/blog/2x/sc-1@2x.png 2x\" class=\"img-fluid\">\r\n\r\n# Вводная\r\n\r\nСистема состоит из трёх основных порталов:\r\n\r\n- Клиентский портал\r\n- Внутренний портал для сотрудников\r\n- Админ-панель\r\n\r\nКаждым порталом пользуется свой сегмент пользователей. Клиенты компании ожидают простой и понятный интерфейс . В то время как саппорт-инженеры привыкли к определенным сценариям, которые тоже нужно было сохранить.\r\n\r\n# Клиентский портал\r\n\r\nНа этот ресурс были задействованы основные силы. Клиентский портал даёт возможность клиентам задавать вопросы технического характера и получать на них ответы. \r\n\r\nПеред редизайном ставились следующие задачи:\r\n\r\n- **Снизить нагрузку на саппорт-инженеров.** Помочь пользователям находить ответы самостоятельно, если на вопрос уже отвечали ранее или решение описано в документации.\r\n- **Улучшить UX.** Накопился список проблем, которые нужно было решать:\r\n    - **Пользователи выбирают неверный продукт при создании вопроса.** DevExpress разрабатывает и поддерживает десятки продуктов. У каждого продукта могут быть разные платформы и версии. Иногда важно знать, какая ОС установлена у пользователя, каким IDE он пользуется. Нужно было сделать так, чтобы у пользователя не возникали проблемы при выборе нужных значений. Помочь ему на этом пути.\r\n    - **Возникают проблемы при форматировании текста.** Пользователи приходят в поддержку с техническими проблемами. Описание проблемы содержит куски кода или целые архивы с проектами. В старой версии сайта пользователи путались в текстовом редакторе и отправляли не отформатированные куски куда, которые сливались с обычным текстом. Также, пользователи не всегда понимали как аттачить файлы. Всё это приводило к дополнительной нагрузке на саппорт-инженеров.\r\n    - **Пользователи не замечают уведомления об ответах в их тикете.** Проблема касалась как веб-интерфейса, так и уведомлений приходящих пользователю на почту. Пользователи либо не замечали уведомления, либо не понимали к чему они относятся, либо ранее отключали уведомления и забывали об этом. В связи с этим, среднее время на решение таких тикетов значительно увеличивалось.\r\n    - **Клиенты из одной и той же компании не видят вопросы друг друга.** Большинство клиентов предпочитает оставлять свои вопросы приватно. Чтобы их могли видеть только саппорт-инженеры. Из-за этого возникала проблема, что вопросы становились приватными полностью и их не могли видеть даже сотрудники одной и той же компании с разных аккаунтов.\r\n    - **Неудобные фильтры.** Пользователи, что на странице со списком публичных тикетов невозможно ничего найти. Фильтров мало, а то, что есть не всегда работает очевидным образом.\r\n- **Переосмыслить встроенный инструмент “Version History”.**\r\n- **Улучшить аналитику.**\r\n- **Освежить внешний вид.**\r\n\r\n## Подготовка к работе\r\n\r\nПеред началом работы над редизайном была проведена подготовительная работы. Подготовлен общий план работы и проведены встречи со всеми заинтересованными лицами. Был подготовлен итоговый бриф проекта. \r\n\r\nЧасть работ, которые были проведены на этом этапе:\r\n\r\n- **Анализ текущего дизайна.** UX-тестирование текущего сайта, поиск проблем.\r\n- **Ресёрч конкурентов.** Изучение как прямых конкурентов, так и решений крупных платформ. Например, Zendesk, Freshdesk, Zoho Desk.\r\n- **Сбор и анализ существующего фидбека.** За годы работы, накопилось большое количество тикетов, комментарием и другой обратной связи касаемо работы портала. Была проведена большая работу по сбору всей это информации в один документ, её анализу и приоритизации.\r\n- **Сбор информации от саппорт-инженеров.** Инженеры поддержки активнее всего общаются с пользователями и знают детали и проблемы, которые могут быть неизвестны и неочевидны другим членам команды.\r\n- **Изучение текущих данных аналитики и список того, что хотим собирать ещё в новом дизайне.** Для работы с данными использовались:  Google Analytics (+Google Tag Manager), Matomo, внутренние инструменты.\r\n- **Сбор требований от заказчиков и всех заинтересованных лиц.**\r\n- **Подготовка брифа.** Описание проблем, целей и задач. Развёрнутый ответ на вопрос, что мы будем считать успешным редизайном.\r\n\r\n## Процесс\r\n\r\nРабота над сайтом строилась 2-4 недельными спринтами. В конце каждого спринта проводились синхронизационные встречи с заказчиками. \r\n\r\nВ начале работы над дизайном была согласована общая концепция. Отрисованы низко детализированные прототипы с решением основных UX проблем. Найден общий подход к внешнему виду.  \r\n\r\nЧтобы работа над новым дизайном была эффективной и обратная связь поступала как можно быстрее был принят рад мер:\r\n\r\n- Продукт менеджер продукта показывал прототипы и просто картинки небольшой выборке самых активных и заинтересованных пользователей саппорт-центра. Благодаря этому получалось очень быстро собрать много полезной информации, которая помогала намного быстрее замечать точки роста.\r\n- Тесное общение с разработчиками. Так дизайн значительно обгонял разработку, нужно было сразу учитывать технические ограничения. Для этого проводились постоянные встречи между разработчикам, заказчиками и дизайнером. Так мы оценивали техническую сложность каждой фичи и на основе этого принимали решение, будем мы брать её в работу или нет.\r\n- На этапе, когда появилась первая работающая версия сайта, его стали тестировать сотрудники. В первую очередь, к тестированию подключались саппорт-инженеры. На этом этапе было собрано большое количество фидбека как по техническим багам, визуальным багам, так и просто по неудачным UX-решениям.\r\n- На следующем этапе снова к фидбеку снова были подключены активные клиенты. Которые были готовы дать развёрнутый фидбек.\r\n- На одном из финальных этапов сайт стал доступен для всех пользователей, но в виде бета-версии. При этом, каждый пользователь мог вернуться к старой версии сайта. Со временем, пользователей вернувшихся на старый сайт становилось меньше. Также, мы старались собирать фидбек от таких пользователей. Чтобы понять, почему они вернулись на старую версию сайта.\r\n- К новой версии сайта была прикручена продвинутая аналитика.\r\n\r\n## Примеры реализации\r\n\r\n### Релевантные подсказки при создании тикета\r\n\r\n### Подсказки при заполнении деталей, на основе подписки пользователя и прошлых тикетов\r\n\r\n### Упрощена навигация по дискуссии с ветвистой иерархией\r\n\r\n### Обновлён текстовый редактор\r\n\r\n### Обновлены инструменты фильтра на странице со списком тикетов\r\n\r\n### Обновлены почтовые уведомлению, улучшения подписка на уведомления на самом сайте\r\n\r\n# Внутренний портал и админ-панель\r\n\r\nОтдельной крупной задачей была необходимость сделать внутренний портал для сотрудников. Главным вызовом было задача учесть флоу саппорт-инженеров из разных команд. Ингода оно сильно отличалось и нужно было найти решения, которые устроят всех.\r\n\r\nДля этого проводилось множество сложных встреч с саппорт-инженерами из разных команд и топ-саппортом. По каким-то сценариям приходилось идти на компромиссы, по каким-то — выбирать один вариант и убеждать в правильности этого варианта остальных.\r\n\r\nВ результате, судя по опросам и личным разговорам, большая часть сотрудников осталась довольна новой системой.\r\n\r\nТакже, для более гибкой работы и настройки системы под текущие нужды бизнеса была спроектирована админ-панель, где можно точечно настроить различные параметры системы.\r\n\r\nТак как решения внутренние, вдаваться в подробности и показывать скриншоты я не могу.  \r\n\r\n# Результаты\r\n\r\nВ итоге, полный переход на новую версию получился безболезненным. На каждой итерации выявлялись проблемные места и не учтённые сценарий. Большая часть из них решалась, от небольшой части осознанно отказывались.\r\n\r\nСтарая версия сайта постепенно была отключена, когда количество её пользователей стало совсем небольшим.\r\n\r\nОбщая оценка редизайна была оценена как успешная. Как со стороны клиентов, так и со стороны сотрудников. Поставленные перед редизайном цели были достигнуты:\r\n\r\n- **Уменьшилась нагрузка на саппорт-инженеров.**\r\n    - Пользователи стали чаще находить решения самостоятельно: улучшен движок поиска, предлагаются релевантные ссылки при создании тикета, улучшена фильтрация.\r\n    - Пользователи стали реже ошибаться с выбором платформы/продукта и других деталей при создании тикета.\r\n    - Во внутреннем портале появились инструменты, помогающие саппорт-инженерам быстрее отвечать на тикеты, ответ на которые уже давался ранее.\r\n- **Не отформатированные тикеты появляются гораздо реже.** Решилась проблема с тем, что пользователи не понимали, как отправлять аттачи.\r\n- **Уменьшилось количество проблем, когда пользователи не получают уведомления вовремя.**\r\n    - В настройках уведомлений появился отдельный чекбокс, для получения уведомлений от саппорт-центра (раньше был единый чекбокс, для всех почтовых рассылок).\r\n    - Даже если пользователь отключил уведомления от таких рассылок, то саппорт-инженер будет об этом знать. И, если у пользователя возникают с этим проблемы, подсказать варианты решения.\r\n    - Сами почтовые уведомления стали понятнее, появилась возможность подключить браузерные уведомления.\r\n    - Появилась возможность подписать на рассылку на любой тикет со страницы этого тикета.\r\n- **Более точечно настроена аналитика.**\r\n    - Саппорт-инженер теперь может видеть карточку пользователя с историей посещений тикетов и документов в документации. Так инженер поддержки сразу может понять, какие ссылки есть смысл советовать, а какие — нет, так как пользователь их уже посещал.\r\n    - Добавлены ивенты на целевые действия.\r\n    - Созданный внутренние дашборды с анализом различных данных, необходимых для оценки поступаемого  количества тикетов и оценки эффективности саппорта.\r\n- **Поиск по тикетам стал гибче и проще.**\r\n    - Были докручены мета-теги, чтобы тикеты лучше искались поисковиками.\r\n    - Переосмыслены фильтры, добавлены готовые пресеты и возможность подписаться на созданный фильтр.\r\n    - Оптимизирована внутренняя страница поиска.\r\n- **Сделана мобильная версия клиентского портала.**', `Summary`='', `FormatterID`='neasden', `OriginalAlias`='support-center', `Uploads`='a:0:{}', `IsPublished`='1', `IsCommentable`='0', `IsVisible`='1', `IsFavourite`='1', `Stamp`='1711383800', `LastModified`='1711821011', `Offset`='14400', `IsDST`='0', `IsIndexed`='0', `IsExternal`='0', `ReadCount`='2', `SourceID`='0', `SourceNoteID`='0', `SourceNoteURL`='', `SourceNoteJSONURL`='', `SourceNoteData`='' WHERE `SubsetID`=1 AND (`ID`=1);

UPDATE `e2BlogNotes` SET `Uploads`='a:2:{i:0;s:24:"/images/blog/1x/sc-1.png";i:1;s:15:"empty-image.jpg";}' WHERE `SubsetID`=1 AND `ID`=1;

UPDATE `e2BlogNotes` SET `SubsetID`='1', `Title`='Support Center', `Text`='Система поддержки пользователей. Включает различные информационные ресурсы: вопросы от пользователей, статьи в базе знаний и истории версий.\r\n\r\nЕжедневно в Support Center создаются сотни новых вопросов и на них отвечают десятки саппорт-инженеров. За годы работы старый интерфейс устарел как внешне, так и с точки зрения удобства и функциональности. Пришла задача полностью переработать платформу, с учётом всех бизнес-требований.\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/sc-1.png\" srcset=\"/images/blog/1x/sc-1.png 1x, /images/blog/2x/sc-1@2x.png 2x\" class=\"img-fluid\">\r\n\r\n# Вводная\r\n\r\nСистема состоит из трёх основных порталов:\r\n\r\n- Клиентский портал\r\n- Внутренний портал для сотрудников\r\n- Админ-панель\r\n\r\nКаждым порталом пользуется свой сегмент пользователей. Клиенты компании ожидают простой и понятный интерфейс . В то время как саппорт-инженеры привыкли к определенным сценариям, которые тоже нужно было сохранить.\r\n\r\n# Клиентский портал\r\n\r\nНа этот ресурс были задействованы основные силы. Клиентский портал даёт возможность клиентам задавать вопросы технического характера и получать на них ответы. \r\n\r\nПеред редизайном ставились следующие задачи:\r\n\r\n- **Снизить нагрузку на саппорт-инженеров.** Помочь пользователям находить ответы самостоятельно, если на вопрос уже отвечали ранее или решение описано в документации.\r\n- **Улучшить UX.** Накопился список проблем, которые нужно было решать:\r\n    - **Пользователи выбирают неверный продукт при создании вопроса.** DevExpress разрабатывает и поддерживает десятки продуктов. У каждого продукта могут быть разные платформы и версии. Иногда важно знать, какая ОС установлена у пользователя, каким IDE он пользуется. Нужно было сделать так, чтобы у пользователя не возникали проблемы при выборе нужных значений. Помочь ему на этом пути.\r\n    - **Возникают проблемы при форматировании текста.** Пользователи приходят в поддержку с техническими проблемами. Описание проблемы содержит куски кода или целые архивы с проектами. В старой версии сайта пользователи путались в текстовом редакторе и отправляли не отформатированные куски куда, которые сливались с обычным текстом. Также, пользователи не всегда понимали как аттачить файлы. Всё это приводило к дополнительной нагрузке на саппорт-инженеров.\r\n    - **Пользователи не замечают уведомления об ответах в их тикете.** Проблема касалась как веб-интерфейса, так и уведомлений приходящих пользователю на почту. Пользователи либо не замечали уведомления, либо не понимали к чему они относятся, либо ранее отключали уведомления и забывали об этом. В связи с этим, среднее время на решение таких тикетов значительно увеличивалось.\r\n    - **Клиенты из одной и той же компании не видят вопросы друг друга.** Большинство клиентов предпочитает оставлять свои вопросы приватно. Чтобы их могли видеть только саппорт-инженеры. Из-за этого возникала проблема, что вопросы становились приватными полностью и их не могли видеть даже сотрудники одной и той же компании с разных аккаунтов.\r\n    - **Неудобные фильтры.** Пользователи, что на странице со списком публичных тикетов невозможно ничего найти. Фильтров мало, а то, что есть не всегда работает очевидным образом.\r\n- **Переосмыслить встроенный инструмент “Version History”.**\r\n- **Улучшить аналитику.**\r\n- **Освежить внешний вид.**\r\n\r\n## Подготовка к работе\r\n\r\nПеред началом работы над редизайном была проведена подготовительная работы. Подготовлен общий план работы и проведены встречи со всеми заинтересованными лицами. Был подготовлен итоговый бриф проекта. \r\n\r\nЧасть работ, которые были проведены на этом этапе:\r\n\r\n- **Анализ текущего дизайна.** UX-тестирование текущего сайта, поиск проблем.\r\n- **Ресёрч конкурентов.** Изучение как прямых конкурентов, так и решений крупных платформ. Например, Zendesk, Freshdesk, Zoho Desk.\r\n- **Сбор и анализ существующего фидбека.** За годы работы, накопилось большое количество тикетов, комментарием и другой обратной связи касаемо работы портала. Была проведена большая работу по сбору всей это информации в один документ, её анализу и приоритизации.\r\n- **Сбор информации от саппорт-инженеров.** Инженеры поддержки активнее всего общаются с пользователями и знают детали и проблемы, которые могут быть неизвестны и неочевидны другим членам команды.\r\n- **Изучение текущих данных аналитики и список того, что хотим собирать ещё в новом дизайне.** Для работы с данными использовались:  Google Analytics (+Google Tag Manager), Matomo, внутренние инструменты.\r\n- **Сбор требований от заказчиков и всех заинтересованных лиц.**\r\n- **Подготовка брифа.** Описание проблем, целей и задач. Развёрнутый ответ на вопрос, что мы будем считать успешным редизайном.\r\n\r\n## Процесс\r\n\r\nРабота над сайтом строилась 2-4 недельными спринтами. В конце каждого спринта проводились синхронизационные встречи с заказчиками. \r\n\r\nВ начале работы над дизайном была согласована общая концепция. Отрисованы низко детализированные прототипы с решением основных UX проблем. Найден общий подход к внешнему виду.  \r\n\r\nЧтобы работа над новым дизайном была эффективной и обратная связь поступала как можно быстрее был принят рад мер:\r\n\r\n- Продукт менеджер продукта показывал прототипы и просто картинки небольшой выборке самых активных и заинтересованных пользователей саппорт-центра. Благодаря этому получалось очень быстро собрать много полезной информации, которая помогала намного быстрее замечать точки роста.\r\n- Тесное общение с разработчиками. Так дизайн значительно обгонял разработку, нужно было сразу учитывать технические ограничения. Для этого проводились постоянные встречи между разработчикам, заказчиками и дизайнером. Так мы оценивали техническую сложность каждой фичи и на основе этого принимали решение, будем мы брать её в работу или нет.\r\n- На этапе, когда появилась первая работающая версия сайта, его стали тестировать сотрудники. В первую очередь, к тестированию подключались саппорт-инженеры. На этом этапе было собрано большое количество фидбека как по техническим багам, визуальным багам, так и просто по неудачным UX-решениям.\r\n- На следующем этапе снова к фидбеку снова были подключены активные клиенты. Которые были готовы дать развёрнутый фидбек.\r\n- На одном из финальных этапов сайт стал доступен для всех пользователей, но в виде бета-версии. При этом, каждый пользователь мог вернуться к старой версии сайта. Со временем, пользователей вернувшихся на старый сайт становилось меньше. Также, мы старались собирать фидбек от таких пользователей. Чтобы понять, почему они вернулись на старую версию сайта.\r\n- К новой версии сайта была прикручена продвинутая аналитика.\r\n\r\n## Примеры реализации\r\n\r\n### Релевантные подсказки при создании тикета\r\n\r\n### Подсказки при заполнении деталей, на основе подписки пользователя и прошлых тикетов\r\n\r\n### Упрощена навигация по дискуссии с ветвистой иерархией\r\n\r\n### Обновлён текстовый редактор\r\n\r\n### Обновлены инструменты фильтра на странице со списком тикетов\r\n\r\n### Обновлены почтовые уведомлению, улучшения подписка на уведомления на самом сайте\r\n\r\n# Внутренний портал и админ-панель\r\n\r\nОтдельной крупной задачей была необходимость сделать внутренний портал для сотрудников. Главным вызовом было задача учесть флоу саппорт-инженеров из разных команд. Ингода оно сильно отличалось и нужно было найти решения, которые устроят всех.\r\n\r\nДля этого проводилось множество сложных встреч с саппорт-инженерами из разных команд и топ-саппортом. По каким-то сценариям приходилось идти на компромиссы, по каким-то — выбирать один вариант и убеждать в правильности этого варианта остальных.\r\n\r\nВ результате, судя по опросам и личным разговорам, большая часть сотрудников осталась довольна новой системой.\r\n\r\nТакже, для более гибкой работы и настройки системы под текущие нужды бизнеса была спроектирована админ-панель, где можно точечно настроить различные параметры системы.\r\n\r\nТак как решения внутренние, вдаваться в подробности и показывать скриншоты я не могу.  \r\n\r\n# Результаты\r\n\r\nВ итоге, полный переход на новую версию получился безболезненным. На каждой итерации выявлялись проблемные места и не учтённые сценарий. Большая часть из них решалась, от небольшой части осознанно отказывались.\r\n\r\nСтарая версия сайта постепенно была отключена, когда количество её пользователей стало совсем небольшим.\r\n\r\nОбщая оценка редизайна была оценена как успешная. Как со стороны клиентов, так и со стороны сотрудников. Поставленные перед редизайном цели были достигнуты:\r\n\r\n- **Уменьшилась нагрузка на саппорт-инженеров.**\r\n    - Пользователи стали чаще находить решения самостоятельно: улучшен движок поиска, предлагаются релевантные ссылки при создании тикета, улучшена фильтрация.\r\n    - Пользователи стали реже ошибаться с выбором платформы/продукта и других деталей при создании тикета.\r\n    - Во внутреннем портале появились инструменты, помогающие саппорт-инженерам быстрее отвечать на тикеты, ответ на которые уже давался ранее.\r\n- **Не отформатированные тикеты появляются гораздо реже.** Решилась проблема с тем, что пользователи не понимали, как отправлять аттачи.\r\n- **Уменьшилось количество проблем, когда пользователи не получают уведомления вовремя.**\r\n    - В настройках уведомлений появился отдельный чекбокс, для получения уведомлений от саппорт-центра (раньше был единый чекбокс, для всех почтовых рассылок).\r\n    - Даже если пользователь отключил уведомления от таких рассылок, то саппорт-инженер будет об этом знать. И, если у пользователя возникают с этим проблемы, подсказать варианты решения.\r\n    - Сами почтовые уведомления стали понятнее, появилась возможность подключить браузерные уведомления.\r\n    - Появилась возможность подписать на рассылку на любой тикет со страницы этого тикета.\r\n- **Более точечно настроена аналитика.**\r\n    - Саппорт-инженер теперь может видеть карточку пользователя с историей посещений тикетов и документов в документации. Так инженер поддержки сразу может понять, какие ссылки есть смысл советовать, а какие — нет, так как пользователь их уже посещал.\r\n    - Добавлены ивенты на целевые действия.\r\n    - Созданный внутренние дашборды с анализом различных данных, необходимых для оценки поступаемого  количества тикетов и оценки эффективности саппорта.\r\n- **Поиск по тикетам стал гибче и проще.**\r\n    - Были докручены мета-теги, чтобы тикеты лучше искались поисковиками.\r\n    - Переосмыслены фильтры, добавлены готовые пресеты и возможность подписаться на созданный фильтр.\r\n    - Оптимизирована внутренняя страница поиска.\r\n- **Сделана мобильная версия клиентского портала.**', `Summary`='', `FormatterID`='neasden', `OriginalAlias`='support-center', `Uploads`='a:0:{}', `IsPublished`='1', `IsCommentable`='0', `IsVisible`='1', `IsFavourite`='1', `Stamp`='1711383800', `LastModified`='1711821011', `Offset`='14400', `IsDST`='0', `IsIndexed`='1', `IsExternal`='0', `ReadCount`='2', `SourceID`='0', `SourceNoteID`='0', `SourceNoteURL`='', `SourceNoteJSONURL`='', `SourceNoteData`='' WHERE `SubsetID`=1 AND (`ID`=1);

UPDATE `e2BlogNotes` SET `SubsetID`='1', `Title`='Дизайн-система Blazor', `Text`='DevExpress Blazor — это набор компонентов пользовательского интерфейса. Активно применяется в приложениях на платформе Blazor и предлагает мощный набор компонентов: таблицы данных, календари, планировщики, выпадающие списки, диалоговые окна и многие другие.\r\n\r\nЗадача — переосмыслить и создать дизайн-систему в Figma на основе существующих артефактов и наработок.\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/blazor-1.png\" srcset=\"/images/blog/1x/blazor-1.png 1x, /images/blog/2x/blazor-1@2x.png 2x\" class=\"img-fluid\">\r\n\r\n# Вводные\r\n\r\nBlazor продукт развивался и вместе с этим росло количество и сложность компонентов. Раньше дизайнер рисовал отдельный макет под каждую задачу. Не было системного подхода и единых правил. Со временем этот подход начал приносить проблемы:\r\n- Разработка начала сильно обгонять дизайн.\r\n- Многие решения по краевым сценариям стали приниматься разработчиками.\r\n- Дизайнер тратил много времени на поиск UI и UX багов на поздних этапах.\r\n- Итоговая фича могла сильно отличаться от нарисованного макета.\r\n\r\nОтдельной проблемой была сложность каждого компонента:\r\n- **Разные темы**. В разных темах компонент не только меняет цвет, но и начинает обладать другими визуальными свойствами.\r\n- **Несколько размеров**. Каждый компонент линейки представлен в трёх размерах. \r\n- **Дополнительные стили**. Большой набор стилистических вариантов для компонентов-атомов.\r\n\r\nНапример, одна только кнопка состоит из 150 вариантов компонента:\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/blazor-2.png\" srcset=\"/images/blog/1x/blazor-2.png 1x, /images/blog/2x/blazor-2@2x.png 2x\" class=\"img-fluid\">\r\n\r\nБыло принято решение менять подход — разработать стандарты, правила постановки задач и проектирования.\r\n\r\n# Задачи\r\n\r\nПеред новой дизайн-системой поставили следующие задачи:\r\n\r\n1. **Оптимизация работы команды на этапах дизайна и разработки.** \r\nРаньше, эти процессы были довольно хаотичны. Дизайнер брал в задачу в работу и изображал примерную реализацию компонента. Многие краевые сценарии не учитывались. Какие-то решения в процессе разработки менялись на ходу. В итоге, разработка затягивалась, фичи резались и итоговый результат сильно отличался от исходной картинки.\r\n2. **Автоматизация и консистентность**. \r\nБольшой размер и сложность компонентов сильно затрудняли внесение любых изменений в дизайн. Даже небольшие стилистические изменения в базовом компоненте, типа кнопки, приводили к огромному количеству работы со стороны дизайнера. Так как нужно было учесть разные темы, размеры и стили.\r\n3. **Консистентность цвета**. \r\nОтдельно стоит отметить проблему с цветом. Многие цвета компонентов в коде рассчитывались с помощью миксинов. Это приводило ко многим проблемам, в том числе, проблемам с контрастностью.\r\n4. **Доступность.**\r\nПользователи продукта стали всё чаще интересоваться, насколько компоненты доступны для разных категорий пользователей. Нужно было сформировать подход, когда дизайнер на этапе проработки компонента учитывает все WCAG 2.2 AA требования.\r\n5. **Централизация знаний.**\r\nМногие знания о тех или иных дизайн-решениях нигде не фиксировались. Единственным источником знания были участвующие в работе на фичей члены команды. Нужно было сформировать систему документации.\r\n6. **UI Kit.**\r\nВсё чаще стали приходить запросы на UI Kit от пользователей. В добавок, это уже давно было у конкурентов.\r\n\r\n# Результат\r\n\r\n## Компоненты в Figma переработаны с нуля\r\n\r\nДизайн компонентов теперь полностью повторяет функционал кодовой реализации. Учтены все редкие сценарии и краевые состояния. Перед отрисовкой каждого компоненты изучались спецификация+API компонента и все сценарии его использования.\r\n\r\n### **Пример реализации компонента Grid**\r\n\r\nКомпонент Grid — один из самых больших и популярных в линейке Blazor. Представляет собой решение для отображения данных в табличном формате. Включает множество функций для управления данными. Например: фильтрация, группировка, пагинация, сортировка и многое другое.\r\n\r\nОсновную сложность представляет его размер:\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/blazor-3.png\" srcset=\"/images/blog/1x/blazor-3.png 1x, /images/blog/2x/blazor-3@2x.png 2x\" class=\"img-fluid\">\r\n\r\nКомпонент достаточно гибок в настройке. Так как пользователи используют его по-разному. Всё это отражено в дизайне. \r\n\r\nЧтобы отрисовать такой компонент в Figma, задачу разбили на этапе: \r\n\r\n- Изучить решения конкурентов.\r\n- Изучить и собрать файл со скриншотами всех состояний компонента.\r\n- Собрать все под-компоненты.\r\n- Собрать итоговый компонент с разными сценариями использования.\r\n\r\nСобранный в Figma компонент сильно упростил разработку новых фич для грида. Также, упростило создание прототипов для проработки различных сценариев.\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/blazor-4.png\" srcset=\"/images/blog/1x/blazor-4.png 1x, /images/blog/2x/blazor-4@2x.png 2x\" class=\"img-fluid\">\r\n\r\n## Отрисованы новые компоненты\r\n\r\nСоздание новых компонентов включает следующие шаги: \r\n\r\n- Обсудить требования с ПМом.\r\n- Исследовать решения на рынке.\r\n- Утвердить список фич.\r\n- Найти грамотный подход по клавиатурной навигации (поддержка A11Y).\r\n- Отрисовать компонент и все его составляющие.\r\n- Описать компонент в дизайн-токенах.\r\n- Проработать сценарии для демо-стендов.\r\n\r\n### **Пример реализации компонента TreeList**\r\n\r\nКомпонент TreeList — показывает табличные данные в виде древовидной структуры. Пользователи могут сворачивать и разворачивать данные, как им удобно. \r\n\r\nПри подготовке к работе был произведен ресёрч конкурентов, собран список идей и их примерные способы реализации. На каждом этапе приходили синхронизационные встречи с менеджером продукта, разработчиками и другими заинтересованными лицами:\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/blazor-5.png\" srcset=\"/images/blog/1x/blazor-5.png 1x, /images/blog/2x/blazor-5@2x.png 2x\" class=\"img-fluid\">\r\n\r\nСобранный в Figma компонент учитывает все сценарии использовании и состоянии:\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/blazor-6.png\" srcset=\"/images/blog/1x/blazor-6.png 1x, /images/blog/2x/blazor-6@2x.png 2x\" class=\"img-fluid\">\r\n\r\n# **Токенизация**\r\n\r\nКаждый компонент представлен в разных темах. Руками отрисовать или исправлять компонент в каждой теме очень дорого и ресурсозатратно.  \r\n\r\nБыло принято решение использовать дизайн-токены:\r\n\r\n- Чтобы быстро обновлять стили компонента под любую тему.\r\n- Гарантировать единообразие решений.\r\n- Использовать токены как мостик между дизайном и разработкой.\r\n\r\nБыла проведена большая работа над созданием архитектуры и структуры дизайн-токенов:\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/blazor-7.png\" srcset=\"/images/blog/1x/blazor-7.png 1x, /images/blog/2x/blazor-7@2x.png 2x\" class=\"img-fluid\">\r\n\r\nКаждый компонент имеет полное покрытие токенами:\r\n\r\n- color,\r\n- font-weight,\r\n- letter-spacing,\r\n- line-height,\r\n- border-radius,\r\n- border-width,\r\n- font-size,\r\n- text-transform,\r\n- opacity,\r\n- box-shadow,\r\n- size.\r\n\r\nТакой подход позволяет быстро создавать новые темы, просто выставляя новые значения в токенах. Для работы использовался плагин Tokens Studio for Figma. Потому что он позволяет покрыть большое количество типов токенов, в отличии от встроенного Figma Variables.\r\n\r\nВ итоге, любой компонент в Figma легко протестировать с другими стилистическими настройками. А разработчики могут передавать значения токенов из Figma напрямую в свои стили.\r\n\r\n# **Документирование**\r\n\r\nДизайн-система описывает себя тремя основными способами:\r\n\r\n- **Компоненты и сценарии в Figma.** Главная точка входа в дизайн-систему.\r\n- **Дизайн-токены.** Служат мостом между дизайном и кодом.\r\n- **Внутренняя документация.** Содержит договоренности и рекомендации по разным аспектам дизайна: правила наименования, структура токенов, правила отрисовки иконок и так далее. Тут же можно найти результаты ресёрчей относящихся к различным дизайн-задачам.\r\n\r\n# **UI Kit**\r\n\r\nОдним из результатов работы над дизайн-системой стал выпуск UI кита в Figma.\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/blazor-8.png\" srcset=\"/images/blog/1x/blazor-8.png 1x, /images/blog/2x/blazor-8@2x.png 2x\" class=\"img-fluid\">\r\n\r\n# **Результаты**\r\n\r\n- Получилось собрать крепкий каркас дизайн-системы в Figma.\r\n- Сильно улучшилась коммуникация дизайна и продукт менеджеров.\r\n    - Появились еженедельный созвоны с продукт менеджерами.\r\n    - Работа над задачами стала идти быстрее, на всех этапах.\r\n- Работа между дизайном и разработкой стала эффективнее.\r\n    - Макеты стали намного подробнее.\r\n    - Дополнительный слой информации передают дизайн-токены.\r\n- Появилась внутренняя документация.\r\n- Пользователи получили UI kit.', `Summary`='', `FormatterID`='neasden', `OriginalAlias`='blazor', `Uploads`='a:11:{i:0;s:33:\"/images/1x/maxim-petrov-photo.png\";i:1;s:28:\"/images/blog/1x/blazor-2.png\";i:2;s:28:\"/images/blog/1x/blazor-1.png\";i:3;s:15:\"empty-image.jpg\";i:4;s:28:\"/images/blog/1x/blazor-3.png\";i:5;s:28:\"/images/blog/1x/blazor-4.png\";i:6;s:28:\"/images/blog/1x/blazor-5.png\";i:7;s:27:\"/images/blog/1x/blazor6.png\";i:8;s:28:\"/images/blog/1x/blazor-6.png\";i:9;s:28:\"/images/blog/1x/blazor-7.png\";i:10;s:28:\"/images/blog/1x/blazor-8.png\";}', `IsPublished`='1', `IsCommentable`='0', `IsVisible`='1', `IsFavourite`='1', `Stamp`='1711384202', `LastModified`='1711819943', `Offset`='14400', `IsDST`='0', `IsIndexed`='1', `IsExternal`='0', `ReadCount`='4', `SourceID`='0', `SourceNoteID`='0', `SourceNoteURL`='', `SourceNoteJSONURL`='', `SourceNoteData`='' WHERE `SubsetID`=1 AND (`ID`=5);

UPDATE `e2BlogNotes` SET `SubsetID`='1', `Title`='Support Center', `Text`='Система поддержки пользователей. Включает различные информационные ресурсы: вопросы от пользователей, статьи в базе знаний и истории версий.\r\n\r\nЕжедневно в Support Center создаются сотни новых вопросов и на них отвечают десятки саппорт-инженеров. За годы работы старый интерфейс устарел как внешне, так и с точки зрения удобства и функциональности. Пришла задача полностью переработать платформу, с учётом всех бизнес-требований.\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/sc-1.png\" srcset=\"/images/blog/1x/sc-1.png 1x, /images/blog/2x/sc-1@2x.png 2x\" class=\"img-fluid\">\r\n\r\n# Вводная\r\n\r\nСистема состоит из трёх основных порталов:\r\n\r\n- Клиентский портал\r\n- Внутренний портал для сотрудников\r\n- Админ-панель\r\n\r\nКаждым порталом пользуется свой сегмент пользователей. Клиенты компании ожидают простой и понятный интерфейс . В то время как саппорт-инженеры привыкли к определенным сценариям, которые тоже нужно было сохранить.\r\n\r\n# Клиентский портал\r\n\r\nНа этот ресурс были задействованы основные силы. Клиентский портал даёт возможность клиентам задавать вопросы технического характера и получать на них ответы. \r\n\r\nПеред редизайном ставились следующие задачи:\r\n\r\n- **Снизить нагрузку на саппорт-инженеров.** Помочь пользователям находить ответы самостоятельно, если на вопрос уже отвечали ранее или решение описано в документации.\r\n- **Улучшить UX.** Накопился список проблем, которые нужно было решать:\r\n    - **Пользователи выбирают неверный продукт при создании вопроса.** DevExpress разрабатывает и поддерживает десятки продуктов. У каждого продукта могут быть разные платформы и версии. Иногда важно знать, какая ОС установлена у пользователя, каким IDE он пользуется. Нужно было сделать так, чтобы у пользователя не возникали проблемы при выборе нужных значений. Помочь ему на этом пути.\r\n    - **Возникают проблемы при форматировании текста.** Пользователи приходят в поддержку с техническими проблемами. Описание проблемы содержит куски кода или целые архивы с проектами. В старой версии сайта пользователи путались в текстовом редакторе и отправляли не отформатированные куски куда, которые сливались с обычным текстом. Также, пользователи не всегда понимали как аттачить файлы. Всё это приводило к дополнительной нагрузке на саппорт-инженеров.\r\n    - **Пользователи не замечают уведомления об ответах в их тикете.** Проблема касалась как веб-интерфейса, так и уведомлений приходящих пользователю на почту. Пользователи либо не замечали уведомления, либо не понимали к чему они относятся, либо ранее отключали уведомления и забывали об этом. В связи с этим, среднее время на решение таких тикетов значительно увеличивалось.\r\n    - **Клиенты из одной и той же компании не видят вопросы друг друга.** Большинство клиентов предпочитает оставлять свои вопросы приватно. Чтобы их могли видеть только саппорт-инженеры. Из-за этого возникала проблема, что вопросы становились приватными полностью и их не могли видеть даже сотрудники одной и той же компании с разных аккаунтов.\r\n    - **Неудобные фильтры.** Пользователи, что на странице со списком публичных тикетов невозможно ничего найти. Фильтров мало, а то, что есть не всегда работает очевидным образом.\r\n- **Переосмыслить встроенный инструмент “Version History”.**\r\n- **Улучшить аналитику.**\r\n- **Освежить внешний вид.**\r\n\r\n## Подготовка к работе\r\n\r\nПеред началом работы над редизайном была проведена подготовительная работы. Подготовлен общий план работы и проведены встречи со всеми заинтересованными лицами. Был подготовлен итоговый бриф проекта. \r\n\r\nЧасть работ, которые были проведены на этом этапе:\r\n\r\n- **Анализ текущего дизайна.** UX-тестирование текущего сайта, поиск проблем.\r\n- **Ресёрч конкурентов.** Изучение как прямых конкурентов, так и решений крупных платформ. Например, Zendesk, Freshdesk, Zoho Desk.\r\n- **Сбор и анализ существующего фидбека.** За годы работы, накопилось большое количество тикетов, комментарием и другой обратной связи касаемо работы портала. Была проведена большая работу по сбору всей это информации в один документ, её анализу и приоритизации.\r\n- **Сбор информации от саппорт-инженеров.** Инженеры поддержки активнее всего общаются с пользователями и знают детали и проблемы, которые могут быть неизвестны и неочевидны другим членам команды.\r\n- **Изучение текущих данных аналитики и список того, что хотим собирать ещё в новом дизайне.** Для работы с данными использовались:  Google Analytics (+Google Tag Manager), Matomo, внутренние инструменты.\r\n- **Сбор требований от заказчиков и всех заинтересованных лиц.**\r\n- **Подготовка брифа.** Описание проблем, целей и задач. Развёрнутый ответ на вопрос, что мы будем считать успешным редизайном.\r\n\r\n## Процесс\r\n\r\nРабота над сайтом строилась 2-4 недельными спринтами. В конце каждого спринта проводились синхронизационные встречи с заказчиками. \r\n\r\nВ начале работы над дизайном была согласована общая концепция. Отрисованы низко детализированные прототипы с решением основных UX проблем. Найден общий подход к внешнему виду.  \r\n\r\nЧтобы работа над новым дизайном была эффективной и обратная связь поступала как можно быстрее был принят рад мер:\r\n\r\n- Продукт менеджер продукта показывал прототипы и просто картинки небольшой выборке самых активных и заинтересованных пользователей саппорт-центра. Благодаря этому получалось очень быстро собрать много полезной информации, которая помогала намного быстрее замечать точки роста.\r\n- Тесное общение с разработчиками. Так дизайн значительно обгонял разработку, нужно было сразу учитывать технические ограничения. Для этого проводились постоянные встречи между разработчикам, заказчиками и дизайнером. Так мы оценивали техническую сложность каждой фичи и на основе этого принимали решение, будем мы брать её в работу или нет.\r\n- На этапе, когда появилась первая работающая версия сайта, его стали тестировать сотрудники. В первую очередь, к тестированию подключались саппорт-инженеры. На этом этапе было собрано большое количество фидбека как по техническим багам, визуальным багам, так и просто по неудачным UX-решениям.\r\n- На следующем этапе снова к фидбеку снова были подключены активные клиенты. Которые были готовы дать развёрнутый фидбек.\r\n- На одном из финальных этапов сайт стал доступен для всех пользователей, но в виде бета-версии. При этом, каждый пользователь мог вернуться к старой версии сайта. Со временем, пользователей вернувшихся на старый сайт становилось меньше. Также, мы старались собирать фидбек от таких пользователей. Чтобы понять, почему они вернулись на старую версию сайта.\r\n- К новой версии сайта была прикручена продвинутая аналитика.\r\n\r\n## Примеры реализации\r\n\r\n### Релевантные подсказки при создании тикета\r\n\r\n### Подсказки при заполнении деталей, на основе подписки пользователя и прошлых тикетов\r\n\r\n### Упрощена навигация по дискуссии с ветвистой иерархией\r\n\r\n### Обновлён текстовый редактор\r\n\r\n### Обновлены инструменты фильтра на странице со списком тикетов\r\n\r\n### Обновлены почтовые уведомлению, улучшения подписка на уведомления на самом сайте\r\n\r\n# Внутренний портал и админ-панель\r\n\r\nОтдельной крупной задачей была необходимость сделать внутренний портал для сотрудников. Главным вызовом было задача учесть флоу саппорт-инженеров из разных команд. Ингода оно сильно отличалось и нужно было найти решения, которые устроят всех.\r\n\r\nДля этого проводилось множество сложных встреч с саппорт-инженерами из разных команд и топ-саппортом. По каким-то сценариям приходилось идти на компромиссы, по каким-то — выбирать один вариант и убеждать в правильности этого варианта остальных.\r\n\r\nВ результате, судя по опросам и личным разговорам, большая часть сотрудников осталась довольна новой системой.\r\n\r\nТакже, для более гибкой работы и настройки системы под текущие нужды бизнеса была спроектирована админ-панель, где можно точечно настроить различные параметры системы.\r\n\r\nТак как решения внутренние, вдаваться в подробности и показывать скриншоты я не могу.  \r\n\r\n# Результаты\r\n\r\nВ итоге, полный переход на новую версию получился безболезненным. На каждой итерации выявлялись проблемные места и не учтённые сценарий. Большая часть из них решалась, от небольшой части осознанно отказывались.\r\n\r\nСтарая версия сайта постепенно была отключена, когда количество её пользователей стало совсем небольшим.\r\n\r\nОбщая оценка редизайна была оценена как успешная. Как со стороны клиентов, так и со стороны сотрудников. Поставленные перед редизайном цели были достигнуты:\r\n\r\n- **Уменьшилась нагрузка на саппорт-инженеров.**\r\n    - Пользователи стали чаще находить решения самостоятельно: улучшен движок поиска, предлагаются релевантные ссылки при создании тикета, улучшена фильтрация.\r\n    - Пользователи стали реже ошибаться с выбором платформы/продукта и других деталей при создании тикета.\r\n    - Во внутреннем портале появились инструменты, помогающие саппорт-инженерам быстрее отвечать на тикеты, ответ на которые уже давался ранее.\r\n- **Не отформатированные тикеты появляются гораздо реже.** Решилась проблема с тем, что пользователи не понимали, как отправлять аттачи.\r\n- **Уменьшилось количество проблем, когда пользователи не получают уведомления вовремя.**\r\n    - В настройках уведомлений появился отдельный чекбокс, для получения уведомлений от саппорт-центра (раньше был единый чекбокс, для всех почтовых рассылок).\r\n    - Даже если пользователь отключил уведомления от таких рассылок, то саппорт-инженер будет об этом знать. И, если у пользователя возникают с этим проблемы, подсказать варианты решения.\r\n    - Сами почтовые уведомления стали понятнее, появилась возможность подключить браузерные уведомления.\r\n    - Появилась возможность подписать на рассылку на любой тикет со страницы этого тикета.\r\n- **Более точечно настроена аналитика.**\r\n    - Саппорт-инженер теперь может видеть карточку пользователя с историей посещений тикетов и документов в документации. Так инженер поддержки сразу может понять, какие ссылки есть смысл советовать, а какие — нет, так как пользователь их уже посещал.\r\n    - Добавлены ивенты на целевые действия.\r\n    - Созданный внутренние дашборды с анализом различных данных, необходимых для оценки поступаемого  количества тикетов и оценки эффективности саппорта.\r\n- **Поиск по тикетам стал гибче и проще.**\r\n    - Были докручены мета-теги, чтобы тикеты лучше искались поисковиками.\r\n    - Переосмыслены фильтры, добавлены готовые пресеты и возможность подписаться на созданный фильтр.\r\n    - Оптимизирована внутренняя страница поиска.\r\n- **Сделана мобильная версия клиентского портала.**', `Summary`='', `FormatterID`='neasden', `OriginalAlias`='support-center', `Uploads`='a:2:{i:0;s:24:\"/images/blog/1x/sc-1.png\";i:1;s:15:\"empty-image.jpg\";}', `IsPublished`='1', `IsCommentable`='0', `IsVisible`='1', `IsFavourite`='1', `Stamp`='1711383800', `LastModified`='1711821011', `Offset`='14400', `IsDST`='0', `IsIndexed`='1', `IsExternal`='0', `ReadCount`='2', `SourceID`='0', `SourceNoteID`='0', `SourceNoteURL`='', `SourceNoteJSONURL`='', `SourceNoteData`='' WHERE `SubsetID`=1 AND (`ID`=1);

UPDATE `e2BlogAliases` SET `EntityType`='n', `EntityID`='1', `Alias`='support-center', `Stamp`='1711825562' WHERE `SubsetID`=1 AND (`ID`=1);

UPDATE `e2BlogNotes` SET `SubsetID`='1', `Title`='Support Center', `Text`='Система поддержки пользователей. Включает различные информационные ресурсы: вопросы от пользователей, статьи в базе знаний и истории версий.\r\n\r\nЕжедневно в Support Center создаются сотни новых вопросов и на них отвечают десятки саппорт-инженеров. За годы работы старый интерфейс устарел как внешне, так и с точки зрения удобства и функциональности. Пришла задача полностью переработать платформу, с учётом всех бизнес-требований.\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/sc-1.png\" srcset=\"/images/blog/1x/sc-1.png 1x, /images/blog/2x/sc-1@2x.png 2x\" class=\"img-fluid\">\r\n\r\n# Вводная\r\n\r\nСистема состоит из трёх основных порталов:\r\n\r\n- Клиентский портал\r\n- Внутренний портал для сотрудников\r\n- Админ-панель\r\n\r\nКаждым порталом пользуется свой сегмент пользователей. Клиенты компании ожидают простой и понятный интерфейс . В то время как саппорт-инженеры привыкли к определенным сценариям, которые тоже нужно было сохранить.\r\n\r\n# Клиентский портал\r\n\r\nНа этот ресурс были задействованы основные силы. Клиентский портал даёт возможность клиентам задавать вопросы технического характера и получать на них ответы. \r\n\r\nПеред редизайном ставились следующие задачи:\r\n\r\n- **Снизить нагрузку на саппорт-инженеров.** Помочь пользователям находить ответы самостоятельно, если на вопрос уже отвечали ранее или решение описано в документации.\r\n- **Улучшить UX.** Накопился список проблем, которые нужно было решать:\r\n    - **Пользователи выбирают неверный продукт при создании вопроса.** DevExpress разрабатывает и поддерживает десятки продуктов. У каждого продукта могут быть разные платформы и версии. Иногда важно знать, какая ОС установлена у пользователя, каким IDE он пользуется. Нужно было сделать так, чтобы у пользователя не возникали проблемы при выборе нужных значений. Помочь ему на этом пути.\r\n    - **Возникают проблемы при форматировании текста.** Пользователи приходят в поддержку с техническими проблемами. Описание проблемы содержит куски кода или целые архивы с проектами. В старой версии сайта пользователи путались в текстовом редакторе и отправляли не отформатированные куски куда, которые сливались с обычным текстом. Также, пользователи не всегда понимали как аттачить файлы. Всё это приводило к дополнительной нагрузке на саппорт-инженеров.\r\n    - **Пользователи не замечают уведомления об ответах в их тикете.** Проблема касалась как веб-интерфейса, так и уведомлений приходящих пользователю на почту. Пользователи либо не замечали уведомления, либо не понимали к чему они относятся, либо ранее отключали уведомления и забывали об этом. В связи с этим, среднее время на решение таких тикетов значительно увеличивалось.\r\n    - **Клиенты из одной и той же компании не видят вопросы друг друга.** Большинство клиентов предпочитает оставлять свои вопросы приватно. Чтобы их могли видеть только саппорт-инженеры. Из-за этого возникала проблема, что вопросы становились приватными полностью и их не могли видеть даже сотрудники одной и той же компании с разных аккаунтов.\r\n    - **Неудобные фильтры.** Пользователи, что на странице со списком публичных тикетов невозможно ничего найти. Фильтров мало, а то, что есть не всегда работает очевидным образом.\r\n- **Переосмыслить встроенный инструмент “Version History”.**\r\n- **Улучшить аналитику.**\r\n- **Освежить внешний вид.**\r\n\r\n## Подготовка к работе\r\n\r\nПеред началом работы над редизайном была проведена подготовительная работы. Подготовлен общий план работы и проведены встречи со всеми заинтересованными лицами. Был подготовлен итоговый бриф проекта. \r\n\r\nЧасть работ, которые были проведены на этом этапе:\r\n\r\n- **Анализ текущего дизайна.** UX-тестирование текущего сайта, поиск проблем.\r\n- **Ресёрч конкурентов.** Изучение как прямых конкурентов, так и решений крупных платформ. Например, Zendesk, Freshdesk, Zoho Desk.\r\n- **Сбор и анализ существующего фидбека.** За годы работы, накопилось большое количество тикетов, комментарием и другой обратной связи касаемо работы портала. Была проведена большая работу по сбору всей это информации в один документ, её анализу и приоритизации.\r\n- **Сбор информации от саппорт-инженеров.** Инженеры поддержки активнее всего общаются с пользователями и знают детали и проблемы, которые могут быть неизвестны и неочевидны другим членам команды.\r\n- **Изучение текущих данных аналитики и список того, что хотим собирать ещё в новом дизайне.** Для работы с данными использовались:  Google Analytics (+Google Tag Manager), Matomo, внутренние инструменты.\r\n- **Сбор требований от заказчиков и всех заинтересованных лиц.**\r\n- **Подготовка брифа.** Описание проблем, целей и задач. Развёрнутый ответ на вопрос, что мы будем считать успешным редизайном.\r\n\r\n## Процесс\r\n\r\nРабота над сайтом строилась 2-4 недельными спринтами. В конце каждого спринта проводились синхронизационные встречи с заказчиками. \r\n\r\nВ начале работы над дизайном была согласована общая концепция. Отрисованы низко детализированные прототипы с решением основных UX проблем. Найден общий подход к внешнему виду.  \r\n\r\nЧтобы работа над новым дизайном была эффективной и обратная связь поступала как можно быстрее был принят рад мер:\r\n\r\n- Продукт менеджер продукта показывал прототипы и просто картинки небольшой выборке самых активных и заинтересованных пользователей саппорт-центра. Благодаря этому получалось очень быстро собрать много полезной информации, которая помогала намного быстрее замечать точки роста.\r\n- Тесное общение с разработчиками. Так дизайн значительно обгонял разработку, нужно было сразу учитывать технические ограничения. Для этого проводились постоянные встречи между разработчикам, заказчиками и дизайнером. Так мы оценивали техническую сложность каждой фичи и на основе этого принимали решение, будем мы брать её в работу или нет.\r\n- На этапе, когда появилась первая работающая версия сайта, его стали тестировать сотрудники. В первую очередь, к тестированию подключались саппорт-инженеры. На этом этапе было собрано большое количество фидбека как по техническим багам, визуальным багам, так и просто по неудачным UX-решениям.\r\n- На следующем этапе снова к фидбеку снова были подключены активные клиенты. Которые были готовы дать развёрнутый фидбек.\r\n- На одном из финальных этапов сайт стал доступен для всех пользователей, но в виде бета-версии. При этом, каждый пользователь мог вернуться к старой версии сайта. Со временем, пользователей вернувшихся на старый сайт становилось меньше. Также, мы старались собирать фидбек от таких пользователей. Чтобы понять, почему они вернулись на старую версию сайта.\r\n- К новой версии сайта была прикручена продвинутая аналитика.\r\n\r\n## Примеры реализации\r\n\r\n### Релевантные подсказки при создании тикета\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/sc-2.png\" srcset=\"/images/blog/1x/sc-2.png 1x, /images/blog/2x/sc-2@2x.png 2x\" class=\"img-fluid\">\r\n\r\n### Подсказки при заполнении деталей, на основе подписки пользователя и прошлых тикетов\r\n\r\n### Упрощена навигация по дискуссии с ветвистой иерархией\r\n\r\n### Обновлён текстовый редактор\r\n\r\n### Обновлены инструменты фильтра на странице со списком тикетов\r\n\r\n### Обновлены почтовые уведомлению, улучшения подписка на уведомления на самом сайте\r\n\r\n# Внутренний портал и админ-панель\r\n\r\nОтдельной крупной задачей была необходимость сделать внутренний портал для сотрудников. Главным вызовом было задача учесть флоу саппорт-инженеров из разных команд. Ингода оно сильно отличалось и нужно было найти решения, которые устроят всех.\r\n\r\nДля этого проводилось множество сложных встреч с саппорт-инженерами из разных команд и топ-саппортом. По каким-то сценариям приходилось идти на компромиссы, по каким-то — выбирать один вариант и убеждать в правильности этого варианта остальных.\r\n\r\nВ результате, судя по опросам и личным разговорам, большая часть сотрудников осталась довольна новой системой.\r\n\r\nТакже, для более гибкой работы и настройки системы под текущие нужды бизнеса была спроектирована админ-панель, где можно точечно настроить различные параметры системы.\r\n\r\nТак как решения внутренние, вдаваться в подробности и показывать скриншоты я не могу.  \r\n\r\n# Результаты\r\n\r\nВ итоге, полный переход на новую версию получился безболезненным. На каждой итерации выявлялись проблемные места и не учтённые сценарий. Большая часть из них решалась, от небольшой части осознанно отказывались.\r\n\r\nСтарая версия сайта постепенно была отключена, когда количество её пользователей стало совсем небольшим.\r\n\r\nОбщая оценка редизайна была оценена как успешная. Как со стороны клиентов, так и со стороны сотрудников. Поставленные перед редизайном цели были достигнуты:\r\n\r\n- **Уменьшилась нагрузка на саппорт-инженеров.**\r\n    - Пользователи стали чаще находить решения самостоятельно: улучшен движок поиска, предлагаются релевантные ссылки при создании тикета, улучшена фильтрация.\r\n    - Пользователи стали реже ошибаться с выбором платформы/продукта и других деталей при создании тикета.\r\n    - Во внутреннем портале появились инструменты, помогающие саппорт-инженерам быстрее отвечать на тикеты, ответ на которые уже давался ранее.\r\n- **Не отформатированные тикеты появляются гораздо реже.** Решилась проблема с тем, что пользователи не понимали, как отправлять аттачи.\r\n- **Уменьшилось количество проблем, когда пользователи не получают уведомления вовремя.**\r\n    - В настройках уведомлений появился отдельный чекбокс, для получения уведомлений от саппорт-центра (раньше был единый чекбокс, для всех почтовых рассылок).\r\n    - Даже если пользователь отключил уведомления от таких рассылок, то саппорт-инженер будет об этом знать. И, если у пользователя возникают с этим проблемы, подсказать варианты решения.\r\n    - Сами почтовые уведомления стали понятнее, появилась возможность подключить браузерные уведомления.\r\n    - Появилась возможность подписать на рассылку на любой тикет со страницы этого тикета.\r\n- **Более точечно настроена аналитика.**\r\n    - Саппорт-инженер теперь может видеть карточку пользователя с историей посещений тикетов и документов в документации. Так инженер поддержки сразу может понять, какие ссылки есть смысл советовать, а какие — нет, так как пользователь их уже посещал.\r\n    - Добавлены ивенты на целевые действия.\r\n    - Созданный внутренние дашборды с анализом различных данных, необходимых для оценки поступаемого  количества тикетов и оценки эффективности саппорта.\r\n- **Поиск по тикетам стал гибче и проще.**\r\n    - Были докручены мета-теги, чтобы тикеты лучше искались поисковиками.\r\n    - Переосмыслены фильтры, добавлены готовые пресеты и возможность подписаться на созданный фильтр.\r\n    - Оптимизирована внутренняя страница поиска.\r\n- **Сделана мобильная версия клиентского портала.**', `Summary`='', `FormatterID`='neasden', `OriginalAlias`='support-center', `Uploads`='a:2:{i:0;s:24:\"/images/blog/1x/sc-1.png\";i:1;s:15:\"empty-image.jpg\";}', `IsPublished`='1', `IsCommentable`='0', `IsVisible`='1', `IsFavourite`='1', `Stamp`='1711383800', `LastModified`='1711825562', `Offset`='14400', `IsDST`='0', `IsIndexed`='0', `IsExternal`='0', `ReadCount`='2', `SourceID`='0', `SourceNoteID`='0', `SourceNoteURL`='', `SourceNoteJSONURL`='', `SourceNoteData`='' WHERE `SubsetID`=1 AND (`ID`=1);

UPDATE `e2BlogNotes` SET `Uploads`='a:3:{i:0;s:24:"/images/blog/1x/sc-1.png";i:1;s:15:"empty-image.jpg";i:2;s:24:"/images/blog/1x/sc-2.png";}' WHERE `SubsetID`=1 AND `ID`=1;

UPDATE `e2BlogNotes` SET `SubsetID`='1', `Title`='Support Center', `Text`='Система поддержки пользователей. Включает различные информационные ресурсы: вопросы от пользователей, статьи в базе знаний и истории версий.\r\n\r\nЕжедневно в Support Center создаются сотни новых вопросов и на них отвечают десятки саппорт-инженеров. За годы работы старый интерфейс устарел как внешне, так и с точки зрения удобства и функциональности. Пришла задача полностью переработать платформу, с учётом всех бизнес-требований.\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/sc-1.png\" srcset=\"/images/blog/1x/sc-1.png 1x, /images/blog/2x/sc-1@2x.png 2x\" class=\"img-fluid\">\r\n\r\n# Вводная\r\n\r\nСистема состоит из трёх основных порталов:\r\n\r\n- Клиентский портал\r\n- Внутренний портал для сотрудников\r\n- Админ-панель\r\n\r\nКаждым порталом пользуется свой сегмент пользователей. Клиенты компании ожидают простой и понятный интерфейс . В то время как саппорт-инженеры привыкли к определенным сценариям, которые тоже нужно было сохранить.\r\n\r\n# Клиентский портал\r\n\r\nНа этот ресурс были задействованы основные силы. Клиентский портал даёт возможность клиентам задавать вопросы технического характера и получать на них ответы. \r\n\r\nПеред редизайном ставились следующие задачи:\r\n\r\n- **Снизить нагрузку на саппорт-инженеров.** Помочь пользователям находить ответы самостоятельно, если на вопрос уже отвечали ранее или решение описано в документации.\r\n- **Улучшить UX.** Накопился список проблем, которые нужно было решать:\r\n    - **Пользователи выбирают неверный продукт при создании вопроса.** DevExpress разрабатывает и поддерживает десятки продуктов. У каждого продукта могут быть разные платформы и версии. Иногда важно знать, какая ОС установлена у пользователя, каким IDE он пользуется. Нужно было сделать так, чтобы у пользователя не возникали проблемы при выборе нужных значений. Помочь ему на этом пути.\r\n    - **Возникают проблемы при форматировании текста.** Пользователи приходят в поддержку с техническими проблемами. Описание проблемы содержит куски кода или целые архивы с проектами. В старой версии сайта пользователи путались в текстовом редакторе и отправляли не отформатированные куски куда, которые сливались с обычным текстом. Также, пользователи не всегда понимали как аттачить файлы. Всё это приводило к дополнительной нагрузке на саппорт-инженеров.\r\n    - **Пользователи не замечают уведомления об ответах в их тикете.** Проблема касалась как веб-интерфейса, так и уведомлений приходящих пользователю на почту. Пользователи либо не замечали уведомления, либо не понимали к чему они относятся, либо ранее отключали уведомления и забывали об этом. В связи с этим, среднее время на решение таких тикетов значительно увеличивалось.\r\n    - **Клиенты из одной и той же компании не видят вопросы друг друга.** Большинство клиентов предпочитает оставлять свои вопросы приватно. Чтобы их могли видеть только саппорт-инженеры. Из-за этого возникала проблема, что вопросы становились приватными полностью и их не могли видеть даже сотрудники одной и той же компании с разных аккаунтов.\r\n    - **Неудобные фильтры.** Пользователи, что на странице со списком публичных тикетов невозможно ничего найти. Фильтров мало, а то, что есть не всегда работает очевидным образом.\r\n- **Переосмыслить встроенный инструмент “Version History”.**\r\n- **Улучшить аналитику.**\r\n- **Освежить внешний вид.**\r\n\r\n## Подготовка к работе\r\n\r\nПеред началом работы над редизайном была проведена подготовительная работы. Подготовлен общий план работы и проведены встречи со всеми заинтересованными лицами. Был подготовлен итоговый бриф проекта. \r\n\r\nЧасть работ, которые были проведены на этом этапе:\r\n\r\n- **Анализ текущего дизайна.** UX-тестирование текущего сайта, поиск проблем.\r\n- **Ресёрч конкурентов.** Изучение как прямых конкурентов, так и решений крупных платформ. Например, Zendesk, Freshdesk, Zoho Desk.\r\n- **Сбор и анализ существующего фидбека.** За годы работы, накопилось большое количество тикетов, комментарием и другой обратной связи касаемо работы портала. Была проведена большая работу по сбору всей это информации в один документ, её анализу и приоритизации.\r\n- **Сбор информации от саппорт-инженеров.** Инженеры поддержки активнее всего общаются с пользователями и знают детали и проблемы, которые могут быть неизвестны и неочевидны другим членам команды.\r\n- **Изучение текущих данных аналитики и список того, что хотим собирать ещё в новом дизайне.** Для работы с данными использовались:  Google Analytics (+Google Tag Manager), Matomo, внутренние инструменты.\r\n- **Сбор требований от заказчиков и всех заинтересованных лиц.**\r\n- **Подготовка брифа.** Описание проблем, целей и задач. Развёрнутый ответ на вопрос, что мы будем считать успешным редизайном.\r\n\r\n## Процесс\r\n\r\nРабота над сайтом строилась 2-4 недельными спринтами. В конце каждого спринта проводились синхронизационные встречи с заказчиками. \r\n\r\nВ начале работы над дизайном была согласована общая концепция. Отрисованы низко детализированные прототипы с решением основных UX проблем. Найден общий подход к внешнему виду.  \r\n\r\nЧтобы работа над новым дизайном была эффективной и обратная связь поступала как можно быстрее был принят рад мер:\r\n\r\n- Продукт менеджер продукта показывал прототипы и просто картинки небольшой выборке самых активных и заинтересованных пользователей саппорт-центра. Благодаря этому получалось очень быстро собрать много полезной информации, которая помогала намного быстрее замечать точки роста.\r\n- Тесное общение с разработчиками. Так дизайн значительно обгонял разработку, нужно было сразу учитывать технические ограничения. Для этого проводились постоянные встречи между разработчикам, заказчиками и дизайнером. Так мы оценивали техническую сложность каждой фичи и на основе этого принимали решение, будем мы брать её в работу или нет.\r\n- На этапе, когда появилась первая работающая версия сайта, его стали тестировать сотрудники. В первую очередь, к тестированию подключались саппорт-инженеры. На этом этапе было собрано большое количество фидбека как по техническим багам, визуальным багам, так и просто по неудачным UX-решениям.\r\n- На следующем этапе снова к фидбеку снова были подключены активные клиенты. Которые были готовы дать развёрнутый фидбек.\r\n- На одном из финальных этапов сайт стал доступен для всех пользователей, но в виде бета-версии. При этом, каждый пользователь мог вернуться к старой версии сайта. Со временем, пользователей вернувшихся на старый сайт становилось меньше. Также, мы старались собирать фидбек от таких пользователей. Чтобы понять, почему они вернулись на старую версию сайта.\r\n- К новой версии сайта была прикручена продвинутая аналитика.\r\n\r\n## Примеры реализации\r\n\r\n### Релевантные подсказки при создании тикета\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/sc-2.png\" srcset=\"/images/blog/1x/sc-2.png 1x, /images/blog/2x/sc-2@2x.png 2x\" class=\"img-fluid\">\r\n\r\n### Подсказки при заполнении деталей, на основе подписки пользователя и прошлых тикетов\r\n\r\n### Упрощена навигация по дискуссии с ветвистой иерархией\r\n\r\n### Обновлён текстовый редактор\r\n\r\n### Обновлены инструменты фильтра на странице со списком тикетов\r\n\r\n### Обновлены почтовые уведомлению, улучшения подписка на уведомления на самом сайте\r\n\r\n# Внутренний портал и админ-панель\r\n\r\nОтдельной крупной задачей была необходимость сделать внутренний портал для сотрудников. Главным вызовом было задача учесть флоу саппорт-инженеров из разных команд. Ингода оно сильно отличалось и нужно было найти решения, которые устроят всех.\r\n\r\nДля этого проводилось множество сложных встреч с саппорт-инженерами из разных команд и топ-саппортом. По каким-то сценариям приходилось идти на компромиссы, по каким-то — выбирать один вариант и убеждать в правильности этого варианта остальных.\r\n\r\nВ результате, судя по опросам и личным разговорам, большая часть сотрудников осталась довольна новой системой.\r\n\r\nТакже, для более гибкой работы и настройки системы под текущие нужды бизнеса была спроектирована админ-панель, где можно точечно настроить различные параметры системы.\r\n\r\nТак как решения внутренние, вдаваться в подробности и показывать скриншоты я не могу.  \r\n\r\n# Результаты\r\n\r\nВ итоге, полный переход на новую версию получился безболезненным. На каждой итерации выявлялись проблемные места и не учтённые сценарий. Большая часть из них решалась, от небольшой части осознанно отказывались.\r\n\r\nСтарая версия сайта постепенно была отключена, когда количество её пользователей стало совсем небольшим.\r\n\r\nОбщая оценка редизайна была оценена как успешная. Как со стороны клиентов, так и со стороны сотрудников. Поставленные перед редизайном цели были достигнуты:\r\n\r\n- **Уменьшилась нагрузка на саппорт-инженеров.**\r\n    - Пользователи стали чаще находить решения самостоятельно: улучшен движок поиска, предлагаются релевантные ссылки при создании тикета, улучшена фильтрация.\r\n    - Пользователи стали реже ошибаться с выбором платформы/продукта и других деталей при создании тикета.\r\n    - Во внутреннем портале появились инструменты, помогающие саппорт-инженерам быстрее отвечать на тикеты, ответ на которые уже давался ранее.\r\n- **Не отформатированные тикеты появляются гораздо реже.** Решилась проблема с тем, что пользователи не понимали, как отправлять аттачи.\r\n- **Уменьшилось количество проблем, когда пользователи не получают уведомления вовремя.**\r\n    - В настройках уведомлений появился отдельный чекбокс, для получения уведомлений от саппорт-центра (раньше был единый чекбокс, для всех почтовых рассылок).\r\n    - Даже если пользователь отключил уведомления от таких рассылок, то саппорт-инженер будет об этом знать. И, если у пользователя возникают с этим проблемы, подсказать варианты решения.\r\n    - Сами почтовые уведомления стали понятнее, появилась возможность подключить браузерные уведомления.\r\n    - Появилась возможность подписать на рассылку на любой тикет со страницы этого тикета.\r\n- **Более точечно настроена аналитика.**\r\n    - Саппорт-инженер теперь может видеть карточку пользователя с историей посещений тикетов и документов в документации. Так инженер поддержки сразу может понять, какие ссылки есть смысл советовать, а какие — нет, так как пользователь их уже посещал.\r\n    - Добавлены ивенты на целевые действия.\r\n    - Созданный внутренние дашборды с анализом различных данных, необходимых для оценки поступаемого  количества тикетов и оценки эффективности саппорта.\r\n- **Поиск по тикетам стал гибче и проще.**\r\n    - Были докручены мета-теги, чтобы тикеты лучше искались поисковиками.\r\n    - Переосмыслены фильтры, добавлены готовые пресеты и возможность подписаться на созданный фильтр.\r\n    - Оптимизирована внутренняя страница поиска.\r\n- **Сделана мобильная версия клиентского портала.**', `Summary`='', `FormatterID`='neasden', `OriginalAlias`='support-center', `Uploads`='a:2:{i:0;s:24:\"/images/blog/1x/sc-1.png\";i:1;s:15:\"empty-image.jpg\";}', `IsPublished`='1', `IsCommentable`='0', `IsVisible`='1', `IsFavourite`='1', `Stamp`='1711383800', `LastModified`='1711825562', `Offset`='14400', `IsDST`='0', `IsIndexed`='1', `IsExternal`='0', `ReadCount`='2', `SourceID`='0', `SourceNoteID`='0', `SourceNoteURL`='', `SourceNoteJSONURL`='', `SourceNoteData`='' WHERE `SubsetID`=1 AND (`ID`=1);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 1;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '1', '1711825200', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1709233577);

UPDATE `e2BlogNotes` SET `SubsetID`='1', `Title`='Support Center', `Text`='Система поддержки пользователей. Включает различные информационные ресурсы: вопросы от пользователей, статьи в базе знаний и истории версий.\r\n\r\nЕжедневно в Support Center создаются сотни новых вопросов и на них отвечают десятки саппорт-инженеров. За годы работы старый интерфейс устарел как внешне, так и с точки зрения удобства и функциональности. Пришла задача полностью переработать платформу, с учётом всех бизнес-требований.\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/sc-1.png\" srcset=\"/images/blog/1x/sc-1.png 1x, /images/blog/2x/sc-1@2x.png 2x\" class=\"img-fluid\">\r\n\r\n# Вводная\r\n\r\nСистема состоит из трёх основных порталов:\r\n\r\n- Клиентский портал\r\n- Внутренний портал для сотрудников\r\n- Админ-панель\r\n\r\nКаждым порталом пользуется свой сегмент пользователей. Клиенты компании ожидают простой и понятный интерфейс . В то время как саппорт-инженеры привыкли к определенным сценариям, которые тоже нужно было сохранить.\r\n\r\n# Клиентский портал\r\n\r\nНа этот ресурс были задействованы основные силы. Клиентский портал даёт возможность клиентам задавать вопросы технического характера и получать на них ответы. \r\n\r\nПеред редизайном ставились следующие задачи:\r\n\r\n- **Снизить нагрузку на саппорт-инженеров.** Помочь пользователям находить ответы самостоятельно, если на вопрос уже отвечали ранее или решение описано в документации.\r\n- **Улучшить UX.** Накопился список проблем, которые нужно было решать:\r\n    - **Пользователи выбирают неверный продукт при создании вопроса.** DevExpress разрабатывает и поддерживает десятки продуктов. У каждого продукта могут быть разные платформы и версии. Иногда важно знать, какая ОС установлена у пользователя, каким IDE он пользуется. Нужно было сделать так, чтобы у пользователя не возникали проблемы при выборе нужных значений. Помочь ему на этом пути.\r\n    - **Возникают проблемы при форматировании текста.** Пользователи приходят в поддержку с техническими проблемами. Описание проблемы содержит куски кода или целые архивы с проектами. В старой версии сайта пользователи путались в текстовом редакторе и отправляли не отформатированные куски куда, которые сливались с обычным текстом. Также, пользователи не всегда понимали как аттачить файлы. Всё это приводило к дополнительной нагрузке на саппорт-инженеров.\r\n    - **Пользователи не замечают уведомления об ответах в их тикете.** Проблема касалась как веб-интерфейса, так и уведомлений приходящих пользователю на почту. Пользователи либо не замечали уведомления, либо не понимали к чему они относятся, либо ранее отключали уведомления и забывали об этом. В связи с этим, среднее время на решение таких тикетов значительно увеличивалось.\r\n    - **Клиенты из одной и той же компании не видят вопросы друг друга.** Большинство клиентов предпочитает оставлять свои вопросы приватно. Чтобы их могли видеть только саппорт-инженеры. Из-за этого возникала проблема, что вопросы становились приватными полностью и их не могли видеть даже сотрудники одной и той же компании с разных аккаунтов.\r\n    - **Неудобные фильтры.** Пользователи, что на странице со списком публичных тикетов невозможно ничего найти. Фильтров мало, а то, что есть не всегда работает очевидным образом.\r\n- **Переосмыслить встроенный инструмент “Version History”.**\r\n- **Улучшить аналитику.**\r\n- **Освежить внешний вид.**\r\n\r\n## Подготовка к работе\r\n\r\nПеред началом работы над редизайном была проведена подготовительная работы. Подготовлен общий план работы и проведены встречи со всеми заинтересованными лицами. Был подготовлен итоговый бриф проекта. \r\n\r\nЧасть работ, которые были проведены на этом этапе:\r\n\r\n- **Анализ текущего дизайна.** UX-тестирование текущего сайта, поиск проблем.\r\n- **Ресёрч конкурентов.** Изучение как прямых конкурентов, так и решений крупных платформ. Например, Zendesk, Freshdesk, Zoho Desk.\r\n- **Сбор и анализ существующего фидбека.** За годы работы, накопилось большое количество тикетов, комментарием и другой обратной связи касаемо работы портала. Была проведена большая работу по сбору всей это информации в один документ, её анализу и приоритизации.\r\n- **Сбор информации от саппорт-инженеров.** Инженеры поддержки активнее всего общаются с пользователями и знают детали и проблемы, которые могут быть неизвестны и неочевидны другим членам команды.\r\n- **Изучение текущих данных аналитики и список того, что хотим собирать ещё в новом дизайне.** Для работы с данными использовались:  Google Analytics (+Google Tag Manager), Matomo, внутренние инструменты.\r\n- **Сбор требований от заказчиков и всех заинтересованных лиц.**\r\n- **Подготовка брифа.** Описание проблем, целей и задач. Развёрнутый ответ на вопрос, что мы будем считать успешным редизайном.\r\n\r\n## Процесс\r\n\r\nРабота над сайтом строилась 2-4 недельными спринтами. В конце каждого спринта проводились синхронизационные встречи с заказчиками. \r\n\r\nВ начале работы над дизайном была согласована общая концепция. Отрисованы низко детализированные прототипы с решением основных UX проблем. Найден общий подход к внешнему виду.  \r\n\r\nЧтобы работа над новым дизайном была эффективной и обратная связь поступала как можно быстрее был принят рад мер:\r\n\r\n- Продукт менеджер продукта показывал прототипы и просто картинки небольшой выборке самых активных и заинтересованных пользователей саппорт-центра. Благодаря этому получалось очень быстро собрать много полезной информации, которая помогала намного быстрее замечать точки роста.\r\n- Тесное общение с разработчиками. Так дизайн значительно обгонял разработку, нужно было сразу учитывать технические ограничения. Для этого проводились постоянные встречи между разработчикам, заказчиками и дизайнером. Так мы оценивали техническую сложность каждой фичи и на основе этого принимали решение, будем мы брать её в работу или нет.\r\n- На этапе, когда появилась первая работающая версия сайта, его стали тестировать сотрудники. В первую очередь, к тестированию подключались саппорт-инженеры. На этом этапе было собрано большое количество фидбека как по техническим багам, визуальным багам, так и просто по неудачным UX-решениям.\r\n- На следующем этапе снова к фидбеку снова были подключены активные клиенты. Которые были готовы дать развёрнутый фидбек.\r\n- На одном из финальных этапов сайт стал доступен для всех пользователей, но в виде бета-версии. При этом, каждый пользователь мог вернуться к старой версии сайта. Со временем, пользователей вернувшихся на старый сайт становилось меньше. Также, мы старались собирать фидбек от таких пользователей. Чтобы понять, почему они вернулись на старую версию сайта.\r\n- К новой версии сайта была прикручена продвинутая аналитика.\r\n\r\n## Примеры реализации\r\n\r\n### Релевантные подсказки при создании тикета\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/sc-2.png\" srcset=\"/images/blog/1x/sc-2.png 1x, /images/blog/2x/sc-2@2x.png 2x\" class=\"img-fluid\">\r\n\r\n### Подсказки при заполнении деталей, на основе подписки пользователя и прошлых тикетов\r\n\r\n### Упрощена навигация по дискуссии с ветвистой иерархией\r\n\r\n### Обновлён текстовый редактор\r\n\r\n### Обновлены инструменты фильтра на странице со списком тикетов\r\n\r\n### Обновлены почтовые уведомлению, улучшения подписка на уведомления на самом сайте\r\n\r\n# Внутренний портал и админ-панель\r\n\r\nОтдельной крупной задачей была необходимость сделать внутренний портал для сотрудников. Главным вызовом было задача учесть флоу саппорт-инженеров из разных команд. Ингода оно сильно отличалось и нужно было найти решения, которые устроят всех.\r\n\r\nДля этого проводилось множество сложных встреч с саппорт-инженерами из разных команд и топ-саппортом. По каким-то сценариям приходилось идти на компромиссы, по каким-то — выбирать один вариант и убеждать в правильности этого варианта остальных.\r\n\r\nВ результате, судя по опросам и личным разговорам, большая часть сотрудников осталась довольна новой системой.\r\n\r\nТакже, для более гибкой работы и настройки системы под текущие нужды бизнеса была спроектирована админ-панель, где можно точечно настроить различные параметры системы.\r\n\r\nТак как решения внутренние, вдаваться в подробности и показывать скриншоты я не могу.  \r\n\r\n# Результаты\r\n\r\nВ итоге, полный переход на новую версию получился безболезненным. На каждой итерации выявлялись проблемные места и не учтённые сценарий. Большая часть из них решалась, от небольшой части осознанно отказывались.\r\n\r\nСтарая версия сайта постепенно была отключена, когда количество её пользователей стало совсем небольшим.\r\n\r\nОбщая оценка редизайна была оценена как успешная. Как со стороны клиентов, так и со стороны сотрудников. Поставленные перед редизайном цели были достигнуты:\r\n\r\n- **Уменьшилась нагрузка на саппорт-инженеров.**\r\n    - Пользователи стали чаще находить решения самостоятельно: улучшен движок поиска, предлагаются релевантные ссылки при создании тикета, улучшена фильтрация.\r\n    - Пользователи стали реже ошибаться с выбором платформы/продукта и других деталей при создании тикета.\r\n    - Во внутреннем портале появились инструменты, помогающие саппорт-инженерам быстрее отвечать на тикеты, ответ на которые уже давался ранее.\r\n- **Не отформатированные тикеты появляются гораздо реже.** Решилась проблема с тем, что пользователи не понимали, как отправлять аттачи.\r\n- **Уменьшилось количество проблем, когда пользователи не получают уведомления вовремя.**\r\n    - В настройках уведомлений появился отдельный чекбокс, для получения уведомлений от саппорт-центра (раньше был единый чекбокс, для всех почтовых рассылок).\r\n    - Даже если пользователь отключил уведомления от таких рассылок, то саппорт-инженер будет об этом знать. И, если у пользователя возникают с этим проблемы, подсказать варианты решения.\r\n    - Сами почтовые уведомления стали понятнее, появилась возможность подключить браузерные уведомления.\r\n    - Появилась возможность подписать на рассылку на любой тикет со страницы этого тикета.\r\n- **Более точечно настроена аналитика.**\r\n    - Саппорт-инженер теперь может видеть карточку пользователя с историей посещений тикетов и документов в документации. Так инженер поддержки сразу может понять, какие ссылки есть смысл советовать, а какие — нет, так как пользователь их уже посещал.\r\n    - Добавлены ивенты на целевые действия.\r\n    - Созданный внутренние дашборды с анализом различных данных, необходимых для оценки поступаемого  количества тикетов и оценки эффективности саппорта.\r\n- **Поиск по тикетам стал гибче и проще.**\r\n    - Были докручены мета-теги, чтобы тикеты лучше искались поисковиками.\r\n    - Переосмыслены фильтры, добавлены готовые пресеты и возможность подписаться на созданный фильтр.\r\n    - Оптимизирована внутренняя страница поиска.\r\n- **Сделана мобильная версия клиентского портала.**', `Summary`='', `FormatterID`='neasden', `OriginalAlias`='support-center', `Uploads`='a:3:{i:0;s:24:\"/images/blog/1x/sc-1.png\";i:1;s:15:\"empty-image.jpg\";i:3;s:24:\"/images/blog/1x/sc-2.png\";}', `IsPublished`='1', `IsCommentable`='0', `IsVisible`='1', `IsFavourite`='1', `Stamp`='1711383800', `LastModified`='1711825562', `Offset`='14400', `IsDST`='0', `IsIndexed`='1', `IsExternal`='0', `ReadCount`='3', `SourceID`='0', `SourceNoteID`='0', `SourceNoteURL`='', `SourceNoteJSONURL`='', `SourceNoteData`='' WHERE `SubsetID`=1 AND (`ID`=1);

UPDATE `e2BlogAliases` SET `EntityType`='n', `EntityID`='1', `Alias`='support-center', `Stamp`='1711825699' WHERE `SubsetID`=1 AND (`ID`=1);

UPDATE `e2BlogNotes` SET `SubsetID`='1', `Title`='Support Center', `Text`='Система поддержки пользователей. Включает различные информационные ресурсы: вопросы от пользователей, статьи в базе знаний и истории версий.\r\n\r\nЕжедневно в Support Center создаются сотни новых вопросов и на них отвечают десятки саппорт-инженеров. За годы работы старый интерфейс устарел как внешне, так и с точки зрения удобства и функциональности. Пришла задача полностью переработать платформу, с учётом всех бизнес-требований.\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/sc-1.png\" srcset=\"/images/blog/1x/sc-1.png 1x, /images/blog/2x/sc-1@2x.png 2x\" class=\"img-fluid\">\r\n\r\n# Вводная\r\n\r\nСистема состоит из трёх основных порталов:\r\n\r\n- Клиентский портал\r\n- Внутренний портал для сотрудников\r\n- Админ-панель\r\n\r\nКаждым порталом пользуется свой сегмент пользователей. Клиенты компании ожидают простой и понятный интерфейс . В то время как саппорт-инженеры привыкли к определенным сценариям, которые тоже нужно было сохранить.\r\n\r\n# Клиентский портал\r\n\r\nНа этот ресурс были задействованы основные силы. Клиентский портал даёт возможность клиентам задавать вопросы технического характера и получать на них ответы. \r\n\r\nПеред редизайном ставились следующие задачи:\r\n\r\n- **Снизить нагрузку на саппорт-инженеров.** Помочь пользователям находить ответы самостоятельно, если на вопрос уже отвечали ранее или решение описано в документации.\r\n- **Улучшить UX.** Накопился список проблем, которые нужно было решать:\r\n    - **Пользователи выбирают неверный продукт при создании вопроса.** DevExpress разрабатывает и поддерживает десятки продуктов. У каждого продукта могут быть разные платформы и версии. Иногда важно знать, какая ОС установлена у пользователя, каким IDE он пользуется. Нужно было сделать так, чтобы у пользователя не возникали проблемы при выборе нужных значений. Помочь ему на этом пути.\r\n    - **Возникают проблемы при форматировании текста.** Пользователи приходят в поддержку с техническими проблемами. Описание проблемы содержит куски кода или целые архивы с проектами. В старой версии сайта пользователи путались в текстовом редакторе и отправляли не отформатированные куски куда, которые сливались с обычным текстом. Также, пользователи не всегда понимали как аттачить файлы. Всё это приводило к дополнительной нагрузке на саппорт-инженеров.\r\n    - **Пользователи не замечают уведомления об ответах в их тикете.** Проблема касалась как веб-интерфейса, так и уведомлений приходящих пользователю на почту. Пользователи либо не замечали уведомления, либо не понимали к чему они относятся, либо ранее отключали уведомления и забывали об этом. В связи с этим, среднее время на решение таких тикетов значительно увеличивалось.\r\n    - **Клиенты из одной и той же компании не видят вопросы друг друга.** Большинство клиентов предпочитает оставлять свои вопросы приватно. Чтобы их могли видеть только саппорт-инженеры. Из-за этого возникала проблема, что вопросы становились приватными полностью и их не могли видеть даже сотрудники одной и той же компании с разных аккаунтов.\r\n    - **Неудобные фильтры.** Пользователи, что на странице со списком публичных тикетов невозможно ничего найти. Фильтров мало, а то, что есть не всегда работает очевидным образом.\r\n- **Переосмыслить встроенный инструмент “Version History”.**\r\n- **Улучшить аналитику.**\r\n- **Освежить внешний вид.**\r\n\r\n## Подготовка к работе\r\n\r\nПеред началом работы над редизайном была проведена подготовительная работы. Подготовлен общий план работы и проведены встречи со всеми заинтересованными лицами. Был подготовлен итоговый бриф проекта. \r\n\r\nЧасть работ, которые были проведены на этом этапе:\r\n\r\n- **Анализ текущего дизайна.** UX-тестирование текущего сайта, поиск проблем.\r\n- **Ресёрч конкурентов.** Изучение как прямых конкурентов, так и решений крупных платформ. Например, Zendesk, Freshdesk, Zoho Desk.\r\n- **Сбор и анализ существующего фидбека.** За годы работы, накопилось большое количество тикетов, комментарием и другой обратной связи касаемо работы портала. Была проведена большая работу по сбору всей это информации в один документ, её анализу и приоритизации.\r\n- **Сбор информации от саппорт-инженеров.** Инженеры поддержки активнее всего общаются с пользователями и знают детали и проблемы, которые могут быть неизвестны и неочевидны другим членам команды.\r\n- **Изучение текущих данных аналитики и список того, что хотим собирать ещё в новом дизайне.** Для работы с данными использовались:  Google Analytics (+Google Tag Manager), Matomo, внутренние инструменты.\r\n- **Сбор требований от заказчиков и всех заинтересованных лиц.**\r\n- **Подготовка брифа.** Описание проблем, целей и задач. Развёрнутый ответ на вопрос, что мы будем считать успешным редизайном.\r\n\r\n## Процесс\r\n\r\nРабота над сайтом строилась 2-4 недельными спринтами. В конце каждого спринта проводились синхронизационные встречи с заказчиками. \r\n\r\nВ начале работы над дизайном была согласована общая концепция. Отрисованы низко детализированные прототипы с решением основных UX проблем. Найден общий подход к внешнему виду.  \r\n\r\nЧтобы работа над новым дизайном была эффективной и обратная связь поступала как можно быстрее был принят рад мер:\r\n\r\n- Продукт менеджер продукта показывал прототипы и просто картинки небольшой выборке самых активных и заинтересованных пользователей саппорт-центра. Благодаря этому получалось очень быстро собрать много полезной информации, которая помогала намного быстрее замечать точки роста.\r\n- Тесное общение с разработчиками. Так дизайн значительно обгонял разработку, нужно было сразу учитывать технические ограничения. Для этого проводились постоянные встречи между разработчикам, заказчиками и дизайнером. Так мы оценивали техническую сложность каждой фичи и на основе этого принимали решение, будем мы брать её в работу или нет.\r\n- На этапе, когда появилась первая работающая версия сайта, его стали тестировать сотрудники. В первую очередь, к тестированию подключались саппорт-инженеры. На этом этапе было собрано большое количество фидбека как по техническим багам, визуальным багам, так и просто по неудачным UX-решениям.\r\n- На следующем этапе снова к фидбеку снова были подключены активные клиенты. Которые были готовы дать развёрнутый фидбек.\r\n- На одном из финальных этапов сайт стал доступен для всех пользователей, но в виде бета-версии. При этом, каждый пользователь мог вернуться к старой версии сайта. Со временем, пользователей вернувшихся на старый сайт становилось меньше. Также, мы старались собирать фидбек от таких пользователей. Чтобы понять, почему они вернулись на старую версию сайта.\r\n- К новой версии сайта была прикручена продвинутая аналитика.\r\n\r\n## Примеры реализации\r\n\r\n### Релевантные подсказки при создании тикета\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/sc-2.png\" srcset=\"/images/blog/1x/sc-2.png 1x, /images/blog/2x/sc-2@2x.png 2x\" class=\"img-fluid\">\r\n\r\n### Упрощена навигация по дискуссии с ветвистой иерархией\r\n\r\n### Обновлён текстовый редактор\r\n\r\n### Обновлены инструменты фильтра на странице со списком тикетов\r\n\r\n### Обновлены почтовые уведомлению, улучшения подписка на уведомления на самом сайте\r\n\r\n# Внутренний портал и админ-панель\r\n\r\nОтдельной крупной задачей была необходимость сделать внутренний портал для сотрудников. Главным вызовом было задача учесть флоу саппорт-инженеров из разных команд. Ингода оно сильно отличалось и нужно было найти решения, которые устроят всех.\r\n\r\nДля этого проводилось множество сложных встреч с саппорт-инженерами из разных команд и топ-саппортом. По каким-то сценариям приходилось идти на компромиссы, по каким-то — выбирать один вариант и убеждать в правильности этого варианта остальных.\r\n\r\nВ результате, судя по опросам и личным разговорам, большая часть сотрудников осталась довольна новой системой.\r\n\r\nТакже, для более гибкой работы и настройки системы под текущие нужды бизнеса была спроектирована админ-панель, где можно точечно настроить различные параметры системы.\r\n\r\nТак как решения внутренние, вдаваться в подробности и показывать скриншоты я не могу.  \r\n\r\n# Результаты\r\n\r\nВ итоге, полный переход на новую версию получился безболезненным. На каждой итерации выявлялись проблемные места и не учтённые сценарий. Большая часть из них решалась, от небольшой части осознанно отказывались.\r\n\r\nСтарая версия сайта постепенно была отключена, когда количество её пользователей стало совсем небольшим.\r\n\r\nОбщая оценка редизайна была оценена как успешная. Как со стороны клиентов, так и со стороны сотрудников. Поставленные перед редизайном цели были достигнуты:\r\n\r\n- **Уменьшилась нагрузка на саппорт-инженеров.**\r\n    - Пользователи стали чаще находить решения самостоятельно: улучшен движок поиска, предлагаются релевантные ссылки при создании тикета, улучшена фильтрация.\r\n    - Пользователи стали реже ошибаться с выбором платформы/продукта и других деталей при создании тикета.\r\n    - Во внутреннем портале появились инструменты, помогающие саппорт-инженерам быстрее отвечать на тикеты, ответ на которые уже давался ранее.\r\n- **Не отформатированные тикеты появляются гораздо реже.** Решилась проблема с тем, что пользователи не понимали, как отправлять аттачи.\r\n- **Уменьшилось количество проблем, когда пользователи не получают уведомления вовремя.**\r\n    - В настройках уведомлений появился отдельный чекбокс, для получения уведомлений от саппорт-центра (раньше был единый чекбокс, для всех почтовых рассылок).\r\n    - Даже если пользователь отключил уведомления от таких рассылок, то саппорт-инженер будет об этом знать. И, если у пользователя возникают с этим проблемы, подсказать варианты решения.\r\n    - Сами почтовые уведомления стали понятнее, появилась возможность подключить браузерные уведомления.\r\n    - Появилась возможность подписать на рассылку на любой тикет со страницы этого тикета.\r\n- **Более точечно настроена аналитика.**\r\n    - Саппорт-инженер теперь может видеть карточку пользователя с историей посещений тикетов и документов в документации. Так инженер поддержки сразу может понять, какие ссылки есть смысл советовать, а какие — нет, так как пользователь их уже посещал.\r\n    - Добавлены ивенты на целевые действия.\r\n    - Созданный внутренние дашборды с анализом различных данных, необходимых для оценки поступаемого  количества тикетов и оценки эффективности саппорта.\r\n- **Поиск по тикетам стал гибче и проще.**\r\n    - Были докручены мета-теги, чтобы тикеты лучше искались поисковиками.\r\n    - Переосмыслены фильтры, добавлены готовые пресеты и возможность подписаться на созданный фильтр.\r\n    - Оптимизирована внутренняя страница поиска.\r\n- **Сделана мобильная версия клиентского портала.**', `Summary`='', `FormatterID`='neasden', `OriginalAlias`='support-center', `Uploads`='a:3:{i:0;s:24:\"/images/blog/1x/sc-1.png\";i:1;s:15:\"empty-image.jpg\";i:3;s:24:\"/images/blog/1x/sc-2.png\";}', `IsPublished`='1', `IsCommentable`='0', `IsVisible`='1', `IsFavourite`='1', `Stamp`='1711383800', `LastModified`='1711825699', `Offset`='14400', `IsDST`='0', `IsIndexed`='0', `IsExternal`='0', `ReadCount`='3', `SourceID`='0', `SourceNoteID`='0', `SourceNoteURL`='', `SourceNoteJSONURL`='', `SourceNoteData`='' WHERE `SubsetID`=1 AND (`ID`=1);

UPDATE `e2BlogNotes` SET `SubsetID`='1', `Title`='Support Center', `Text`='Система поддержки пользователей. Включает различные информационные ресурсы: вопросы от пользователей, статьи в базе знаний и истории версий.\r\n\r\nЕжедневно в Support Center создаются сотни новых вопросов и на них отвечают десятки саппорт-инженеров. За годы работы старый интерфейс устарел как внешне, так и с точки зрения удобства и функциональности. Пришла задача полностью переработать платформу, с учётом всех бизнес-требований.\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/sc-1.png\" srcset=\"/images/blog/1x/sc-1.png 1x, /images/blog/2x/sc-1@2x.png 2x\" class=\"img-fluid\">\r\n\r\n# Вводная\r\n\r\nСистема состоит из трёх основных порталов:\r\n\r\n- Клиентский портал\r\n- Внутренний портал для сотрудников\r\n- Админ-панель\r\n\r\nКаждым порталом пользуется свой сегмент пользователей. Клиенты компании ожидают простой и понятный интерфейс . В то время как саппорт-инженеры привыкли к определенным сценариям, которые тоже нужно было сохранить.\r\n\r\n# Клиентский портал\r\n\r\nНа этот ресурс были задействованы основные силы. Клиентский портал даёт возможность клиентам задавать вопросы технического характера и получать на них ответы. \r\n\r\nПеред редизайном ставились следующие задачи:\r\n\r\n- **Снизить нагрузку на саппорт-инженеров.** Помочь пользователям находить ответы самостоятельно, если на вопрос уже отвечали ранее или решение описано в документации.\r\n- **Улучшить UX.** Накопился список проблем, которые нужно было решать:\r\n    - **Пользователи выбирают неверный продукт при создании вопроса.** DevExpress разрабатывает и поддерживает десятки продуктов. У каждого продукта могут быть разные платформы и версии. Иногда важно знать, какая ОС установлена у пользователя, каким IDE он пользуется. Нужно было сделать так, чтобы у пользователя не возникали проблемы при выборе нужных значений. Помочь ему на этом пути.\r\n    - **Возникают проблемы при форматировании текста.** Пользователи приходят в поддержку с техническими проблемами. Описание проблемы содержит куски кода или целые архивы с проектами. В старой версии сайта пользователи путались в текстовом редакторе и отправляли не отформатированные куски куда, которые сливались с обычным текстом. Также, пользователи не всегда понимали как аттачить файлы. Всё это приводило к дополнительной нагрузке на саппорт-инженеров.\r\n    - **Пользователи не замечают уведомления об ответах в их тикете.** Проблема касалась как веб-интерфейса, так и уведомлений приходящих пользователю на почту. Пользователи либо не замечали уведомления, либо не понимали к чему они относятся, либо ранее отключали уведомления и забывали об этом. В связи с этим, среднее время на решение таких тикетов значительно увеличивалось.\r\n    - **Клиенты из одной и той же компании не видят вопросы друг друга.** Большинство клиентов предпочитает оставлять свои вопросы приватно. Чтобы их могли видеть только саппорт-инженеры. Из-за этого возникала проблема, что вопросы становились приватными полностью и их не могли видеть даже сотрудники одной и той же компании с разных аккаунтов.\r\n    - **Неудобные фильтры.** Пользователи, что на странице со списком публичных тикетов невозможно ничего найти. Фильтров мало, а то, что есть не всегда работает очевидным образом.\r\n- **Переосмыслить встроенный инструмент “Version History”.**\r\n- **Улучшить аналитику.**\r\n- **Освежить внешний вид.**\r\n\r\n## Подготовка к работе\r\n\r\nПеред началом работы над редизайном была проведена подготовительная работы. Подготовлен общий план работы и проведены встречи со всеми заинтересованными лицами. Был подготовлен итоговый бриф проекта. \r\n\r\nЧасть работ, которые были проведены на этом этапе:\r\n\r\n- **Анализ текущего дизайна.** UX-тестирование текущего сайта, поиск проблем.\r\n- **Ресёрч конкурентов.** Изучение как прямых конкурентов, так и решений крупных платформ. Например, Zendesk, Freshdesk, Zoho Desk.\r\n- **Сбор и анализ существующего фидбека.** За годы работы, накопилось большое количество тикетов, комментарием и другой обратной связи касаемо работы портала. Была проведена большая работу по сбору всей это информации в один документ, её анализу и приоритизации.\r\n- **Сбор информации от саппорт-инженеров.** Инженеры поддержки активнее всего общаются с пользователями и знают детали и проблемы, которые могут быть неизвестны и неочевидны другим членам команды.\r\n- **Изучение текущих данных аналитики и список того, что хотим собирать ещё в новом дизайне.** Для работы с данными использовались:  Google Analytics (+Google Tag Manager), Matomo, внутренние инструменты.\r\n- **Сбор требований от заказчиков и всех заинтересованных лиц.**\r\n- **Подготовка брифа.** Описание проблем, целей и задач. Развёрнутый ответ на вопрос, что мы будем считать успешным редизайном.\r\n\r\n## Процесс\r\n\r\nРабота над сайтом строилась 2-4 недельными спринтами. В конце каждого спринта проводились синхронизационные встречи с заказчиками. \r\n\r\nВ начале работы над дизайном была согласована общая концепция. Отрисованы низко детализированные прототипы с решением основных UX проблем. Найден общий подход к внешнему виду.  \r\n\r\nЧтобы работа над новым дизайном была эффективной и обратная связь поступала как можно быстрее был принят рад мер:\r\n\r\n- Продукт менеджер продукта показывал прототипы и просто картинки небольшой выборке самых активных и заинтересованных пользователей саппорт-центра. Благодаря этому получалось очень быстро собрать много полезной информации, которая помогала намного быстрее замечать точки роста.\r\n- Тесное общение с разработчиками. Так дизайн значительно обгонял разработку, нужно было сразу учитывать технические ограничения. Для этого проводились постоянные встречи между разработчикам, заказчиками и дизайнером. Так мы оценивали техническую сложность каждой фичи и на основе этого принимали решение, будем мы брать её в работу или нет.\r\n- На этапе, когда появилась первая работающая версия сайта, его стали тестировать сотрудники. В первую очередь, к тестированию подключались саппорт-инженеры. На этом этапе было собрано большое количество фидбека как по техническим багам, визуальным багам, так и просто по неудачным UX-решениям.\r\n- На следующем этапе снова к фидбеку снова были подключены активные клиенты. Которые были готовы дать развёрнутый фидбек.\r\n- На одном из финальных этапов сайт стал доступен для всех пользователей, но в виде бета-версии. При этом, каждый пользователь мог вернуться к старой версии сайта. Со временем, пользователей вернувшихся на старый сайт становилось меньше. Также, мы старались собирать фидбек от таких пользователей. Чтобы понять, почему они вернулись на старую версию сайта.\r\n- К новой версии сайта была прикручена продвинутая аналитика.\r\n\r\n## Примеры реализации\r\n\r\n### Релевантные подсказки при создании тикета\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/sc-2.png\" srcset=\"/images/blog/1x/sc-2.png 1x, /images/blog/2x/sc-2@2x.png 2x\" class=\"img-fluid\">\r\n\r\n### Упрощена навигация по дискуссии с ветвистой иерархией\r\n\r\n### Обновлён текстовый редактор\r\n\r\n### Обновлены инструменты фильтра на странице со списком тикетов\r\n\r\n### Обновлены почтовые уведомлению, улучшения подписка на уведомления на самом сайте\r\n\r\n# Внутренний портал и админ-панель\r\n\r\nОтдельной крупной задачей была необходимость сделать внутренний портал для сотрудников. Главным вызовом было задача учесть флоу саппорт-инженеров из разных команд. Ингода оно сильно отличалось и нужно было найти решения, которые устроят всех.\r\n\r\nДля этого проводилось множество сложных встреч с саппорт-инженерами из разных команд и топ-саппортом. По каким-то сценариям приходилось идти на компромиссы, по каким-то — выбирать один вариант и убеждать в правильности этого варианта остальных.\r\n\r\nВ результате, судя по опросам и личным разговорам, большая часть сотрудников осталась довольна новой системой.\r\n\r\nТакже, для более гибкой работы и настройки системы под текущие нужды бизнеса была спроектирована админ-панель, где можно точечно настроить различные параметры системы.\r\n\r\nТак как решения внутренние, вдаваться в подробности и показывать скриншоты я не могу.  \r\n\r\n# Результаты\r\n\r\nВ итоге, полный переход на новую версию получился безболезненным. На каждой итерации выявлялись проблемные места и не учтённые сценарий. Большая часть из них решалась, от небольшой части осознанно отказывались.\r\n\r\nСтарая версия сайта постепенно была отключена, когда количество её пользователей стало совсем небольшим.\r\n\r\nОбщая оценка редизайна была оценена как успешная. Как со стороны клиентов, так и со стороны сотрудников. Поставленные перед редизайном цели были достигнуты:\r\n\r\n- **Уменьшилась нагрузка на саппорт-инженеров.**\r\n    - Пользователи стали чаще находить решения самостоятельно: улучшен движок поиска, предлагаются релевантные ссылки при создании тикета, улучшена фильтрация.\r\n    - Пользователи стали реже ошибаться с выбором платформы/продукта и других деталей при создании тикета.\r\n    - Во внутреннем портале появились инструменты, помогающие саппорт-инженерам быстрее отвечать на тикеты, ответ на которые уже давался ранее.\r\n- **Не отформатированные тикеты появляются гораздо реже.** Решилась проблема с тем, что пользователи не понимали, как отправлять аттачи.\r\n- **Уменьшилось количество проблем, когда пользователи не получают уведомления вовремя.**\r\n    - В настройках уведомлений появился отдельный чекбокс, для получения уведомлений от саппорт-центра (раньше был единый чекбокс, для всех почтовых рассылок).\r\n    - Даже если пользователь отключил уведомления от таких рассылок, то саппорт-инженер будет об этом знать. И, если у пользователя возникают с этим проблемы, подсказать варианты решения.\r\n    - Сами почтовые уведомления стали понятнее, появилась возможность подключить браузерные уведомления.\r\n    - Появилась возможность подписать на рассылку на любой тикет со страницы этого тикета.\r\n- **Более точечно настроена аналитика.**\r\n    - Саппорт-инженер теперь может видеть карточку пользователя с историей посещений тикетов и документов в документации. Так инженер поддержки сразу может понять, какие ссылки есть смысл советовать, а какие — нет, так как пользователь их уже посещал.\r\n    - Добавлены ивенты на целевые действия.\r\n    - Созданный внутренние дашборды с анализом различных данных, необходимых для оценки поступаемого  количества тикетов и оценки эффективности саппорта.\r\n- **Поиск по тикетам стал гибче и проще.**\r\n    - Были докручены мета-теги, чтобы тикеты лучше искались поисковиками.\r\n    - Переосмыслены фильтры, добавлены готовые пресеты и возможность подписаться на созданный фильтр.\r\n    - Оптимизирована внутренняя страница поиска.\r\n- **Сделана мобильная версия клиентского портала.**', `Summary`='', `FormatterID`='neasden', `OriginalAlias`='support-center', `Uploads`='a:3:{i:0;s:24:\"/images/blog/1x/sc-1.png\";i:1;s:15:\"empty-image.jpg\";i:3;s:24:\"/images/blog/1x/sc-2.png\";}', `IsPublished`='1', `IsCommentable`='0', `IsVisible`='1', `IsFavourite`='1', `Stamp`='1711383800', `LastModified`='1711825699', `Offset`='14400', `IsDST`='0', `IsIndexed`='1', `IsExternal`='0', `ReadCount`='3', `SourceID`='0', `SourceNoteID`='0', `SourceNoteURL`='', `SourceNoteJSONURL`='', `SourceNoteData`='' WHERE `SubsetID`=1 AND (`ID`=1);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 4;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '4', '1711825200', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1709234660);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 4;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '4', '1711825200', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1709234837);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 6;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '6', '1711825200', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1709234848);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 3;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '3', '1711825200', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1709234881);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 2;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '2', '1711825200', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1709234884);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1711825200', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1709235383);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 6;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '6', '1711825200', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1709235385);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 3;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '3', '1711825200', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1709235386);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 1;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '1', '1711825200', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1709235388);

UPDATE `e2BlogNotes` SET `SubsetID`='1', `Title`='Support Center', `Text`='Система поддержки пользователей. Включает различные информационные ресурсы: вопросы от пользователей, статьи в базе знаний и истории версий.\r\n\r\nЕжедневно в Support Center создаются сотни новых вопросов и на них отвечают десятки саппорт-инженеров. За годы работы старый интерфейс устарел как внешне, так и с точки зрения удобства и функциональности. Пришла задача полностью переработать платформу, с учётом всех бизнес-требований.\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/sc-1.png\" srcset=\"/images/blog/1x/sc-1.png 1x, /images/blog/2x/sc-1@2x.png 2x\" class=\"img-fluid\">\r\n\r\n# Вводная\r\n\r\nСистема состоит из трёх основных порталов:\r\n\r\n- Клиентский портал\r\n- Внутренний портал для сотрудников\r\n- Админ-панель\r\n\r\nКаждым порталом пользуется свой сегмент пользователей. Клиенты компании ожидают простой и понятный интерфейс . В то время как саппорт-инженеры привыкли к определенным сценариям, которые тоже нужно было сохранить.\r\n\r\n# Клиентский портал\r\n\r\nНа этот ресурс были задействованы основные силы. Клиентский портал даёт возможность клиентам задавать вопросы технического характера и получать на них ответы. \r\n\r\nПеред редизайном ставились следующие задачи:\r\n\r\n- **Снизить нагрузку на саппорт-инженеров.** Помочь пользователям находить ответы самостоятельно, если на вопрос уже отвечали ранее или решение описано в документации.\r\n- **Улучшить UX.** Накопился список проблем, которые нужно было решать:\r\n    - **Пользователи выбирают неверный продукт при создании вопроса.** DevExpress разрабатывает и поддерживает десятки продуктов. У каждого продукта могут быть разные платформы и версии. Иногда важно знать, какая ОС установлена у пользователя, каким IDE он пользуется. Нужно было сделать так, чтобы у пользователя не возникали проблемы при выборе нужных значений. Помочь ему на этом пути.\r\n    - **Возникают проблемы при форматировании текста.** Пользователи приходят в поддержку с техническими проблемами. Описание проблемы содержит куски кода или целые архивы с проектами. В старой версии сайта пользователи путались в текстовом редакторе и отправляли не отформатированные куски куда, которые сливались с обычным текстом. Также, пользователи не всегда понимали как аттачить файлы. Всё это приводило к дополнительной нагрузке на саппорт-инженеров.\r\n    - **Пользователи не замечают уведомления об ответах в их тикете.** Проблема касалась как веб-интерфейса, так и уведомлений приходящих пользователю на почту. Пользователи либо не замечали уведомления, либо не понимали к чему они относятся, либо ранее отключали уведомления и забывали об этом. В связи с этим, среднее время на решение таких тикетов значительно увеличивалось.\r\n    - **Клиенты из одной и той же компании не видят вопросы друг друга.** Большинство клиентов предпочитает оставлять свои вопросы приватно. Чтобы их могли видеть только саппорт-инженеры. Из-за этого возникала проблема, что вопросы становились приватными полностью и их не могли видеть даже сотрудники одной и той же компании с разных аккаунтов.\r\n    - **Неудобные фильтры.** Пользователи, что на странице со списком публичных тикетов невозможно ничего найти. Фильтров мало, а то, что есть не всегда работает очевидным образом.\r\n- **Переосмыслить встроенный инструмент “Version History”.**\r\n- **Улучшить аналитику.**\r\n- **Освежить внешний вид.**\r\n\r\n## Подготовка к работе\r\n\r\nПеред началом работы над редизайном была проведена подготовительная работы. Подготовлен общий план работы и проведены встречи со всеми заинтересованными лицами. Был подготовлен итоговый бриф проекта. \r\n\r\nЧасть работ, которые были проведены на этом этапе:\r\n\r\n- **Анализ текущего дизайна.** UX-тестирование текущего сайта, поиск проблем.\r\n- **Ресёрч конкурентов.** Изучение как прямых конкурентов, так и решений крупных платформ. Например, Zendesk, Freshdesk, Zoho Desk.\r\n- **Сбор и анализ существующего фидбека.** За годы работы, накопилось большое количество тикетов, комментарием и другой обратной связи касаемо работы портала. Была проведена большая работу по сбору всей это информации в один документ, её анализу и приоритизации.\r\n- **Сбор информации от саппорт-инженеров.** Инженеры поддержки активнее всего общаются с пользователями и знают детали и проблемы, которые могут быть неизвестны и неочевидны другим членам команды.\r\n- **Изучение текущих данных аналитики и список того, что хотим собирать ещё в новом дизайне.** Для работы с данными использовались:  Google Analytics (+Google Tag Manager), Matomo, внутренние инструменты.\r\n- **Сбор требований от заказчиков и всех заинтересованных лиц.**\r\n- **Подготовка брифа.** Описание проблем, целей и задач. Развёрнутый ответ на вопрос, что мы будем считать успешным редизайном.\r\n\r\n## Процесс\r\n\r\nРабота над сайтом строилась 2-4 недельными спринтами. В конце каждого спринта проводились синхронизационные встречи с заказчиками. \r\n\r\nВ начале работы над дизайном была согласована общая концепция. Отрисованы низко детализированные прототипы с решением основных UX проблем. Найден общий подход к внешнему виду.  \r\n\r\nЧтобы работа над новым дизайном была эффективной и обратная связь поступала как можно быстрее был принят рад мер:\r\n\r\n- Продукт менеджер продукта показывал прототипы и просто картинки небольшой выборке самых активных и заинтересованных пользователей саппорт-центра. Благодаря этому получалось очень быстро собрать много полезной информации, которая помогала намного быстрее замечать точки роста.\r\n- Тесное общение с разработчиками. Так дизайн значительно обгонял разработку, нужно было сразу учитывать технические ограничения. Для этого проводились постоянные встречи между разработчикам, заказчиками и дизайнером. Так мы оценивали техническую сложность каждой фичи и на основе этого принимали решение, будем мы брать её в работу или нет.\r\n- На этапе, когда появилась первая работающая версия сайта, его стали тестировать сотрудники. В первую очередь, к тестированию подключались саппорт-инженеры. На этом этапе было собрано большое количество фидбека как по техническим багам, визуальным багам, так и просто по неудачным UX-решениям.\r\n- На следующем этапе снова к фидбеку снова были подключены активные клиенты. Которые были готовы дать развёрнутый фидбек.\r\n- На одном из финальных этапов сайт стал доступен для всех пользователей, но в виде бета-версии. При этом, каждый пользователь мог вернуться к старой версии сайта. Со временем, пользователей вернувшихся на старый сайт становилось меньше. Также, мы старались собирать фидбек от таких пользователей. Чтобы понять, почему они вернулись на старую версию сайта.\r\n- К новой версии сайта была прикручена продвинутая аналитика.\r\n\r\n## Примеры реализации\r\n\r\n### Релевантные подсказки при создании тикета\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/sc-2.png\" srcset=\"/images/blog/1x/sc-2.png 1x, /images/blog/2x/sc-2@2x.png 2x\" class=\"img-fluid\">\r\n\r\n### Упрощена навигация по дискуссии с ветвистой иерархией\r\n\r\n### Обновлён текстовый редактор\r\n\r\n### Обновлены инструменты фильтра на странице со списком тикетов\r\n\r\n### Обновлены почтовые уведомлению, улучшения подписка на уведомления на самом сайте\r\n\r\n# Внутренний портал и админ-панель\r\n\r\nОтдельной крупной задачей была необходимость сделать внутренний портал для сотрудников. Главным вызовом было задача учесть флоу саппорт-инженеров из разных команд. Ингода оно сильно отличалось и нужно было найти решения, которые устроят всех.\r\n\r\nДля этого проводилось множество сложных встреч с саппорт-инженерами из разных команд и топ-саппортом. По каким-то сценариям приходилось идти на компромиссы, по каким-то — выбирать один вариант и убеждать в правильности этого варианта остальных.\r\n\r\nВ результате, судя по опросам и личным разговорам, большая часть сотрудников осталась довольна новой системой.\r\n\r\nТакже, для более гибкой работы и настройки системы под текущие нужды бизнеса была спроектирована админ-панель, где можно точечно настроить различные параметры системы.\r\n\r\nТак как решения внутренние, вдаваться в подробности и показывать скриншоты я не могу.  \r\n\r\n# Результаты\r\n\r\nВ итоге, полный переход на новую версию получился безболезненным. На каждой итерации выявлялись проблемные места и не учтённые сценарий. Большая часть из них решалась, от небольшой части осознанно отказывались.\r\n\r\nСтарая версия сайта постепенно была отключена, когда количество её пользователей стало совсем небольшим.\r\n\r\nОбщая оценка редизайна была оценена как успешная. Как со стороны клиентов, так и со стороны сотрудников. Поставленные перед редизайном цели были достигнуты:\r\n\r\n- **Уменьшилась нагрузка на саппорт-инженеров.**\r\n    - Пользователи стали чаще находить решения самостоятельно: улучшен движок поиска, предлагаются релевантные ссылки при создании тикета, улучшена фильтрация.\r\n    - Пользователи стали реже ошибаться с выбором платформы/продукта и других деталей при создании тикета.\r\n    - Во внутреннем портале появились инструменты, помогающие саппорт-инженерам быстрее отвечать на тикеты, ответ на которые уже давался ранее.\r\n- **Не отформатированные тикеты появляются гораздо реже.** Решилась проблема с тем, что пользователи не понимали, как отправлять аттачи.\r\n- **Уменьшилось количество проблем, когда пользователи не получают уведомления вовремя.**\r\n    - В настройках уведомлений появился отдельный чекбокс, для получения уведомлений от саппорт-центра (раньше был единый чекбокс, для всех почтовых рассылок).\r\n    - Даже если пользователь отключил уведомления от таких рассылок, то саппорт-инженер будет об этом знать. И, если у пользователя возникают с этим проблемы, подсказать варианты решения.\r\n    - Сами почтовые уведомления стали понятнее, появилась возможность подключить браузерные уведомления.\r\n    - Появилась возможность подписать на рассылку на любой тикет со страницы этого тикета.\r\n- **Более точечно настроена аналитика.**\r\n    - Саппорт-инженер теперь может видеть карточку пользователя с историей посещений тикетов и документов в документации. Так инженер поддержки сразу может понять, какие ссылки есть смысл советовать, а какие — нет, так как пользователь их уже посещал.\r\n    - Добавлены ивенты на целевые действия.\r\n    - Созданный внутренние дашборды с анализом различных данных, необходимых для оценки поступаемого  количества тикетов и оценки эффективности саппорта.\r\n- **Поиск по тикетам стал гибче и проще.**\r\n    - Были докручены мета-теги, чтобы тикеты лучше искались поисковиками.\r\n    - Переосмыслены фильтры, добавлены готовые пресеты и возможность подписаться на созданный фильтр.\r\n    - Оптимизирована внутренняя страница поиска.\r\n- **Сделана мобильная версия клиентского портала.**', `Summary`='', `FormatterID`='neasden', `OriginalAlias`='support-center', `Uploads`='a:3:{i:0;s:24:\"/images/blog/1x/sc-1.png\";i:1;s:15:\"empty-image.jpg\";i:2;s:24:\"/images/blog/1x/sc-2.png\";}', `IsPublished`='1', `IsCommentable`='0', `IsVisible`='1', `IsFavourite`='1', `Stamp`='1711383800', `LastModified`='1711825699', `Offset`='14400', `IsDST`='0', `IsIndexed`='1', `IsExternal`='0', `ReadCount`='4', `SourceID`='0', `SourceNoteID`='0', `SourceNoteURL`='', `SourceNoteJSONURL`='', `SourceNoteData`='' WHERE `SubsetID`=1 AND (`ID`=1);

UPDATE `e2BlogAliases` SET `EntityType`='n', `EntityID`='5', `Alias`='blazor', `Stamp`='1711827625' WHERE `SubsetID`=1 AND (`ID`=6);

UPDATE `e2BlogNotes` SET `SubsetID`='1', `Title`='Дизайн-система Blazor', `Text`='DevExpress Blazor — это набор компонентов пользовательского интерфейса. Активно применяется в приложениях на платформе Blazor и предлагает мощный набор компонентов: таблицы данных, календари, планировщики, выпадающие списки, диалоговые окна и многие другие.\r\n\r\nЗадача — переосмыслить и создать дизайн-систему в Figma на основе существующих артефактов и наработок.\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/blazor-1.png\" srcset=\"/images/blog/1x/blazor-1.png 1x, /images/blog/2x/blazor-1@2x.png 2x\" class=\"img-fluid\">\r\n\r\n# Вводные\r\n\r\nBlazor продукт развивался и вместе с этим росло количество и сложность компонентов. Раньше дизайнер рисовал отдельный макет под каждую задачу. Не было системного подхода и единых правил. Со временем этот подход начал приносить проблемы:\r\n- Разработка начала сильно обгонять дизайн.\r\n- Многие решения по краевым сценариям стали приниматься разработчиками.\r\n- Дизайнер тратил много времени на поиск UI и UX багов на поздних этапах.\r\n- Итоговая фича могла сильно отличаться от нарисованного макета.\r\n\r\nОтдельной проблемой была сложность каждого компонента:\r\n- **Разные темы**. В разных темах компонент не только меняет цвет, но и начинает обладать другими визуальными свойствами.\r\n- **Несколько размеров**. Каждый компонент линейки представлен в трёх размерах. \r\n- **Дополнительные стили**. Большой набор стилистических вариантов для компонентов-атомов.\r\n\r\nНапример, одна только кнопка состоит из 150 вариантов компонента:\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/blazor-2.png\" srcset=\"/images/blog/1x/blazor-2.png 1x, /images/blog/2x/blazor-2@2x.png 2x\" class=\"img-fluid\">\r\n\r\nБыло принято решение менять подход — разработать стандарты, правила постановки задач и проектирования.\r\n\r\n# Задачи\r\n\r\nПеред новой дизайн-системой поставили следующие задачи:\r\n\r\n1. **Оптимизация работы команды на этапах дизайна и разработки.** \r\nРаньше, эти процессы были довольно хаотичны. Дизайнер брал в задачу в работу и изображал примерную реализацию компонента. Многие краевые сценарии не учитывались. Какие-то решения в процессе разработки менялись на ходу. В итоге, разработка затягивалась, фичи резались и итоговый результат сильно отличался от исходной картинки.\r\n2. **Автоматизация и консистентность**. \r\nБольшой размер и сложность компонентов сильно затрудняли внесение любых изменений в дизайн. Даже небольшие стилистические изменения в базовом компоненте, типа кнопки, приводили к огромному количеству работы со стороны дизайнера. Так как нужно было учесть разные темы, размеры и стили.\r\n3. **Консистентность цвета**. \r\nОтдельно стоит отметить проблему с цветом. Многие цвета компонентов в коде рассчитывались с помощью миксинов. Это приводило ко многим проблемам, в том числе, проблемам с контрастностью.\r\n4. **Доступность.**\r\nПользователи продукта стали всё чаще интересоваться, насколько компоненты доступны для разных категорий пользователей. Нужно было сформировать подход, когда дизайнер на этапе проработки компонента учитывает все WCAG 2.2 AA требования.\r\n5. **Централизация знаний.**\r\nМногие знания о тех или иных дизайн-решениях нигде не фиксировались. Единственным источником знания были участвующие в работе на фичей члены команды. Нужно было сформировать систему документации.\r\n6. **UI Kit.**\r\nВсё чаще стали приходить запросы на UI Kit от пользователей. К тому же, это уже давно было у конкурентов.\r\n\r\n# Результат\r\n\r\n## Компоненты в Figma переработаны с нуля\r\n\r\nДизайн компонентов теперь полностью повторяет функционал кодовой реализации. Учтены все редкие сценарии и краевые состояния. Перед отрисовкой каждого компоненты изучались спецификация+API компонента и все сценарии его использования.\r\n\r\n### **Пример реализации компонента Grid**\r\n\r\nКомпонент Grid — один из самых больших и популярных в линейке Blazor. Представляет собой решение для отображения данных в табличном формате. Включает множество функций для управления данными. Например: фильтрация, группировка, пагинация, сортировка и многое другое.\r\n\r\nОсновную сложность представляет его размер:\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/blazor-3.png\" srcset=\"/images/blog/1x/blazor-3.png 1x, /images/blog/2x/blazor-3@2x.png 2x\" class=\"img-fluid\">\r\n\r\nКомпонент достаточно гибок в настройке. Так как пользователи используют его по-разному. Всё это отражено в дизайне. \r\n\r\nЧтобы отрисовать такой компонент в Figma, задачу разбили на этапе: \r\n\r\n- Изучить решения конкурентов.\r\n- Изучить и собрать файл со скриншотами всех состояний компонента.\r\n- Собрать все под-компоненты.\r\n- Собрать итоговый компонент с разными сценариями использования.\r\n\r\nСобранный в Figma компонент сильно упростил разработку новых фич для грида. Также, упростило создание прототипов для проработки различных сценариев.\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/blazor-4.png\" srcset=\"/images/blog/1x/blazor-4.png 1x, /images/blog/2x/blazor-4@2x.png 2x\" class=\"img-fluid\">\r\n\r\n## Отрисованы новые компоненты\r\n\r\nСоздание новых компонентов включает следующие шаги: \r\n\r\n- Обсудить требования с ПМом.\r\n- Исследовать решения на рынке.\r\n- Утвердить список фич.\r\n- Найти грамотный подход по клавиатурной навигации (поддержка A11Y).\r\n- Отрисовать компонент и все его составляющие.\r\n- Описать компонент в дизайн-токенах.\r\n- Проработать сценарии для демо-стендов.\r\n\r\n### **Пример реализации компонента TreeList**\r\n\r\nКомпонент TreeList — показывает табличные данные в виде древовидной структуры. Пользователи могут сворачивать и разворачивать данные, как им удобно. \r\n\r\nПри подготовке к работе был произведен ресёрч конкурентов, собран список идей и их примерные способы реализации. На каждом этапе приходили синхронизационные встречи с менеджером продукта, разработчиками и другими заинтересованными лицами:\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/blazor-5.png\" srcset=\"/images/blog/1x/blazor-5.png 1x, /images/blog/2x/blazor-5@2x.png 2x\" class=\"img-fluid\">\r\n\r\nСобранный в Figma компонент учитывает все сценарии использовании и состоянии:\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/blazor-6.png\" srcset=\"/images/blog/1x/blazor-6.png 1x, /images/blog/2x/blazor-6@2x.png 2x\" class=\"img-fluid\">\r\n\r\n# **Токенизация**\r\n\r\nКаждый компонент представлен в разных темах. Руками отрисовать или исправлять компонент в каждой теме очень дорого и ресурсозатратно.  \r\n\r\nБыло принято решение использовать дизайн-токены:\r\n\r\n- Чтобы быстро обновлять стили компонента под любую тему.\r\n- Гарантировать единообразие решений.\r\n- Использовать токены как мостик между дизайном и разработкой.\r\n\r\nБыла проведена большая работа над созданием архитектуры и структуры дизайн-токенов:\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/blazor-7.png\" srcset=\"/images/blog/1x/blazor-7.png 1x, /images/blog/2x/blazor-7@2x.png 2x\" class=\"img-fluid\">\r\n\r\nКаждый компонент имеет полное покрытие токенами:\r\n\r\n- color,\r\n- font-weight,\r\n- letter-spacing,\r\n- line-height,\r\n- border-radius,\r\n- border-width,\r\n- font-size,\r\n- text-transform,\r\n- opacity,\r\n- box-shadow,\r\n- size.\r\n\r\nТакой подход позволяет быстро создавать новые темы, просто выставляя новые значения в токенах. Для работы использовался плагин Tokens Studio for Figma. Потому что он позволяет покрыть большое количество типов токенов, в отличии от встроенного Figma Variables.\r\n\r\nВ итоге, любой компонент в Figma легко протестировать с другими стилистическими настройками. А разработчики могут передавать значения токенов из Figma напрямую в свои стили.\r\n\r\n# **Документирование**\r\n\r\nДизайн-система описывает себя тремя основными способами:\r\n\r\n- **Компоненты и сценарии в Figma.** Главная точка входа в дизайн-систему.\r\n- **Дизайн-токены.** Служат мостом между дизайном и кодом.\r\n- **Внутренняя документация.** Содержит договоренности и рекомендации по разным аспектам дизайна: правила наименования, структура токенов, правила отрисовки иконок и так далее. Тут же можно найти результаты ресёрчей относящихся к различным дизайн-задачам.\r\n\r\n# **UI Kit**\r\n\r\nОдним из результатов работы над дизайн-системой стал выпуск UI кита в Figma.\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/blazor-8.png\" srcset=\"/images/blog/1x/blazor-8.png 1x, /images/blog/2x/blazor-8@2x.png 2x\" class=\"img-fluid\">\r\n\r\n# **Результаты**\r\n\r\n- Получилось собрать крепкий каркас дизайн-системы в Figma.\r\n- Сильно улучшилась коммуникация дизайна и продукт менеджеров.\r\n    - Появились еженедельные созвоны с продукт менеджерами.\r\n    - Работа над задачами стала идти быстрее, на всех этапах.\r\n- Работа между дизайном и разработкой стала эффективнее.\r\n    - Макеты стали намного подробнее.\r\n    - Дополнительный слой информации передают дизайн-токены.\r\n- Появилась внутренняя документация.\r\n- Пользователи получили UI kit.', `Summary`='', `FormatterID`='neasden', `OriginalAlias`='blazor', `Uploads`='a:11:{i:0;s:33:\"/images/1x/maxim-petrov-photo.png\";i:1;s:28:\"/images/blog/1x/blazor-2.png\";i:2;s:28:\"/images/blog/1x/blazor-1.png\";i:3;s:15:\"empty-image.jpg\";i:4;s:28:\"/images/blog/1x/blazor-3.png\";i:5;s:28:\"/images/blog/1x/blazor-4.png\";i:6;s:28:\"/images/blog/1x/blazor-5.png\";i:7;s:27:\"/images/blog/1x/blazor6.png\";i:8;s:28:\"/images/blog/1x/blazor-6.png\";i:9;s:28:\"/images/blog/1x/blazor-7.png\";i:10;s:28:\"/images/blog/1x/blazor-8.png\";}', `IsPublished`='1', `IsCommentable`='0', `IsVisible`='1', `IsFavourite`='1', `Stamp`='1711384202', `LastModified`='1711827625', `Offset`='14400', `IsDST`='0', `IsIndexed`='0', `IsExternal`='0', `ReadCount`='5', `SourceID`='0', `SourceNoteID`='0', `SourceNoteURL`='', `SourceNoteJSONURL`='', `SourceNoteData`='' WHERE `SubsetID`=1 AND (`ID`=5);

UPDATE `e2BlogNotes` SET `SubsetID`='1', `Title`='Дизайн-система Blazor', `Text`='DevExpress Blazor — это набор компонентов пользовательского интерфейса. Активно применяется в приложениях на платформе Blazor и предлагает мощный набор компонентов: таблицы данных, календари, планировщики, выпадающие списки, диалоговые окна и многие другие.\r\n\r\nЗадача — переосмыслить и создать дизайн-систему в Figma на основе существующих артефактов и наработок.\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/blazor-1.png\" srcset=\"/images/blog/1x/blazor-1.png 1x, /images/blog/2x/blazor-1@2x.png 2x\" class=\"img-fluid\">\r\n\r\n# Вводные\r\n\r\nBlazor продукт развивался и вместе с этим росло количество и сложность компонентов. Раньше дизайнер рисовал отдельный макет под каждую задачу. Не было системного подхода и единых правил. Со временем этот подход начал приносить проблемы:\r\n- Разработка начала сильно обгонять дизайн.\r\n- Многие решения по краевым сценариям стали приниматься разработчиками.\r\n- Дизайнер тратил много времени на поиск UI и UX багов на поздних этапах.\r\n- Итоговая фича могла сильно отличаться от нарисованного макета.\r\n\r\nОтдельной проблемой была сложность каждого компонента:\r\n- **Разные темы**. В разных темах компонент не только меняет цвет, но и начинает обладать другими визуальными свойствами.\r\n- **Несколько размеров**. Каждый компонент линейки представлен в трёх размерах. \r\n- **Дополнительные стили**. Большой набор стилистических вариантов для компонентов-атомов.\r\n\r\nНапример, одна только кнопка состоит из 150 вариантов компонента:\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/blazor-2.png\" srcset=\"/images/blog/1x/blazor-2.png 1x, /images/blog/2x/blazor-2@2x.png 2x\" class=\"img-fluid\">\r\n\r\nБыло принято решение менять подход — разработать стандарты, правила постановки задач и проектирования.\r\n\r\n# Задачи\r\n\r\nПеред новой дизайн-системой поставили следующие задачи:\r\n\r\n1. **Оптимизация работы команды на этапах дизайна и разработки.** \r\nРаньше, эти процессы были довольно хаотичны. Дизайнер брал в задачу в работу и изображал примерную реализацию компонента. Многие краевые сценарии не учитывались. Какие-то решения в процессе разработки менялись на ходу. В итоге, разработка затягивалась, фичи резались и итоговый результат сильно отличался от исходной картинки.\r\n2. **Автоматизация и консистентность**. \r\nБольшой размер и сложность компонентов сильно затрудняли внесение любых изменений в дизайн. Даже небольшие стилистические изменения в базовом компоненте, типа кнопки, приводили к огромному количеству работы со стороны дизайнера. Так как нужно было учесть разные темы, размеры и стили.\r\n3. **Консистентность цвета**. \r\nОтдельно стоит отметить проблему с цветом. Многие цвета компонентов в коде рассчитывались с помощью миксинов. Это приводило ко многим проблемам, в том числе, проблемам с контрастностью.\r\n4. **Доступность.**\r\nПользователи продукта стали всё чаще интересоваться, насколько компоненты доступны для разных категорий пользователей. Нужно было сформировать подход, когда дизайнер на этапе проработки компонента учитывает все WCAG 2.2 AA требования.\r\n5. **Централизация знаний.**\r\nМногие знания о тех или иных дизайн-решениях нигде не фиксировались. Единственным источником знания были участвующие в работе на фичей члены команды. Нужно было сформировать систему документации.\r\n6. **UI Kit.**\r\nВсё чаще стали приходить запросы на UI Kit от пользователей. К тому же, это уже давно было у конкурентов.\r\n\r\n# Результат\r\n\r\n## Компоненты в Figma переработаны с нуля\r\n\r\nДизайн компонентов теперь полностью повторяет функционал кодовой реализации. Учтены все редкие сценарии и краевые состояния. Перед отрисовкой каждого компоненты изучались спецификация+API компонента и все сценарии его использования.\r\n\r\n### **Пример реализации компонента Grid**\r\n\r\nКомпонент Grid — один из самых больших и популярных в линейке Blazor. Представляет собой решение для отображения данных в табличном формате. Включает множество функций для управления данными. Например: фильтрация, группировка, пагинация, сортировка и многое другое.\r\n\r\nОсновную сложность представляет его размер:\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/blazor-3.png\" srcset=\"/images/blog/1x/blazor-3.png 1x, /images/blog/2x/blazor-3@2x.png 2x\" class=\"img-fluid\">\r\n\r\nКомпонент достаточно гибок в настройке. Так как пользователи используют его по-разному. Всё это отражено в дизайне. \r\n\r\nЧтобы отрисовать такой компонент в Figma, задачу разбили на этапе: \r\n\r\n- Изучить решения конкурентов.\r\n- Изучить и собрать файл со скриншотами всех состояний компонента.\r\n- Собрать все под-компоненты.\r\n- Собрать итоговый компонент с разными сценариями использования.\r\n\r\nСобранный в Figma компонент сильно упростил разработку новых фич для грида. Также, упростило создание прототипов для проработки различных сценариев.\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/blazor-4.png\" srcset=\"/images/blog/1x/blazor-4.png 1x, /images/blog/2x/blazor-4@2x.png 2x\" class=\"img-fluid\">\r\n\r\n## Отрисованы новые компоненты\r\n\r\nСоздание новых компонентов включает следующие шаги: \r\n\r\n- Обсудить требования с ПМом.\r\n- Исследовать решения на рынке.\r\n- Утвердить список фич.\r\n- Найти грамотный подход по клавиатурной навигации (поддержка A11Y).\r\n- Отрисовать компонент и все его составляющие.\r\n- Описать компонент в дизайн-токенах.\r\n- Проработать сценарии для демо-стендов.\r\n\r\n### **Пример реализации компонента TreeList**\r\n\r\nКомпонент TreeList — показывает табличные данные в виде древовидной структуры. Пользователи могут сворачивать и разворачивать данные, как им удобно. \r\n\r\nПри подготовке к работе был произведен ресёрч конкурентов, собран список идей и их примерные способы реализации. На каждом этапе приходили синхронизационные встречи с менеджером продукта, разработчиками и другими заинтересованными лицами:\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/blazor-5.png\" srcset=\"/images/blog/1x/blazor-5.png 1x, /images/blog/2x/blazor-5@2x.png 2x\" class=\"img-fluid\">\r\n\r\nСобранный в Figma компонент учитывает все сценарии использовании и состоянии:\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/blazor-6.png\" srcset=\"/images/blog/1x/blazor-6.png 1x, /images/blog/2x/blazor-6@2x.png 2x\" class=\"img-fluid\">\r\n\r\n# **Токенизация**\r\n\r\nКаждый компонент представлен в разных темах. Руками отрисовать или исправлять компонент в каждой теме очень дорого и ресурсозатратно.  \r\n\r\nБыло принято решение использовать дизайн-токены:\r\n\r\n- Чтобы быстро обновлять стили компонента под любую тему.\r\n- Гарантировать единообразие решений.\r\n- Использовать токены как мостик между дизайном и разработкой.\r\n\r\nБыла проведена большая работа над созданием архитектуры и структуры дизайн-токенов:\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/blazor-7.png\" srcset=\"/images/blog/1x/blazor-7.png 1x, /images/blog/2x/blazor-7@2x.png 2x\" class=\"img-fluid\">\r\n\r\nКаждый компонент имеет полное покрытие токенами:\r\n\r\n- color,\r\n- font-weight,\r\n- letter-spacing,\r\n- line-height,\r\n- border-radius,\r\n- border-width,\r\n- font-size,\r\n- text-transform,\r\n- opacity,\r\n- box-shadow,\r\n- size.\r\n\r\nТакой подход позволяет быстро создавать новые темы, просто выставляя новые значения в токенах. Для работы использовался плагин Tokens Studio for Figma. Потому что он позволяет покрыть большое количество типов токенов, в отличии от встроенного Figma Variables.\r\n\r\nВ итоге, любой компонент в Figma легко протестировать с другими стилистическими настройками. А разработчики могут передавать значения токенов из Figma напрямую в свои стили.\r\n\r\n# **Документирование**\r\n\r\nДизайн-система описывает себя тремя основными способами:\r\n\r\n- **Компоненты и сценарии в Figma.** Главная точка входа в дизайн-систему.\r\n- **Дизайн-токены.** Служат мостом между дизайном и кодом.\r\n- **Внутренняя документация.** Содержит договоренности и рекомендации по разным аспектам дизайна: правила наименования, структура токенов, правила отрисовки иконок и так далее. Тут же можно найти результаты ресёрчей относящихся к различным дизайн-задачам.\r\n\r\n# **UI Kit**\r\n\r\nОдним из результатов работы над дизайн-системой стал выпуск UI кита в Figma.\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/blazor-8.png\" srcset=\"/images/blog/1x/blazor-8.png 1x, /images/blog/2x/blazor-8@2x.png 2x\" class=\"img-fluid\">\r\n\r\n# **Результаты**\r\n\r\n- Получилось собрать крепкий каркас дизайн-системы в Figma.\r\n- Сильно улучшилась коммуникация дизайна и продукт менеджеров.\r\n    - Появились еженедельные созвоны с продукт менеджерами.\r\n    - Работа над задачами стала идти быстрее, на всех этапах.\r\n- Работа между дизайном и разработкой стала эффективнее.\r\n    - Макеты стали намного подробнее.\r\n    - Дополнительный слой информации передают дизайн-токены.\r\n- Появилась внутренняя документация.\r\n- Пользователи получили UI kit.', `Summary`='', `FormatterID`='neasden', `OriginalAlias`='blazor', `Uploads`='a:11:{i:0;s:33:\"/images/1x/maxim-petrov-photo.png\";i:1;s:28:\"/images/blog/1x/blazor-2.png\";i:2;s:28:\"/images/blog/1x/blazor-1.png\";i:3;s:15:\"empty-image.jpg\";i:4;s:28:\"/images/blog/1x/blazor-3.png\";i:5;s:28:\"/images/blog/1x/blazor-4.png\";i:6;s:28:\"/images/blog/1x/blazor-5.png\";i:7;s:27:\"/images/blog/1x/blazor6.png\";i:8;s:28:\"/images/blog/1x/blazor-6.png\";i:9;s:28:\"/images/blog/1x/blazor-7.png\";i:10;s:28:\"/images/blog/1x/blazor-8.png\";}', `IsPublished`='1', `IsCommentable`='0', `IsVisible`='1', `IsFavourite`='1', `Stamp`='1711384202', `LastModified`='1711827625', `Offset`='14400', `IsDST`='0', `IsIndexed`='1', `IsExternal`='0', `ReadCount`='5', `SourceID`='0', `SourceNoteID`='0', `SourceNoteURL`='', `SourceNoteJSONURL`='', `SourceNoteData`='' WHERE `SubsetID`=1 AND (`ID`=5);

UPDATE `e2BlogAliases` SET `EntityType`='n', `EntityID`='5', `Alias`='blazor', `Stamp`='1711827676' WHERE `SubsetID`=1 AND (`ID`=6);

UPDATE `e2BlogNotes` SET `SubsetID`='1', `Title`='Дизайн-система Blazor', `Text`='DevExpress Blazor — это набор компонентов пользовательского интерфейса. Активно применяется в приложениях на платформе Blazor и предлагает мощный набор компонентов: таблицы данных, календари, планировщики, выпадающие списки, диалоговые окна и многие другие.\r\n\r\nЗадача — переосмыслить и создать дизайн-систему в Figma на основе существующих артефактов и наработок.\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/blazor-1.png\" srcset=\"/images/blog/1x/blazor-1.png 1x, /images/blog/2x/blazor-1@2x.png 2x\" class=\"img-fluid\">\r\n\r\n# Вводные\r\n\r\nBlazor продукт развивался и вместе с этим росло количество и сложность компонентов. Раньше дизайнер рисовал отдельный макет под каждую задачу. Не было системного подхода и единых правил. Со временем этот подход начал приносить проблемы:\r\n- Разработка начала сильно обгонять дизайн.\r\n- Многие решения по краевым сценариям стали приниматься разработчиками.\r\n- Дизайнер тратил много времени на поиск UI и UX багов на поздних этапах.\r\n- Итоговая фича могла сильно отличаться от нарисованного макета.\r\n\r\nОтдельной проблемой была сложность каждого компонента:\r\n- **Разные темы**. В разных темах компонент не только меняет цвет, но и начинает обладать другими визуальными свойствами.\r\n- **Несколько размеров**. Каждый компонент линейки представлен в трёх размерах. \r\n- **Дополнительные стили**. Большой набор стилистических вариантов для компонентов-атомов.\r\n\r\nНапример, одна только кнопка состоит из 150 вариантов компонента:\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/blazor-2.png\" srcset=\"/images/blog/1x/blazor-2.png 1x, /images/blog/2x/blazor-2@2x.png 2x\" class=\"img-fluid\">\r\n\r\nБыло принято решение менять подход — разработать стандарты, правила постановки задач и проектирования.\r\n\r\n# Задачи\r\n\r\nПеред новой дизайн-системой поставили следующие задачи:\r\n\r\n1. **Оптимизация работы команды на этапах дизайна и разработки.** \r\nРаньше, эти процессы были довольно хаотичны. Дизайнер брал в задачу в работу и изображал примерную реализацию компонента. Многие краевые сценарии не учитывались. Какие-то решения в процессе разработки менялись на ходу. В итоге, разработка затягивалась, фичи резались и итоговый результат сильно отличался от исходной картинки.\r\n2. **Автоматизация и консистентность**. \r\nБольшой размер и сложность компонентов сильно затрудняли внесение любых изменений в дизайн. Даже небольшие стилистические изменения в базовом компоненте, типа кнопки, приводили к огромному количеству работы со стороны дизайнера. Так как нужно было учесть разные темы, размеры и стили.\r\n3. **Консистентность цвета**. \r\nОтдельно стоит отметить проблему с цветом. Многие цвета компонентов в коде рассчитывались с помощью миксинов. Это приводило ко многим проблемам, в том числе, проблемам с контрастностью.\r\n4. **Доступность.**\r\nПользователи продукта стали всё чаще интересоваться, насколько компоненты доступны для разных категорий пользователей. Нужно было сформировать подход, когда дизайнер на этапе проработки компонента учитывает все WCAG 2.2 AA требования.\r\n5. **Централизация знаний.**\r\nМногие знания о тех или иных дизайн-решениях нигде не фиксировались. Единственным источником знания были участвующие в работе на фичей члены команды. Нужно было сформировать систему документации.\r\n6. **UI Kit.**\r\nВсё чаще стали приходить запросы на UI Kit от пользователей. К тому же, это уже давно было у конкурентов.\r\n\r\n# Результат\r\n\r\n## Компоненты в Figma переработаны с нуля\r\n\r\nДизайн компонентов теперь полностью повторяет функционал кодовой реализации. Учтены все редкие сценарии и краевые состояния. Перед отрисовкой каждого компоненты изучались спецификация+API компонента и все сценарии его использования.\r\n\r\n### **Пример реализации компонента Grid**\r\n\r\nКомпонент Grid — один из самых больших и популярных в линейке Blazor. Представляет собой решение для отображения данных в табличном формате. Включает множество функций для управления данными. Например: фильтрация, группировка, пагинация, сортировка и многое другое.\r\n\r\nОсновную сложность представляет его размер:\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/blazor-3.png\" srcset=\"/images/blog/1x/blazor-3.png 1x, /images/blog/2x/blazor-3@2x.png 2x\" class=\"img-fluid\">\r\n\r\nКомпонент достаточно гибок в настройке. Так как пользователи используют его по-разному. Всё это отражено в дизайне. \r\n\r\nЧтобы отрисовать такой компонент в Figma, задачу разбили на этапе: \r\n\r\n- Изучить решения конкурентов.\r\n- Изучить и собрать файл со скриншотами всех состояний компонента.\r\n- Собрать все под-компоненты.\r\n- Собрать итоговый компонент с разными сценариями использования.\r\n\r\nСобранный в Figma компонент сильно упростил разработку новых фич для грида. Также, упростило создание прототипов для проработки различных сценариев.\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/blazor-4.png\" srcset=\"/images/blog/1x/blazor-4.png 1x, /images/blog/2x/blazor-4@2x.png 2x\" class=\"img-fluid\">\r\n\r\n## Отрисованы новые компоненты\r\n\r\nСоздание новых компонентов включает следующие шаги: \r\n\r\n- Обсудить требования с ПМом.\r\n- Исследовать решения на рынке.\r\n- Утвердить список фич.\r\n- Найти грамотный подход по клавиатурной навигации (поддержка A11Y).\r\n- Отрисовать компонент и все его составляющие.\r\n- Описать компонент в дизайн-токенах.\r\n- Проработать сценарии для демо-стендов.\r\n\r\n### **Пример реализации компонента TreeList**\r\n\r\nКомпонент TreeList — показывает табличные данные в виде древовидной структуры. Пользователи могут сворачивать и разворачивать данные, как им удобно. \r\n\r\nПри подготовке к работе был произведен ресёрч конкурентов, собран список идей и их примерные способы реализации. На каждом этапе приходили синхронизационные встречи с менеджером продукта, разработчиками и другими заинтересованными лицами:\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/blazor-5.png\" srcset=\"/images/blog/1x/blazor-5.png 1x, /images/blog/2x/blazor-5@2x.png 2x\" class=\"img-fluid\">\r\n\r\nСобранный в Figma компонент учитывает все сценарии использовании и состоянии:\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/blazor-6.png\" srcset=\"/images/blog/1x/blazor-6.png 1x, /images/blog/2x/blazor-6@2x.png 2x\" class=\"img-fluid\">\r\n\r\n# **Токенизация**\r\n\r\nКаждый компонент представлен в разных темах. Руками отрисовать или исправлять компонент в каждой теме очень дорого и ресурсозатратно.  \r\n\r\nБыло принято решение использовать дизайн-токены:\r\n\r\n- Чтобы быстро обновлять стили компонента под любую тему.\r\n- Гарантировать единообразие решений.\r\n- Использовать токены как мостик между дизайном и разработкой.\r\n\r\nБыла проведена большая работа над созданием архитектуры и структуры дизайн-токенов:\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/blazor-7.png\" srcset=\"/images/blog/1x/blazor-7.png 1x, /images/blog/2x/blazor-7@2x.png 2x\" class=\"img-fluid\">\r\n\r\nКаждый компонент имеет полное покрытие токенами:\r\n\r\n- color,\r\n- font-weight,\r\n- letter-spacing,\r\n- line-height,\r\n- border-radius,\r\n- border-width,\r\n- font-size,\r\n- text-transform,\r\n- opacity,\r\n- box-shadow,\r\n- size.\r\n\r\nТакой подход позволяет быстро создавать новые темы, просто выставляя новые значения в токенах. Для работы использовался плагин Tokens Studio for Figma. Потому что он позволяет покрыть большое количество типов токенов, в отличии от встроенного Figma Variables.\r\n\r\nВ итоге, любой компонент в Figma легко протестировать с другими стилистическими настройками. А разработчики могут передавать значения токенов из Figma напрямую в свои стили.\r\n\r\n# **Документирование**\r\n\r\nДизайн-система описывает себя тремя основными способами:\r\n\r\n- **Компоненты и сценарии в Figma.** Главная точка входа в дизайн-систему.\r\n- **Дизайн-токены.** Служат мостом между дизайном и кодом.\r\n- **Внутренняя документация.** Содержит договоренности и рекомендации по разным аспектам дизайна: правила наименования, структура токенов, правила отрисовки иконок и так далее. Тут же можно найти результаты ресёрчей относящихся к различным дизайн-задачам.\r\n\r\n# **UI Kit**\r\n\r\nОдним из результатов работы над дизайн-системой стал выпуск UI кита в Figma.\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/blazor-8.png\" srcset=\"/images/blog/1x/blazor-8.png 1x, /images/blog/2x/blazor-8@2x.png 2x\" class=\"img-fluid\">\r\n\r\n# **Результаты**\r\n\r\n- Получилось собрать крепкий каркас дизайн-системы в Figma.\r\n- Сильно улучшилась коммуникация дизайна и продукт-менеджеров.\r\n    - Появились еженедельные созвоны с продукт-менеджерами.\r\n    - Работа над задачами стала идти быстрее, на всех этапах.\r\n- Работа между дизайном и разработкой стала эффективнее.\r\n    - Макеты стали намного подробнее.\r\n    - Дополнительный слой информации передают дизайн-токены.\r\n- Появилась внутренняя документация.\r\n- Пользователи получили UI kit.', `Summary`='', `FormatterID`='neasden', `OriginalAlias`='blazor', `Uploads`='a:11:{i:0;s:33:\"/images/1x/maxim-petrov-photo.png\";i:1;s:28:\"/images/blog/1x/blazor-2.png\";i:2;s:28:\"/images/blog/1x/blazor-1.png\";i:3;s:15:\"empty-image.jpg\";i:4;s:28:\"/images/blog/1x/blazor-3.png\";i:5;s:28:\"/images/blog/1x/blazor-4.png\";i:6;s:28:\"/images/blog/1x/blazor-5.png\";i:7;s:27:\"/images/blog/1x/blazor6.png\";i:8;s:28:\"/images/blog/1x/blazor-6.png\";i:9;s:28:\"/images/blog/1x/blazor-7.png\";i:10;s:28:\"/images/blog/1x/blazor-8.png\";}', `IsPublished`='1', `IsCommentable`='0', `IsVisible`='1', `IsFavourite`='1', `Stamp`='1711384202', `LastModified`='1711827676', `Offset`='14400', `IsDST`='0', `IsIndexed`='0', `IsExternal`='0', `ReadCount`='5', `SourceID`='0', `SourceNoteID`='0', `SourceNoteURL`='', `SourceNoteJSONURL`='', `SourceNoteData`='' WHERE `SubsetID`=1 AND (`ID`=5);

UPDATE `e2BlogNotes` SET `SubsetID`='1', `Title`='Дизайн-система Blazor', `Text`='DevExpress Blazor — это набор компонентов пользовательского интерфейса. Активно применяется в приложениях на платформе Blazor и предлагает мощный набор компонентов: таблицы данных, календари, планировщики, выпадающие списки, диалоговые окна и многие другие.\r\n\r\nЗадача — переосмыслить и создать дизайн-систему в Figma на основе существующих артефактов и наработок.\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/blazor-1.png\" srcset=\"/images/blog/1x/blazor-1.png 1x, /images/blog/2x/blazor-1@2x.png 2x\" class=\"img-fluid\">\r\n\r\n# Вводные\r\n\r\nBlazor продукт развивался и вместе с этим росло количество и сложность компонентов. Раньше дизайнер рисовал отдельный макет под каждую задачу. Не было системного подхода и единых правил. Со временем этот подход начал приносить проблемы:\r\n- Разработка начала сильно обгонять дизайн.\r\n- Многие решения по краевым сценариям стали приниматься разработчиками.\r\n- Дизайнер тратил много времени на поиск UI и UX багов на поздних этапах.\r\n- Итоговая фича могла сильно отличаться от нарисованного макета.\r\n\r\nОтдельной проблемой была сложность каждого компонента:\r\n- **Разные темы**. В разных темах компонент не только меняет цвет, но и начинает обладать другими визуальными свойствами.\r\n- **Несколько размеров**. Каждый компонент линейки представлен в трёх размерах. \r\n- **Дополнительные стили**. Большой набор стилистических вариантов для компонентов-атомов.\r\n\r\nНапример, одна только кнопка состоит из 150 вариантов компонента:\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/blazor-2.png\" srcset=\"/images/blog/1x/blazor-2.png 1x, /images/blog/2x/blazor-2@2x.png 2x\" class=\"img-fluid\">\r\n\r\nБыло принято решение менять подход — разработать стандарты, правила постановки задач и проектирования.\r\n\r\n# Задачи\r\n\r\nПеред новой дизайн-системой поставили следующие задачи:\r\n\r\n1. **Оптимизация работы команды на этапах дизайна и разработки.** \r\nРаньше, эти процессы были довольно хаотичны. Дизайнер брал в задачу в работу и изображал примерную реализацию компонента. Многие краевые сценарии не учитывались. Какие-то решения в процессе разработки менялись на ходу. В итоге, разработка затягивалась, фичи резались и итоговый результат сильно отличался от исходной картинки.\r\n2. **Автоматизация и консистентность**. \r\nБольшой размер и сложность компонентов сильно затрудняли внесение любых изменений в дизайн. Даже небольшие стилистические изменения в базовом компоненте, типа кнопки, приводили к огромному количеству работы со стороны дизайнера. Так как нужно было учесть разные темы, размеры и стили.\r\n3. **Консистентность цвета**. \r\nОтдельно стоит отметить проблему с цветом. Многие цвета компонентов в коде рассчитывались с помощью миксинов. Это приводило ко многим проблемам, в том числе, проблемам с контрастностью.\r\n4. **Доступность.**\r\nПользователи продукта стали всё чаще интересоваться, насколько компоненты доступны для разных категорий пользователей. Нужно было сформировать подход, когда дизайнер на этапе проработки компонента учитывает все WCAG 2.2 AA требования.\r\n5. **Централизация знаний.**\r\nМногие знания о тех или иных дизайн-решениях нигде не фиксировались. Единственным источником знания были участвующие в работе на фичей члены команды. Нужно было сформировать систему документации.\r\n6. **UI Kit.**\r\nВсё чаще стали приходить запросы на UI Kit от пользователей. К тому же, это уже давно было у конкурентов.\r\n\r\n# Результат\r\n\r\n## Компоненты в Figma переработаны с нуля\r\n\r\nДизайн компонентов теперь полностью повторяет функционал кодовой реализации. Учтены все редкие сценарии и краевые состояния. Перед отрисовкой каждого компоненты изучались спецификация+API компонента и все сценарии его использования.\r\n\r\n### **Пример реализации компонента Grid**\r\n\r\nКомпонент Grid — один из самых больших и популярных в линейке Blazor. Представляет собой решение для отображения данных в табличном формате. Включает множество функций для управления данными. Например: фильтрация, группировка, пагинация, сортировка и многое другое.\r\n\r\nОсновную сложность представляет его размер:\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/blazor-3.png\" srcset=\"/images/blog/1x/blazor-3.png 1x, /images/blog/2x/blazor-3@2x.png 2x\" class=\"img-fluid\">\r\n\r\nКомпонент достаточно гибок в настройке. Так как пользователи используют его по-разному. Всё это отражено в дизайне. \r\n\r\nЧтобы отрисовать такой компонент в Figma, задачу разбили на этапе: \r\n\r\n- Изучить решения конкурентов.\r\n- Изучить и собрать файл со скриншотами всех состояний компонента.\r\n- Собрать все под-компоненты.\r\n- Собрать итоговый компонент с разными сценариями использования.\r\n\r\nСобранный в Figma компонент сильно упростил разработку новых фич для грида. Также, упростило создание прототипов для проработки различных сценариев.\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/blazor-4.png\" srcset=\"/images/blog/1x/blazor-4.png 1x, /images/blog/2x/blazor-4@2x.png 2x\" class=\"img-fluid\">\r\n\r\n## Отрисованы новые компоненты\r\n\r\nСоздание новых компонентов включает следующие шаги: \r\n\r\n- Обсудить требования с ПМом.\r\n- Исследовать решения на рынке.\r\n- Утвердить список фич.\r\n- Найти грамотный подход по клавиатурной навигации (поддержка A11Y).\r\n- Отрисовать компонент и все его составляющие.\r\n- Описать компонент в дизайн-токенах.\r\n- Проработать сценарии для демо-стендов.\r\n\r\n### **Пример реализации компонента TreeList**\r\n\r\nКомпонент TreeList — показывает табличные данные в виде древовидной структуры. Пользователи могут сворачивать и разворачивать данные, как им удобно. \r\n\r\nПри подготовке к работе был произведен ресёрч конкурентов, собран список идей и их примерные способы реализации. На каждом этапе приходили синхронизационные встречи с менеджером продукта, разработчиками и другими заинтересованными лицами:\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/blazor-5.png\" srcset=\"/images/blog/1x/blazor-5.png 1x, /images/blog/2x/blazor-5@2x.png 2x\" class=\"img-fluid\">\r\n\r\nСобранный в Figma компонент учитывает все сценарии использовании и состоянии:\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/blazor-6.png\" srcset=\"/images/blog/1x/blazor-6.png 1x, /images/blog/2x/blazor-6@2x.png 2x\" class=\"img-fluid\">\r\n\r\n# **Токенизация**\r\n\r\nКаждый компонент представлен в разных темах. Руками отрисовать или исправлять компонент в каждой теме очень дорого и ресурсозатратно.  \r\n\r\nБыло принято решение использовать дизайн-токены:\r\n\r\n- Чтобы быстро обновлять стили компонента под любую тему.\r\n- Гарантировать единообразие решений.\r\n- Использовать токены как мостик между дизайном и разработкой.\r\n\r\nБыла проведена большая работа над созданием архитектуры и структуры дизайн-токенов:\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/blazor-7.png\" srcset=\"/images/blog/1x/blazor-7.png 1x, /images/blog/2x/blazor-7@2x.png 2x\" class=\"img-fluid\">\r\n\r\nКаждый компонент имеет полное покрытие токенами:\r\n\r\n- color,\r\n- font-weight,\r\n- letter-spacing,\r\n- line-height,\r\n- border-radius,\r\n- border-width,\r\n- font-size,\r\n- text-transform,\r\n- opacity,\r\n- box-shadow,\r\n- size.\r\n\r\nТакой подход позволяет быстро создавать новые темы, просто выставляя новые значения в токенах. Для работы использовался плагин Tokens Studio for Figma. Потому что он позволяет покрыть большое количество типов токенов, в отличии от встроенного Figma Variables.\r\n\r\nВ итоге, любой компонент в Figma легко протестировать с другими стилистическими настройками. А разработчики могут передавать значения токенов из Figma напрямую в свои стили.\r\n\r\n# **Документирование**\r\n\r\nДизайн-система описывает себя тремя основными способами:\r\n\r\n- **Компоненты и сценарии в Figma.** Главная точка входа в дизайн-систему.\r\n- **Дизайн-токены.** Служат мостом между дизайном и кодом.\r\n- **Внутренняя документация.** Содержит договоренности и рекомендации по разным аспектам дизайна: правила наименования, структура токенов, правила отрисовки иконок и так далее. Тут же можно найти результаты ресёрчей относящихся к различным дизайн-задачам.\r\n\r\n# **UI Kit**\r\n\r\nОдним из результатов работы над дизайн-системой стал выпуск UI кита в Figma.\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/blazor-8.png\" srcset=\"/images/blog/1x/blazor-8.png 1x, /images/blog/2x/blazor-8@2x.png 2x\" class=\"img-fluid\">\r\n\r\n# **Результаты**\r\n\r\n- Получилось собрать крепкий каркас дизайн-системы в Figma.\r\n- Сильно улучшилась коммуникация дизайна и продукт-менеджеров.\r\n    - Появились еженедельные созвоны с продукт-менеджерами.\r\n    - Работа над задачами стала идти быстрее, на всех этапах.\r\n- Работа между дизайном и разработкой стала эффективнее.\r\n    - Макеты стали намного подробнее.\r\n    - Дополнительный слой информации передают дизайн-токены.\r\n- Появилась внутренняя документация.\r\n- Пользователи получили UI kit.', `Summary`='', `FormatterID`='neasden', `OriginalAlias`='blazor', `Uploads`='a:11:{i:0;s:33:\"/images/1x/maxim-petrov-photo.png\";i:1;s:28:\"/images/blog/1x/blazor-2.png\";i:2;s:28:\"/images/blog/1x/blazor-1.png\";i:3;s:15:\"empty-image.jpg\";i:4;s:28:\"/images/blog/1x/blazor-3.png\";i:5;s:28:\"/images/blog/1x/blazor-4.png\";i:6;s:28:\"/images/blog/1x/blazor-5.png\";i:7;s:27:\"/images/blog/1x/blazor6.png\";i:8;s:28:\"/images/blog/1x/blazor-6.png\";i:9;s:28:\"/images/blog/1x/blazor-7.png\";i:10;s:28:\"/images/blog/1x/blazor-8.png\";}', `IsPublished`='1', `IsCommentable`='0', `IsVisible`='1', `IsFavourite`='1', `Stamp`='1711384202', `LastModified`='1711827676', `Offset`='14400', `IsDST`='0', `IsIndexed`='1', `IsExternal`='0', `ReadCount`='5', `SourceID`='0', `SourceNoteID`='0', `SourceNoteURL`='', `SourceNoteJSONURL`='', `SourceNoteData`='' WHERE `SubsetID`=1 AND (`ID`=5);

UPDATE `e2BlogAliases` SET `EntityType`='n', `EntityID`='1', `Alias`='support-center', `Stamp`='1711827769' WHERE `SubsetID`=1 AND (`ID`=1);

UPDATE `e2BlogNotes` SET `SubsetID`='1', `Title`='Support Center', `Text`='Система поддержки пользователей. Включает различные информационные ресурсы: вопросы от пользователей, статьи в базе знаний и истории версий.\r\n\r\nЕжедневно в Support Center создаются сотни новых вопросов и на них отвечают десятки саппорт-инженеров. За годы работы старый интерфейс устарел как внешне, так и с точки зрения удобства и функциональности. Пришла задача полностью переработать платформу, с учётом всех бизнес-требований.\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/sc-1.png\" srcset=\"/images/blog/1x/sc-1.png 1x, /images/blog/2x/sc-1@2x.png 2x\" class=\"img-fluid\">\r\n\r\n# Вводная\r\n\r\nСистема состоит из трёх основных порталов:\r\n\r\n- Клиентский портал\r\n- Внутренний портал для сотрудников\r\n- Админ-панель\r\n\r\nКаждым порталом пользуется свой сегмент пользователей. Клиенты компании ожидают простой и понятный интерфейс. В то время как саппорт-инженеры привыкли к определенным сценариям, которые тоже нужно было сохранить.\r\n\r\n# Клиентский портал\r\n\r\nНа этот ресурс были задействованы основные силы. Клиентский портал даёт возможность клиентам задавать вопросы технического характера и получать на них ответы. \r\n\r\nПеред редизайном ставились следующие задачи:\r\n\r\n- **Снизить нагрузку на саппорт-инженеров.** Помочь пользователям находить ответы самостоятельно, если на вопрос уже отвечали ранее или решение описано в документации.\r\n- **Улучшить UX.** Накопился список проблем, которые нужно было решать:\r\n    - **Пользователи выбирают неверный продукт при создании вопроса.** DevExpress разрабатывает и поддерживает десятки продуктов. У каждого продукта могут быть разные платформы и версии. Иногда важно знать, какая ОС установлена у пользователя, каким IDE он пользуется. Нужно было сделать так, чтобы у пользователя не возникали проблемы при выборе нужных значений. Помочь ему на этом пути.\r\n    - **Возникают проблемы при форматировании текста.** Пользователи приходят в поддержку с техническими проблемами. Описание проблемы содержит куски кода или целые архивы с проектами. В старой версии сайта пользователи путались в текстовом редакторе и отправляли не отформатированные куски куда, которые сливались с обычным текстом. Также, пользователи не всегда понимали как аттачить файлы. Всё это приводило к дополнительной нагрузке на саппорт-инженеров.\r\n    - **Пользователи не замечают уведомления об ответах в их тикете.** Проблема касалась как веб-интерфейса, так и уведомлений приходящих пользователю на почту. Пользователи либо не замечали уведомления, либо не понимали к чему они относятся, либо ранее отключали уведомления и забывали об этом. В связи с этим, среднее время на решение таких тикетов значительно увеличивалось.\r\n    - **Клиенты из одной и той же компании не видят вопросы друг друга.** Большинство клиентов предпочитает оставлять свои вопросы приватно. Чтобы их могли видеть только саппорт-инженеры. Из-за этого возникала проблема, что вопросы становились приватными полностью и их не могли видеть даже сотрудники одной и той же компании с разных аккаунтов.\r\n    - **Неудобные фильтры.** Пользователи, что на странице со списком публичных тикетов невозможно ничего найти. Фильтров мало, а то, что есть не всегда работает очевидным образом.\r\n- **Переосмыслить встроенный инструмент “Version History”.**\r\n- **Улучшить аналитику.**\r\n- **Освежить внешний вид.**\r\n\r\n## Подготовка к работе\r\n\r\nПеред началом работы над редизайном была проведена подготовительная работы. Подготовлен общий план работы и проведены встречи со всеми заинтересованными лицами. Был подготовлен итоговый бриф проекта. \r\n\r\nЧасть работ, которые были проведены на этом этапе:\r\n\r\n- **Анализ текущего дизайна.** UX-тестирование текущего сайта, поиск проблем.\r\n- **Ресёрч конкурентов.** Изучение как прямых конкурентов, так и решений крупных платформ. Например, Zendesk, Freshdesk, Zoho Desk.\r\n- **Сбор и анализ существующего фидбека.** За годы работы, накопилось большое количество тикетов, комментарием и другой обратной связи касаемо работы портала. Была проведена большая работу по сбору всей это информации в один документ, её анализу и приоритизации.\r\n- **Сбор информации от саппорт-инженеров.** Инженеры поддержки активнее всего общаются с пользователями и знают детали и проблемы, которые могут быть неизвестны и неочевидны другим членам команды.\r\n- **Изучение текущих данных аналитики и список того, что хотим собирать ещё в новом дизайне.** Для работы с данными использовались:  Google Analytics (+Google Tag Manager), Matomo, внутренние инструменты.\r\n- **Сбор требований от заказчиков и всех заинтересованных лиц.**\r\n- **Подготовка брифа.** Описание проблем, целей и задач. Развёрнутый ответ на вопрос, что мы будем считать успешным редизайном.\r\n\r\n## Процесс\r\n\r\nРабота над сайтом строилась 2-4 недельными спринтами. В конце каждого спринта проводились синхронизационные встречи с заказчиками. \r\n\r\nВ начале работы над дизайном была согласована общая концепция. Отрисованы низко детализированные прототипы с решением основных UX проблем. Найден общий подход к внешнему виду.  \r\n\r\nЧтобы работа над новым дизайном была эффективной и обратная связь поступала как можно быстрее был принят рад мер:\r\n\r\n- Продукт менеджер продукта показывал прототипы и просто картинки небольшой выборке самых активных и заинтересованных пользователей саппорт-центра. Благодаря этому получалось очень быстро собрать много полезной информации, которая помогала намного быстрее замечать точки роста.\r\n- Тесное общение с разработчиками. Так дизайн значительно обгонял разработку, нужно было сразу учитывать технические ограничения. Для этого проводились постоянные встречи между разработчикам, заказчиками и дизайнером. Так мы оценивали техническую сложность каждой фичи и на основе этого принимали решение, будем мы брать её в работу или нет.\r\n- На этапе, когда появилась первая работающая версия сайта, его стали тестировать сотрудники. В первую очередь, к тестированию подключались саппорт-инженеры. На этом этапе было собрано большое количество фидбека как по техническим багам, визуальным багам, так и просто по неудачным UX-решениям.\r\n- На следующем этапе снова к фидбеку снова были подключены активные клиенты. Которые были готовы дать развёрнутый фидбек.\r\n- На одном из финальных этапов сайт стал доступен для всех пользователей, но в виде бета-версии. При этом, каждый пользователь мог вернуться к старой версии сайта. Со временем, пользователей вернувшихся на старый сайт становилось меньше. Также, мы старались собирать фидбек от таких пользователей. Чтобы понять, почему они вернулись на старую версию сайта.\r\n- К новой версии сайта была прикручена продвинутая аналитика.\r\n\r\n## Примеры реализации\r\n\r\n### Релевантные подсказки при создании тикета\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/sc-2.png\" srcset=\"/images/blog/1x/sc-2.png 1x, /images/blog/2x/sc-2@2x.png 2x\" class=\"img-fluid\">\r\n\r\n### Упрощена навигация по дискуссии с ветвистой иерархией\r\n\r\n### Обновлён текстовый редактор\r\n\r\n### Обновлены инструменты фильтра на странице со списком тикетов\r\n\r\n### Обновлены почтовые уведомлению, улучшения подписка на уведомления на самом сайте\r\n\r\n# Внутренний портал и админ-панель\r\n\r\nОтдельной крупной задачей была необходимость сделать внутренний портал для сотрудников. Главным вызовом было задача учесть флоу саппорт-инженеров из разных команд. Ингода оно сильно отличалось и нужно было найти решения, которые устроят всех.\r\n\r\nДля этого проводилось множество сложных встреч с саппорт-инженерами из разных команд и топ-саппортом. По каким-то сценариям приходилось идти на компромиссы, по каким-то — выбирать один вариант и убеждать в правильности этого варианта остальных.\r\n\r\nВ результате, судя по опросам и личным разговорам, большая часть сотрудников осталась довольна новой системой.\r\n\r\nТакже, для более гибкой работы и настройки системы под текущие нужды бизнеса была спроектирована админ-панель, где можно точечно настроить различные параметры системы.\r\n\r\nТак как решения внутренние, вдаваться в подробности и показывать скриншоты я не могу.  \r\n\r\n# Результаты\r\n\r\nВ итоге, полный переход на новую версию получился безболезненным. На каждой итерации выявлялись проблемные места и не учтённые сценарий. Большая часть из них решалась, от небольшой части осознанно отказывались.\r\n\r\nСтарая версия сайта постепенно была отключена, когда количество её пользователей стало совсем небольшим.\r\n\r\nОбщая оценка редизайна была оценена как успешная. Как со стороны клиентов, так и со стороны сотрудников. Поставленные перед редизайном цели были достигнуты:\r\n\r\n- **Уменьшилась нагрузка на саппорт-инженеров.**\r\n    - Пользователи стали чаще находить решения самостоятельно: улучшен движок поиска, предлагаются релевантные ссылки при создании тикета, улучшена фильтрация.\r\n    - Пользователи стали реже ошибаться с выбором платформы/продукта и других деталей при создании тикета.\r\n    - Во внутреннем портале появились инструменты, помогающие саппорт-инженерам быстрее отвечать на тикеты, ответ на которые уже давался ранее.\r\n- **Не отформатированные тикеты появляются гораздо реже.** Решилась проблема с тем, что пользователи не понимали, как отправлять аттачи.\r\n- **Уменьшилось количество проблем, когда пользователи не получают уведомления вовремя.**\r\n    - В настройках уведомлений появился отдельный чекбокс, для получения уведомлений от саппорт-центра (раньше был единый чекбокс, для всех почтовых рассылок).\r\n    - Даже если пользователь отключил уведомления от таких рассылок, то саппорт-инженер будет об этом знать. И, если у пользователя возникают с этим проблемы, подсказать варианты решения.\r\n    - Сами почтовые уведомления стали понятнее, появилась возможность подключить браузерные уведомления.\r\n    - Появилась возможность подписать на рассылку на любой тикет со страницы этого тикета.\r\n- **Более точечно настроена аналитика.**\r\n    - Саппорт-инженер теперь может видеть карточку пользователя с историей посещений тикетов и документов в документации. Так инженер поддержки сразу может понять, какие ссылки есть смысл советовать, а какие — нет, так как пользователь их уже посещал.\r\n    - Добавлены ивенты на целевые действия.\r\n    - Созданный внутренние дашборды с анализом различных данных, необходимых для оценки поступаемого  количества тикетов и оценки эффективности саппорта.\r\n- **Поиск по тикетам стал гибче и проще.**\r\n    - Были докручены мета-теги, чтобы тикеты лучше искались поисковиками.\r\n    - Переосмыслены фильтры, добавлены готовые пресеты и возможность подписаться на созданный фильтр.\r\n    - Оптимизирована внутренняя страница поиска.\r\n- **Сделана мобильная версия клиентского портала.**', `Summary`='', `FormatterID`='neasden', `OriginalAlias`='support-center', `Uploads`='a:3:{i:0;s:24:\"/images/blog/1x/sc-1.png\";i:1;s:15:\"empty-image.jpg\";i:2;s:24:\"/images/blog/1x/sc-2.png\";}', `IsPublished`='1', `IsCommentable`='0', `IsVisible`='1', `IsFavourite`='1', `Stamp`='1711383800', `LastModified`='1711827769', `Offset`='14400', `IsDST`='0', `IsIndexed`='0', `IsExternal`='0', `ReadCount`='4', `SourceID`='0', `SourceNoteID`='0', `SourceNoteURL`='', `SourceNoteJSONURL`='', `SourceNoteData`='' WHERE `SubsetID`=1 AND (`ID`=1);

UPDATE `e2BlogNotes` SET `SubsetID`='1', `Title`='Support Center', `Text`='Система поддержки пользователей. Включает различные информационные ресурсы: вопросы от пользователей, статьи в базе знаний и истории версий.\r\n\r\nЕжедневно в Support Center создаются сотни новых вопросов и на них отвечают десятки саппорт-инженеров. За годы работы старый интерфейс устарел как внешне, так и с точки зрения удобства и функциональности. Пришла задача полностью переработать платформу, с учётом всех бизнес-требований.\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/sc-1.png\" srcset=\"/images/blog/1x/sc-1.png 1x, /images/blog/2x/sc-1@2x.png 2x\" class=\"img-fluid\">\r\n\r\n# Вводная\r\n\r\nСистема состоит из трёх основных порталов:\r\n\r\n- Клиентский портал\r\n- Внутренний портал для сотрудников\r\n- Админ-панель\r\n\r\nКаждым порталом пользуется свой сегмент пользователей. Клиенты компании ожидают простой и понятный интерфейс. В то время как саппорт-инженеры привыкли к определенным сценариям, которые тоже нужно было сохранить.\r\n\r\n# Клиентский портал\r\n\r\nНа этот ресурс были задействованы основные силы. Клиентский портал даёт возможность клиентам задавать вопросы технического характера и получать на них ответы. \r\n\r\nПеред редизайном ставились следующие задачи:\r\n\r\n- **Снизить нагрузку на саппорт-инженеров.** Помочь пользователям находить ответы самостоятельно, если на вопрос уже отвечали ранее или решение описано в документации.\r\n- **Улучшить UX.** Накопился список проблем, которые нужно было решать:\r\n    - **Пользователи выбирают неверный продукт при создании вопроса.** DevExpress разрабатывает и поддерживает десятки продуктов. У каждого продукта могут быть разные платформы и версии. Иногда важно знать, какая ОС установлена у пользователя, каким IDE он пользуется. Нужно было сделать так, чтобы у пользователя не возникали проблемы при выборе нужных значений. Помочь ему на этом пути.\r\n    - **Возникают проблемы при форматировании текста.** Пользователи приходят в поддержку с техническими проблемами. Описание проблемы содержит куски кода или целые архивы с проектами. В старой версии сайта пользователи путались в текстовом редакторе и отправляли не отформатированные куски куда, которые сливались с обычным текстом. Также, пользователи не всегда понимали как аттачить файлы. Всё это приводило к дополнительной нагрузке на саппорт-инженеров.\r\n    - **Пользователи не замечают уведомления об ответах в их тикете.** Проблема касалась как веб-интерфейса, так и уведомлений приходящих пользователю на почту. Пользователи либо не замечали уведомления, либо не понимали к чему они относятся, либо ранее отключали уведомления и забывали об этом. В связи с этим, среднее время на решение таких тикетов значительно увеличивалось.\r\n    - **Клиенты из одной и той же компании не видят вопросы друг друга.** Большинство клиентов предпочитает оставлять свои вопросы приватно. Чтобы их могли видеть только саппорт-инженеры. Из-за этого возникала проблема, что вопросы становились приватными полностью и их не могли видеть даже сотрудники одной и той же компании с разных аккаунтов.\r\n    - **Неудобные фильтры.** Пользователи, что на странице со списком публичных тикетов невозможно ничего найти. Фильтров мало, а то, что есть не всегда работает очевидным образом.\r\n- **Переосмыслить встроенный инструмент “Version History”.**\r\n- **Улучшить аналитику.**\r\n- **Освежить внешний вид.**\r\n\r\n## Подготовка к работе\r\n\r\nПеред началом работы над редизайном была проведена подготовительная работы. Подготовлен общий план работы и проведены встречи со всеми заинтересованными лицами. Был подготовлен итоговый бриф проекта. \r\n\r\nЧасть работ, которые были проведены на этом этапе:\r\n\r\n- **Анализ текущего дизайна.** UX-тестирование текущего сайта, поиск проблем.\r\n- **Ресёрч конкурентов.** Изучение как прямых конкурентов, так и решений крупных платформ. Например, Zendesk, Freshdesk, Zoho Desk.\r\n- **Сбор и анализ существующего фидбека.** За годы работы, накопилось большое количество тикетов, комментарием и другой обратной связи касаемо работы портала. Была проведена большая работу по сбору всей это информации в один документ, её анализу и приоритизации.\r\n- **Сбор информации от саппорт-инженеров.** Инженеры поддержки активнее всего общаются с пользователями и знают детали и проблемы, которые могут быть неизвестны и неочевидны другим членам команды.\r\n- **Изучение текущих данных аналитики и список того, что хотим собирать ещё в новом дизайне.** Для работы с данными использовались:  Google Analytics (+Google Tag Manager), Matomo, внутренние инструменты.\r\n- **Сбор требований от заказчиков и всех заинтересованных лиц.**\r\n- **Подготовка брифа.** Описание проблем, целей и задач. Развёрнутый ответ на вопрос, что мы будем считать успешным редизайном.\r\n\r\n## Процесс\r\n\r\nРабота над сайтом строилась 2-4 недельными спринтами. В конце каждого спринта проводились синхронизационные встречи с заказчиками. \r\n\r\nВ начале работы над дизайном была согласована общая концепция. Отрисованы низко детализированные прототипы с решением основных UX проблем. Найден общий подход к внешнему виду.  \r\n\r\nЧтобы работа над новым дизайном была эффективной и обратная связь поступала как можно быстрее был принят рад мер:\r\n\r\n- Продукт менеджер продукта показывал прототипы и просто картинки небольшой выборке самых активных и заинтересованных пользователей саппорт-центра. Благодаря этому получалось очень быстро собрать много полезной информации, которая помогала намного быстрее замечать точки роста.\r\n- Тесное общение с разработчиками. Так дизайн значительно обгонял разработку, нужно было сразу учитывать технические ограничения. Для этого проводились постоянные встречи между разработчикам, заказчиками и дизайнером. Так мы оценивали техническую сложность каждой фичи и на основе этого принимали решение, будем мы брать её в работу или нет.\r\n- На этапе, когда появилась первая работающая версия сайта, его стали тестировать сотрудники. В первую очередь, к тестированию подключались саппорт-инженеры. На этом этапе было собрано большое количество фидбека как по техническим багам, визуальным багам, так и просто по неудачным UX-решениям.\r\n- На следующем этапе снова к фидбеку снова были подключены активные клиенты. Которые были готовы дать развёрнутый фидбек.\r\n- На одном из финальных этапов сайт стал доступен для всех пользователей, но в виде бета-версии. При этом, каждый пользователь мог вернуться к старой версии сайта. Со временем, пользователей вернувшихся на старый сайт становилось меньше. Также, мы старались собирать фидбек от таких пользователей. Чтобы понять, почему они вернулись на старую версию сайта.\r\n- К новой версии сайта была прикручена продвинутая аналитика.\r\n\r\n## Примеры реализации\r\n\r\n### Релевантные подсказки при создании тикета\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/sc-2.png\" srcset=\"/images/blog/1x/sc-2.png 1x, /images/blog/2x/sc-2@2x.png 2x\" class=\"img-fluid\">\r\n\r\n### Упрощена навигация по дискуссии с ветвистой иерархией\r\n\r\n### Обновлён текстовый редактор\r\n\r\n### Обновлены инструменты фильтра на странице со списком тикетов\r\n\r\n### Обновлены почтовые уведомлению, улучшения подписка на уведомления на самом сайте\r\n\r\n# Внутренний портал и админ-панель\r\n\r\nОтдельной крупной задачей была необходимость сделать внутренний портал для сотрудников. Главным вызовом было задача учесть флоу саппорт-инженеров из разных команд. Ингода оно сильно отличалось и нужно было найти решения, которые устроят всех.\r\n\r\nДля этого проводилось множество сложных встреч с саппорт-инженерами из разных команд и топ-саппортом. По каким-то сценариям приходилось идти на компромиссы, по каким-то — выбирать один вариант и убеждать в правильности этого варианта остальных.\r\n\r\nВ результате, судя по опросам и личным разговорам, большая часть сотрудников осталась довольна новой системой.\r\n\r\nТакже, для более гибкой работы и настройки системы под текущие нужды бизнеса была спроектирована админ-панель, где можно точечно настроить различные параметры системы.\r\n\r\nТак как решения внутренние, вдаваться в подробности и показывать скриншоты я не могу.  \r\n\r\n# Результаты\r\n\r\nВ итоге, полный переход на новую версию получился безболезненным. На каждой итерации выявлялись проблемные места и не учтённые сценарий. Большая часть из них решалась, от небольшой части осознанно отказывались.\r\n\r\nСтарая версия сайта постепенно была отключена, когда количество её пользователей стало совсем небольшим.\r\n\r\nОбщая оценка редизайна была оценена как успешная. Как со стороны клиентов, так и со стороны сотрудников. Поставленные перед редизайном цели были достигнуты:\r\n\r\n- **Уменьшилась нагрузка на саппорт-инженеров.**\r\n    - Пользователи стали чаще находить решения самостоятельно: улучшен движок поиска, предлагаются релевантные ссылки при создании тикета, улучшена фильтрация.\r\n    - Пользователи стали реже ошибаться с выбором платформы/продукта и других деталей при создании тикета.\r\n    - Во внутреннем портале появились инструменты, помогающие саппорт-инженерам быстрее отвечать на тикеты, ответ на которые уже давался ранее.\r\n- **Не отформатированные тикеты появляются гораздо реже.** Решилась проблема с тем, что пользователи не понимали, как отправлять аттачи.\r\n- **Уменьшилось количество проблем, когда пользователи не получают уведомления вовремя.**\r\n    - В настройках уведомлений появился отдельный чекбокс, для получения уведомлений от саппорт-центра (раньше был единый чекбокс, для всех почтовых рассылок).\r\n    - Даже если пользователь отключил уведомления от таких рассылок, то саппорт-инженер будет об этом знать. И, если у пользователя возникают с этим проблемы, подсказать варианты решения.\r\n    - Сами почтовые уведомления стали понятнее, появилась возможность подключить браузерные уведомления.\r\n    - Появилась возможность подписать на рассылку на любой тикет со страницы этого тикета.\r\n- **Более точечно настроена аналитика.**\r\n    - Саппорт-инженер теперь может видеть карточку пользователя с историей посещений тикетов и документов в документации. Так инженер поддержки сразу может понять, какие ссылки есть смысл советовать, а какие — нет, так как пользователь их уже посещал.\r\n    - Добавлены ивенты на целевые действия.\r\n    - Созданный внутренние дашборды с анализом различных данных, необходимых для оценки поступаемого  количества тикетов и оценки эффективности саппорта.\r\n- **Поиск по тикетам стал гибче и проще.**\r\n    - Были докручены мета-теги, чтобы тикеты лучше искались поисковиками.\r\n    - Переосмыслены фильтры, добавлены готовые пресеты и возможность подписаться на созданный фильтр.\r\n    - Оптимизирована внутренняя страница поиска.\r\n- **Сделана мобильная версия клиентского портала.**', `Summary`='', `FormatterID`='neasden', `OriginalAlias`='support-center', `Uploads`='a:3:{i:0;s:24:\"/images/blog/1x/sc-1.png\";i:1;s:15:\"empty-image.jpg\";i:2;s:24:\"/images/blog/1x/sc-2.png\";}', `IsPublished`='1', `IsCommentable`='0', `IsVisible`='1', `IsFavourite`='1', `Stamp`='1711383800', `LastModified`='1711827769', `Offset`='14400', `IsDST`='0', `IsIndexed`='1', `IsExternal`='0', `ReadCount`='4', `SourceID`='0', `SourceNoteID`='0', `SourceNoteURL`='', `SourceNoteJSONURL`='', `SourceNoteData`='' WHERE `SubsetID`=1 AND (`ID`=1);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 4;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '4', '1711825200', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1709235827);

UPDATE `e2BlogAliases` SET `EntityType`='n', `EntityID`='4', `Alias`='documentation', `Stamp`='1711828674' WHERE `SubsetID`=1 AND (`ID`=4);

UPDATE `e2BlogNotes` SET `SubsetID`='1', `Title`='Documentation', `Text`='DevExpress Documentation — одна из самый объемных документации на рынке. Содержит несколько сотен тысяч статей и АПИ. Внутри для её работы создана целая экосистема, включающая в себя множество отдельных компонентов.\r\n\r\n# Вводная\r\n\r\nДолгое время единой системы документации не было. Всё состояло из отдельных проектов и отдавалось пользователям в формате довольно простых HTML файлов, либо в CHM формате.\r\n\r\nС развитием продуктовой линейки и увеличение штата технических писателей такой подход стал приносить неудобства как для сотрудников, так и для пользователей.\r\n\r\nУчитывай количество и объем документов, было принято решение сделать собственную систему документации.\r\n\r\n# Задачи\r\n\r\nСистема документации состоит из различных функциональных компонентов. При разработке дизайна нужно было учесть следующие факторы:\r\n\r\n- **Огромное количество написанных топиков.** Разные топики были написаны разными людьми, в разное время. Поэтому, сильно отличались по структуре. Нужно было найти такой подход к стилям, чтобы старые документы не ломали внешний вид страниц.\r\n- **Документацию читают с разных устройств.** Нужно было сделать документацию такой, чтобы её можно было читать на любом экране.\r\n- **Навигация по проекту должна быть удобной.** Структура каждого проекта документации древовидна, один проект может быть вложен в другой и так далее. Нужно сделать так, чтобы пользователь понимал, на каком уровне он находится и мог легко навигироваться между документами.\r\n- **Поиск по документу должен быть удобным.** Документы внутри проекта могут быть большими и сложными. Нужно сделать так, чтобы пользователь мог быстро найти ответ на свой вопрос внутри конкретного документа.\r\n- **Сделать разводящую страницу по проектам.** Новая система документации собирает все проекты в рамках одного сайта. Важно было сделать страницу, где пользователь может выбрать нужный ему проект.\r\n- **Содержимое документа может варьировать от версии продукта и его платформы.**\r\n- **Совместно с техническими писателями подготовить гайдлайны по оформлению топиков.**\r\n- **Учесть оффлайн документацию.** Часть пользователей, в свете специфики бизнеса, используют активно оффлайн версию документации. А именно, CHM. Поэтому, нужно было подготовить стили для оффлайн документации. Учитывая, что CHM поддерживает CSS уровня Internet Explorer 7 (и то не всегда) — это было очень непростой задачей.\r\n- **Поддержать интеграцию с саппорт-центром.** Сегмент пользователей читающих документацию и создающих тикеты в саппорт-центре тесно связан. Важно было найти такое решение, чтобы пользователь имел возможность создать тикет прямо из документации, если ему не понятен какой-то из топиков. И наоборот, если ссылку на топик дал сотрудник саппорт-центра, то нужно иметь возможность дополнительно уточнить у пользователя, помог ли ему этот топик.\r\n- **Сделать документацию доступной.** Сайт документации должен удовлетворять требования A11Y, чтобы им было удобно пользоваться всем пользователям.\r\n\r\n# Результат\r\n\r\nНовая система документации получила положительный фидбек как со стороны пользователей, так и со стороны технических писателей. Основная часть задач была решения в рамках основной работы над проектом, многие дополнительные фичи — в рамках доработок по проекту.\r\n\r\nКроме работы непосредственно над дизайном, я внёс большой вклад во фронденд составляющую сайта:\r\n\r\n- Написал несколько функциональных фич.\r\n- Обновил семантику сайта, для решения проблем связанных с доступностью.\r\n- Активно работал со стилям в коде.\r\n\r\n## Стили, которые работают для разных топиков\r\n\r\n## Доступность со всех устройств\r\n\r\n## Навигация по документу\r\n\r\n## Разводящая страница\r\n\r\n## Версионность\r\n\r\n## Интеграция с саппорт-центром\r\n\r\n## Оффлайн документация\r\n\r\n## Доступность', `Summary`='', `FormatterID`='neasden', `OriginalAlias`='documentation', `Uploads`='a:0:{}', `IsPublished`='1', `IsCommentable`='0', `IsVisible`='1', `IsFavourite`='1', `Stamp`='1711383886', `LastModified`='1711828674', `Offset`='14400', `IsDST`='0', `IsIndexed`='0', `IsExternal`='0', `ReadCount`='5', `SourceID`='0', `SourceNoteID`='0', `SourceNoteURL`='', `SourceNoteJSONURL`='', `SourceNoteData`='' WHERE `SubsetID`=1 AND (`ID`=4);

UPDATE `e2BlogNotes` SET `SubsetID`='1', `Title`='Documentation', `Text`='DevExpress Documentation — одна из самый объемных документации на рынке. Содержит несколько сотен тысяч статей и АПИ. Внутри для её работы создана целая экосистема, включающая в себя множество отдельных компонентов.\r\n\r\n# Вводная\r\n\r\nДолгое время единой системы документации не было. Всё состояло из отдельных проектов и отдавалось пользователям в формате довольно простых HTML файлов, либо в CHM формате.\r\n\r\nС развитием продуктовой линейки и увеличение штата технических писателей такой подход стал приносить неудобства как для сотрудников, так и для пользователей.\r\n\r\nУчитывай количество и объем документов, было принято решение сделать собственную систему документации.\r\n\r\n# Задачи\r\n\r\nСистема документации состоит из различных функциональных компонентов. При разработке дизайна нужно было учесть следующие факторы:\r\n\r\n- **Огромное количество написанных топиков.** Разные топики были написаны разными людьми, в разное время. Поэтому, сильно отличались по структуре. Нужно было найти такой подход к стилям, чтобы старые документы не ломали внешний вид страниц.\r\n- **Документацию читают с разных устройств.** Нужно было сделать документацию такой, чтобы её можно было читать на любом экране.\r\n- **Навигация по проекту должна быть удобной.** Структура каждого проекта документации древовидна, один проект может быть вложен в другой и так далее. Нужно сделать так, чтобы пользователь понимал, на каком уровне он находится и мог легко навигироваться между документами.\r\n- **Поиск по документу должен быть удобным.** Документы внутри проекта могут быть большими и сложными. Нужно сделать так, чтобы пользователь мог быстро найти ответ на свой вопрос внутри конкретного документа.\r\n- **Сделать разводящую страницу по проектам.** Новая система документации собирает все проекты в рамках одного сайта. Важно было сделать страницу, где пользователь может выбрать нужный ему проект.\r\n- **Содержимое документа может варьировать от версии продукта и его платформы.**\r\n- **Совместно с техническими писателями подготовить гайдлайны по оформлению топиков.**\r\n- **Учесть оффлайн документацию.** Часть пользователей, в свете специфики бизнеса, используют активно оффлайн версию документации. А именно, CHM. Поэтому, нужно было подготовить стили для оффлайн документации. Учитывая, что CHM поддерживает CSS уровня Internet Explorer 7 (и то не всегда) — это было очень непростой задачей.\r\n- **Поддержать интеграцию с саппорт-центром.** Сегмент пользователей читающих документацию и создающих тикеты в саппорт-центре тесно связан. Важно было найти такое решение, чтобы пользователь имел возможность создать тикет прямо из документации, если ему не понятен какой-то из топиков. И наоборот, если ссылку на топик дал сотрудник саппорт-центра, то нужно иметь возможность дополнительно уточнить у пользователя, помог ли ему этот топик.\r\n- **Сделать документацию доступной.** Сайт документации должен удовлетворять требования A11Y, чтобы им было удобно пользоваться всем пользователям.\r\n\r\n# Результат\r\n\r\nНовая система документации получила положительный фидбек как со стороны пользователей, так и со стороны технических писателей. Основная часть задач была решения в рамках основной работы над проектом, многие дополнительные фичи — в рамках доработок по проекту.\r\n\r\nКроме работы непосредственно над дизайном, я внёс большой вклад во фронденд составляющую сайта:\r\n\r\n- Написал несколько функциональных фич.\r\n- Обновил семантику сайта, для решения проблем связанных с доступностью.\r\n- Активно работал со стилям в коде.\r\n\r\n## Стили, которые работают для разных топиков\r\n\r\n## Доступность со всех устройств\r\n\r\n## Навигация по документу\r\n\r\n## Разводящая страница\r\n\r\n## Версионность\r\n\r\n## Интеграция с саппорт-центром\r\n\r\n## Оффлайн документация\r\n\r\n## Доступность', `Summary`='', `FormatterID`='neasden', `OriginalAlias`='documentation', `Uploads`='a:0:{}', `IsPublished`='1', `IsCommentable`='0', `IsVisible`='1', `IsFavourite`='1', `Stamp`='1711383886', `LastModified`='1711828674', `Offset`='14400', `IsDST`='0', `IsIndexed`='1', `IsExternal`='0', `ReadCount`='5', `SourceID`='0', `SourceNoteID`='0', `SourceNoteURL`='', `SourceNoteJSONURL`='', `SourceNoteData`='' WHERE `SubsetID`=1 AND (`ID`=4);

UPDATE `e2BlogAliases` SET `EntityType`='n', `EntityID`='1', `Alias`='support-center', `Stamp`='1711828881' WHERE `SubsetID`=1 AND (`ID`=1);

UPDATE `e2BlogNotes` SET `SubsetID`='1', `Title`='Support Center', `Text`='Система поддержки пользователей. Включает различные информационные ресурсы: вопросы от пользователей, статьи в базе знаний и истории версий.\r\n\r\nЕжедневно в Support Center создаются сотни новых вопросов и на них отвечают десятки саппорт-инженеров. За годы работы старый интерфейс устарел как внешне, так и с точки зрения удобства и функциональности. Пришла задача полностью переработать платформу, с учётом всех бизнес-требований.\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/sc-1.png\" srcset=\"/images/blog/1x/sc-1.png 1x, /images/blog/2x/sc-1@2x.png 2x\" class=\"img-fluid\">\r\n\r\n# Вводная\r\n\r\nСистема состоит из трёх основных порталов:\r\n\r\n- Клиентский портал\r\n- Внутренний портал для сотрудников\r\n- Админ-панель\r\n\r\nКаждым порталом пользуется свой сегмент пользователей. Клиенты компании ожидают простой и понятный интерфейс . В то время как саппорт-инженеры привыкли к определенным сценариям, которые тоже нужно было сохранить.\r\n\r\n# Клиентский портал\r\n\r\nНа этот ресурс были задействованы основные силы. Клиентский портал даёт возможность клиентам задавать вопросы технического характера и получать на них ответы. \r\n\r\nПеред редизайном ставились следующие задачи:\r\n\r\n- **Снизить нагрузку на саппорт-инженеров.** Помочь пользователям находить ответы самостоятельно, если на вопрос уже отвечали ранее или решение описано в документации.\r\n- **Улучшить UX.** Накопился список проблем, которые нужно было решать:\r\n    - **Пользователи выбирают неверный продукт при создании вопроса.** DevExpress разрабатывает и поддерживает десятки продуктов. У каждого продукта могут быть разные платформы и версии. Иногда важно знать, какая ОС установлена у пользователя, каким IDE он пользуется. Нужно было сделать так, чтобы у пользователя не возникали проблемы при выборе нужных значений. Помочь ему на этом пути.\r\n    - **Возникают проблемы при форматировании текста.** Пользователи приходят в поддержку с техническими проблемами. Описание проблемы содержит куски кода или целые архивы с проектами. В старой версии сайта пользователи путались в текстовом редакторе и отправляли не отформатированные куски куда, которые сливались с обычным текстом. Также, пользователи не всегда понимали как аттачить файлы. Всё это приводило к дополнительной нагрузке на саппорт-инженеров.\r\n    - **Пользователи не замечают уведомления об ответах в их тикете.** Проблема касалась как веб-интерфейса, так и уведомлений приходящих пользователю на почту. Пользователи либо не замечали уведомления, либо не понимали к чему они относятся, либо ранее отключали уведомления и забывали об этом. В связи с этим, среднее время на решение таких тикетов значительно увеличивалось.\r\n    - **Клиенты из одной и той же компании не видят вопросы друг друга.** Большинство клиентов предпочитает оставлять свои вопросы приватно. Чтобы их могли видеть только саппорт-инженеры. Из-за этого возникала проблема, что вопросы становились приватными полностью и их не могли видеть даже сотрудники одной и той же компании с разных аккаунтов.\r\n    - **Неудобные фильтры.** Пользователи, что на странице со списком публичных тикетов невозможно ничего найти. Фильтров мало, а то, что есть не всегда работает очевидным образом.\r\n- **Переосмыслить встроенный инструмент “Version History”.**\r\n- **Улучшить аналитику.**\r\n- **Освежить внешний вид.**\r\n\r\n## Подготовка к работе\r\n\r\nПеред началом работы над редизайном была проведена подготовительная работы. Подготовлен общий план работы и проведены встречи со всеми заинтересованными лицами. Был подготовлен итоговый бриф проекта. \r\n\r\nЧасть работ, которые были проведены на этом этапе:\r\n\r\n- **Анализ текущего дизайна.** UX-тестирование текущего сайта, поиск проблем.\r\n- **Ресёрч конкурентов.** Изучение как прямых конкурентов, так и решений крупных платформ. Например, Zendesk, Freshdesk, Zoho Desk.\r\n- **Сбор и анализ существующего фидбека.** За годы работы, накопилось большое количество тикетов, комментарием и другой обратной связи касаемо работы портала. Была проведена большая работу по сбору всей это информации в один документ, её анализу и приоритизации.\r\n- **Сбор информации от саппорт-инженеров.** Инженеры поддержки активнее всего общаются с пользователями и знают детали и проблемы, которые могут быть неизвестны и неочевидны другим членам команды.\r\n- **Изучение текущих данных аналитики и список того, что хотим собирать ещё в новом дизайне.** Для работы с данными использовались:  Google Analytics (+Google Tag Manager), Matomo, внутренние инструменты.\r\n- **Сбор требований от заказчиков и всех заинтересованных лиц.**\r\n- **Подготовка брифа.** Описание проблем, целей и задач. Развёрнутый ответ на вопрос, что мы будем считать успешным редизайном.\r\n\r\n## Процесс\r\n\r\nРабота над сайтом строилась 2-4 недельными спринтами. В конце каждого спринта проводились синхронизационные встречи с заказчиками. \r\n\r\nВ начале работы над дизайном была согласована общая концепция. Отрисованы низко детализированные прототипы с решением основных UX проблем. Найден общий подход к внешнему виду.  \r\n\r\nЧтобы работа над новым дизайном была эффективной и обратная связь поступала как можно быстрее был принят рад мер:\r\n\r\n- Продукт менеджер продукта показывал прототипы и просто картинки небольшой выборке самых активных и заинтересованных пользователей саппорт-центра. Благодаря этому получалось очень быстро собрать много полезной информации, которая помогала намного быстрее замечать точки роста.\r\n- Тесное общение с разработчиками. Так дизайн значительно обгонял разработку, нужно было сразу учитывать технические ограничения. Для этого проводились постоянные встречи между разработчикам, заказчиками и дизайнером. Так мы оценивали техническую сложность каждой фичи и на основе этого принимали решение, будем мы брать её в работу или нет.\r\n- На этапе, когда появилась первая работающая версия сайта, его стали тестировать сотрудники. В первую очередь, к тестированию подключались саппорт-инженеры. На этом этапе было собрано большое количество фидбека как по техническим багам, визуальным багам, так и просто по неудачным UX-решениям.\r\n- На следующем этапе снова к фидбеку снова были подключены активные клиенты. Которые были готовы дать развёрнутый фидбек.\r\n- На одном из финальных этапов сайт стал доступен для всех пользователей, но в виде бета-версии. При этом, каждый пользователь мог вернуться к старой версии сайта. Со временем, пользователей вернувшихся на старый сайт становилось меньше. Также, мы старались собирать фидбек от таких пользователей. Чтобы понять, почему они вернулись на старую версию сайта.\r\n- К новой версии сайта была прикручена продвинутая аналитика.\r\n\r\n## Примеры реализации\r\n\r\n### Релевантные подсказки при создании тикета\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/sc-2.png\" srcset=\"/images/blog/1x/sc-2.png 1x, /images/blog/2x/sc-2@2x.png 2x\" class=\"img-fluid\">\r\n\r\n### Упрощена навигация по дискуссии с ветвистой иерархией\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/sc-3.png\" srcset=\"/images/blog/1x/sc-3.png 1x, /images/blog/2x/sc-3@2x.png 2x\" class=\"img-fluid\">\r\n\r\n### Обновлён текстовый редактор\r\n\r\n### Обновлены инструменты фильтра на странице со списком тикетов\r\n\r\n### Обновлены почтовые уведомлению, улучшения подписка на уведомления на самом сайте\r\n\r\n# Внутренний портал и админ-панель\r\n\r\nОтдельной крупной задачей была необходимость сделать внутренний портал для сотрудников. Главным вызовом было задача учесть флоу саппорт-инженеров из разных команд. Ингода оно сильно отличалось и нужно было найти решения, которые устроят всех.\r\n\r\nДля этого проводилось множество сложных встреч с саппорт-инженерами из разных команд и топ-саппортом. По каким-то сценариям приходилось идти на компромиссы, по каким-то — выбирать один вариант и убеждать в правильности этого варианта остальных.\r\n\r\nВ результате, судя по опросам и личным разговорам, большая часть сотрудников осталась довольна новой системой.\r\n\r\nТакже, для более гибкой работы и настройки системы под текущие нужды бизнеса была спроектирована админ-панель, где можно точечно настроить различные параметры системы.\r\n\r\nТак как решения внутренние, вдаваться в подробности и показывать скриншоты я не могу.  \r\n\r\n# Результаты\r\n\r\nВ итоге, полный переход на новую версию получился безболезненным. На каждой итерации выявлялись проблемные места и не учтённые сценарий. Большая часть из них решалась, от небольшой части осознанно отказывались.\r\n\r\nСтарая версия сайта постепенно была отключена, когда количество её пользователей стало совсем небольшим.\r\n\r\nОбщая оценка редизайна была оценена как успешная. Как со стороны клиентов, так и со стороны сотрудников. Поставленные перед редизайном цели были достигнуты:\r\n\r\n- **Уменьшилась нагрузка на саппорт-инженеров.**\r\n    - Пользователи стали чаще находить решения самостоятельно: улучшен движок поиска, предлагаются релевантные ссылки при создании тикета, улучшена фильтрация.\r\n    - Пользователи стали реже ошибаться с выбором платформы/продукта и других деталей при создании тикета.\r\n    - Во внутреннем портале появились инструменты, помогающие саппорт-инженерам быстрее отвечать на тикеты, ответ на которые уже давался ранее.\r\n- **Не отформатированные тикеты появляются гораздо реже.** Решилась проблема с тем, что пользователи не понимали, как отправлять аттачи.\r\n- **Уменьшилось количество проблем, когда пользователи не получают уведомления вовремя.**\r\n    - В настройках уведомлений появился отдельный чекбокс, для получения уведомлений от саппорт-центра (раньше был единый чекбокс, для всех почтовых рассылок).\r\n    - Даже если пользователь отключил уведомления от таких рассылок, то саппорт-инженер будет об этом знать. И, если у пользователя возникают с этим проблемы, подсказать варианты решения.\r\n    - Сами почтовые уведомления стали понятнее, появилась возможность подключить браузерные уведомления.\r\n    - Появилась возможность подписать на рассылку на любой тикет со страницы этого тикета.\r\n- **Более точечно настроена аналитика.**\r\n    - Саппорт-инженер теперь может видеть карточку пользователя с историей посещений тикетов и документов в документации. Так инженер поддержки сразу может понять, какие ссылки есть смысл советовать, а какие — нет, так как пользователь их уже посещал.\r\n    - Добавлены ивенты на целевые действия.\r\n    - Созданный внутренние дашборды с анализом различных данных, необходимых для оценки поступаемого  количества тикетов и оценки эффективности саппорта.\r\n- **Поиск по тикетам стал гибче и проще.**\r\n    - Были докручены мета-теги, чтобы тикеты лучше искались поисковиками.\r\n    - Переосмыслены фильтры, добавлены готовые пресеты и возможность подписаться на созданный фильтр.\r\n    - Оптимизирована внутренняя страница поиска.\r\n- **Сделана мобильная версия клиентского портала.**', `Summary`='', `FormatterID`='neasden', `OriginalAlias`='support-center', `Uploads`='a:3:{i:0;s:24:\"/images/blog/1x/sc-1.png\";i:1;s:15:\"empty-image.jpg\";i:2;s:24:\"/images/blog/1x/sc-2.png\";}', `IsPublished`='1', `IsCommentable`='0', `IsVisible`='1', `IsFavourite`='1', `Stamp`='1711383800', `LastModified`='1711828881', `Offset`='14400', `IsDST`='0', `IsIndexed`='0', `IsExternal`='0', `ReadCount`='4', `SourceID`='0', `SourceNoteID`='0', `SourceNoteURL`='', `SourceNoteJSONURL`='', `SourceNoteData`='' WHERE `SubsetID`=1 AND (`ID`=1);

UPDATE `e2BlogNotes` SET `Uploads`='a:4:{i:0;s:24:"/images/blog/1x/sc-1.png";i:1;s:15:"empty-image.jpg";i:2;s:24:"/images/blog/1x/sc-2.png";i:3;s:24:"/images/blog/1x/sc-3.png";}' WHERE `SubsetID`=1 AND `ID`=1;

UPDATE `e2BlogNotes` SET `SubsetID`='1', `Title`='Support Center', `Text`='Система поддержки пользователей. Включает различные информационные ресурсы: вопросы от пользователей, статьи в базе знаний и истории версий.\r\n\r\nЕжедневно в Support Center создаются сотни новых вопросов и на них отвечают десятки саппорт-инженеров. За годы работы старый интерфейс устарел как внешне, так и с точки зрения удобства и функциональности. Пришла задача полностью переработать платформу, с учётом всех бизнес-требований.\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/sc-1.png\" srcset=\"/images/blog/1x/sc-1.png 1x, /images/blog/2x/sc-1@2x.png 2x\" class=\"img-fluid\">\r\n\r\n# Вводная\r\n\r\nСистема состоит из трёх основных порталов:\r\n\r\n- Клиентский портал\r\n- Внутренний портал для сотрудников\r\n- Админ-панель\r\n\r\nКаждым порталом пользуется свой сегмент пользователей. Клиенты компании ожидают простой и понятный интерфейс . В то время как саппорт-инженеры привыкли к определенным сценариям, которые тоже нужно было сохранить.\r\n\r\n# Клиентский портал\r\n\r\nНа этот ресурс были задействованы основные силы. Клиентский портал даёт возможность клиентам задавать вопросы технического характера и получать на них ответы. \r\n\r\nПеред редизайном ставились следующие задачи:\r\n\r\n- **Снизить нагрузку на саппорт-инженеров.** Помочь пользователям находить ответы самостоятельно, если на вопрос уже отвечали ранее или решение описано в документации.\r\n- **Улучшить UX.** Накопился список проблем, которые нужно было решать:\r\n    - **Пользователи выбирают неверный продукт при создании вопроса.** DevExpress разрабатывает и поддерживает десятки продуктов. У каждого продукта могут быть разные платформы и версии. Иногда важно знать, какая ОС установлена у пользователя, каким IDE он пользуется. Нужно было сделать так, чтобы у пользователя не возникали проблемы при выборе нужных значений. Помочь ему на этом пути.\r\n    - **Возникают проблемы при форматировании текста.** Пользователи приходят в поддержку с техническими проблемами. Описание проблемы содержит куски кода или целые архивы с проектами. В старой версии сайта пользователи путались в текстовом редакторе и отправляли не отформатированные куски куда, которые сливались с обычным текстом. Также, пользователи не всегда понимали как аттачить файлы. Всё это приводило к дополнительной нагрузке на саппорт-инженеров.\r\n    - **Пользователи не замечают уведомления об ответах в их тикете.** Проблема касалась как веб-интерфейса, так и уведомлений приходящих пользователю на почту. Пользователи либо не замечали уведомления, либо не понимали к чему они относятся, либо ранее отключали уведомления и забывали об этом. В связи с этим, среднее время на решение таких тикетов значительно увеличивалось.\r\n    - **Клиенты из одной и той же компании не видят вопросы друг друга.** Большинство клиентов предпочитает оставлять свои вопросы приватно. Чтобы их могли видеть только саппорт-инженеры. Из-за этого возникала проблема, что вопросы становились приватными полностью и их не могли видеть даже сотрудники одной и той же компании с разных аккаунтов.\r\n    - **Неудобные фильтры.** Пользователи, что на странице со списком публичных тикетов невозможно ничего найти. Фильтров мало, а то, что есть не всегда работает очевидным образом.\r\n- **Переосмыслить встроенный инструмент “Version History”.**\r\n- **Улучшить аналитику.**\r\n- **Освежить внешний вид.**\r\n\r\n## Подготовка к работе\r\n\r\nПеред началом работы над редизайном была проведена подготовительная работы. Подготовлен общий план работы и проведены встречи со всеми заинтересованными лицами. Был подготовлен итоговый бриф проекта. \r\n\r\nЧасть работ, которые были проведены на этом этапе:\r\n\r\n- **Анализ текущего дизайна.** UX-тестирование текущего сайта, поиск проблем.\r\n- **Ресёрч конкурентов.** Изучение как прямых конкурентов, так и решений крупных платформ. Например, Zendesk, Freshdesk, Zoho Desk.\r\n- **Сбор и анализ существующего фидбека.** За годы работы, накопилось большое количество тикетов, комментарием и другой обратной связи касаемо работы портала. Была проведена большая работу по сбору всей это информации в один документ, её анализу и приоритизации.\r\n- **Сбор информации от саппорт-инженеров.** Инженеры поддержки активнее всего общаются с пользователями и знают детали и проблемы, которые могут быть неизвестны и неочевидны другим членам команды.\r\n- **Изучение текущих данных аналитики и список того, что хотим собирать ещё в новом дизайне.** Для работы с данными использовались:  Google Analytics (+Google Tag Manager), Matomo, внутренние инструменты.\r\n- **Сбор требований от заказчиков и всех заинтересованных лиц.**\r\n- **Подготовка брифа.** Описание проблем, целей и задач. Развёрнутый ответ на вопрос, что мы будем считать успешным редизайном.\r\n\r\n## Процесс\r\n\r\nРабота над сайтом строилась 2-4 недельными спринтами. В конце каждого спринта проводились синхронизационные встречи с заказчиками. \r\n\r\nВ начале работы над дизайном была согласована общая концепция. Отрисованы низко детализированные прототипы с решением основных UX проблем. Найден общий подход к внешнему виду.  \r\n\r\nЧтобы работа над новым дизайном была эффективной и обратная связь поступала как можно быстрее был принят рад мер:\r\n\r\n- Продукт менеджер продукта показывал прототипы и просто картинки небольшой выборке самых активных и заинтересованных пользователей саппорт-центра. Благодаря этому получалось очень быстро собрать много полезной информации, которая помогала намного быстрее замечать точки роста.\r\n- Тесное общение с разработчиками. Так дизайн значительно обгонял разработку, нужно было сразу учитывать технические ограничения. Для этого проводились постоянные встречи между разработчикам, заказчиками и дизайнером. Так мы оценивали техническую сложность каждой фичи и на основе этого принимали решение, будем мы брать её в работу или нет.\r\n- На этапе, когда появилась первая работающая версия сайта, его стали тестировать сотрудники. В первую очередь, к тестированию подключались саппорт-инженеры. На этом этапе было собрано большое количество фидбека как по техническим багам, визуальным багам, так и просто по неудачным UX-решениям.\r\n- На следующем этапе снова к фидбеку снова были подключены активные клиенты. Которые были готовы дать развёрнутый фидбек.\r\n- На одном из финальных этапов сайт стал доступен для всех пользователей, но в виде бета-версии. При этом, каждый пользователь мог вернуться к старой версии сайта. Со временем, пользователей вернувшихся на старый сайт становилось меньше. Также, мы старались собирать фидбек от таких пользователей. Чтобы понять, почему они вернулись на старую версию сайта.\r\n- К новой версии сайта была прикручена продвинутая аналитика.\r\n\r\n## Примеры реализации\r\n\r\n### Релевантные подсказки при создании тикета\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/sc-2.png\" srcset=\"/images/blog/1x/sc-2.png 1x, /images/blog/2x/sc-2@2x.png 2x\" class=\"img-fluid\">\r\n\r\n### Упрощена навигация по дискуссии с ветвистой иерархией\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/sc-3.png\" srcset=\"/images/blog/1x/sc-3.png 1x, /images/blog/2x/sc-3@2x.png 2x\" class=\"img-fluid\">\r\n\r\n### Обновлён текстовый редактор\r\n\r\n### Обновлены инструменты фильтра на странице со списком тикетов\r\n\r\n### Обновлены почтовые уведомлению, улучшения подписка на уведомления на самом сайте\r\n\r\n# Внутренний портал и админ-панель\r\n\r\nОтдельной крупной задачей была необходимость сделать внутренний портал для сотрудников. Главным вызовом было задача учесть флоу саппорт-инженеров из разных команд. Ингода оно сильно отличалось и нужно было найти решения, которые устроят всех.\r\n\r\nДля этого проводилось множество сложных встреч с саппорт-инженерами из разных команд и топ-саппортом. По каким-то сценариям приходилось идти на компромиссы, по каким-то — выбирать один вариант и убеждать в правильности этого варианта остальных.\r\n\r\nВ результате, судя по опросам и личным разговорам, большая часть сотрудников осталась довольна новой системой.\r\n\r\nТакже, для более гибкой работы и настройки системы под текущие нужды бизнеса была спроектирована админ-панель, где можно точечно настроить различные параметры системы.\r\n\r\nТак как решения внутренние, вдаваться в подробности и показывать скриншоты я не могу.  \r\n\r\n# Результаты\r\n\r\nВ итоге, полный переход на новую версию получился безболезненным. На каждой итерации выявлялись проблемные места и не учтённые сценарий. Большая часть из них решалась, от небольшой части осознанно отказывались.\r\n\r\nСтарая версия сайта постепенно была отключена, когда количество её пользователей стало совсем небольшим.\r\n\r\nОбщая оценка редизайна была оценена как успешная. Как со стороны клиентов, так и со стороны сотрудников. Поставленные перед редизайном цели были достигнуты:\r\n\r\n- **Уменьшилась нагрузка на саппорт-инженеров.**\r\n    - Пользователи стали чаще находить решения самостоятельно: улучшен движок поиска, предлагаются релевантные ссылки при создании тикета, улучшена фильтрация.\r\n    - Пользователи стали реже ошибаться с выбором платформы/продукта и других деталей при создании тикета.\r\n    - Во внутреннем портале появились инструменты, помогающие саппорт-инженерам быстрее отвечать на тикеты, ответ на которые уже давался ранее.\r\n- **Не отформатированные тикеты появляются гораздо реже.** Решилась проблема с тем, что пользователи не понимали, как отправлять аттачи.\r\n- **Уменьшилось количество проблем, когда пользователи не получают уведомления вовремя.**\r\n    - В настройках уведомлений появился отдельный чекбокс, для получения уведомлений от саппорт-центра (раньше был единый чекбокс, для всех почтовых рассылок).\r\n    - Даже если пользователь отключил уведомления от таких рассылок, то саппорт-инженер будет об этом знать. И, если у пользователя возникают с этим проблемы, подсказать варианты решения.\r\n    - Сами почтовые уведомления стали понятнее, появилась возможность подключить браузерные уведомления.\r\n    - Появилась возможность подписать на рассылку на любой тикет со страницы этого тикета.\r\n- **Более точечно настроена аналитика.**\r\n    - Саппорт-инженер теперь может видеть карточку пользователя с историей посещений тикетов и документов в документации. Так инженер поддержки сразу может понять, какие ссылки есть смысл советовать, а какие — нет, так как пользователь их уже посещал.\r\n    - Добавлены ивенты на целевые действия.\r\n    - Созданный внутренние дашборды с анализом различных данных, необходимых для оценки поступаемого  количества тикетов и оценки эффективности саппорта.\r\n- **Поиск по тикетам стал гибче и проще.**\r\n    - Были докручены мета-теги, чтобы тикеты лучше искались поисковиками.\r\n    - Переосмыслены фильтры, добавлены готовые пресеты и возможность подписаться на созданный фильтр.\r\n    - Оптимизирована внутренняя страница поиска.\r\n- **Сделана мобильная версия клиентского портала.**', `Summary`='', `FormatterID`='neasden', `OriginalAlias`='support-center', `Uploads`='a:3:{i:0;s:24:\"/images/blog/1x/sc-1.png\";i:1;s:15:\"empty-image.jpg\";i:2;s:24:\"/images/blog/1x/sc-2.png\";}', `IsPublished`='1', `IsCommentable`='0', `IsVisible`='1', `IsFavourite`='1', `Stamp`='1711383800', `LastModified`='1711828881', `Offset`='14400', `IsDST`='0', `IsIndexed`='1', `IsExternal`='0', `ReadCount`='4', `SourceID`='0', `SourceNoteID`='0', `SourceNoteURL`='', `SourceNoteJSONURL`='', `SourceNoteData`='' WHERE `SubsetID`=1 AND (`ID`=1);

UPDATE `e2BlogNotes` SET `SubsetID`='1', `Title`='Support Center', `Text`='Система поддержки пользователей. Включает различные информационные ресурсы: вопросы от пользователей, статьи в базе знаний и истории версий.\r\n\r\nЕжедневно в Support Center создаются сотни новых вопросов и на них отвечают десятки саппорт-инженеров. За годы работы старый интерфейс устарел как внешне, так и с точки зрения удобства и функциональности. Пришла задача полностью переработать платформу, с учётом всех бизнес-требований.\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/sc-1.png\" srcset=\"/images/blog/1x/sc-1.png 1x, /images/blog/2x/sc-1@2x.png 2x\" class=\"img-fluid\">\r\n\r\n# Вводная\r\n\r\nСистема состоит из трёх основных порталов:\r\n\r\n- Клиентский портал\r\n- Внутренний портал для сотрудников\r\n- Админ-панель\r\n\r\nКаждым порталом пользуется свой сегмент пользователей. Клиенты компании ожидают простой и понятный интерфейс . В то время как саппорт-инженеры привыкли к определенным сценариям, которые тоже нужно было сохранить.\r\n\r\n# Клиентский портал\r\n\r\nНа этот ресурс были задействованы основные силы. Клиентский портал даёт возможность клиентам задавать вопросы технического характера и получать на них ответы. \r\n\r\nПеред редизайном ставились следующие задачи:\r\n\r\n- **Снизить нагрузку на саппорт-инженеров.** Помочь пользователям находить ответы самостоятельно, если на вопрос уже отвечали ранее или решение описано в документации.\r\n- **Улучшить UX.** Накопился список проблем, которые нужно было решать:\r\n    - **Пользователи выбирают неверный продукт при создании вопроса.** DevExpress разрабатывает и поддерживает десятки продуктов. У каждого продукта могут быть разные платформы и версии. Иногда важно знать, какая ОС установлена у пользователя, каким IDE он пользуется. Нужно было сделать так, чтобы у пользователя не возникали проблемы при выборе нужных значений. Помочь ему на этом пути.\r\n    - **Возникают проблемы при форматировании текста.** Пользователи приходят в поддержку с техническими проблемами. Описание проблемы содержит куски кода или целые архивы с проектами. В старой версии сайта пользователи путались в текстовом редакторе и отправляли не отформатированные куски куда, которые сливались с обычным текстом. Также, пользователи не всегда понимали как аттачить файлы. Всё это приводило к дополнительной нагрузке на саппорт-инженеров.\r\n    - **Пользователи не замечают уведомления об ответах в их тикете.** Проблема касалась как веб-интерфейса, так и уведомлений приходящих пользователю на почту. Пользователи либо не замечали уведомления, либо не понимали к чему они относятся, либо ранее отключали уведомления и забывали об этом. В связи с этим, среднее время на решение таких тикетов значительно увеличивалось.\r\n    - **Клиенты из одной и той же компании не видят вопросы друг друга.** Большинство клиентов предпочитает оставлять свои вопросы приватно. Чтобы их могли видеть только саппорт-инженеры. Из-за этого возникала проблема, что вопросы становились приватными полностью и их не могли видеть даже сотрудники одной и той же компании с разных аккаунтов.\r\n    - **Неудобные фильтры.** Пользователи, что на странице со списком публичных тикетов невозможно ничего найти. Фильтров мало, а то, что есть не всегда работает очевидным образом.\r\n- **Переосмыслить встроенный инструмент “Version History”.**\r\n- **Улучшить аналитику.**\r\n- **Освежить внешний вид.**\r\n\r\n## Подготовка к работе\r\n\r\nПеред началом работы над редизайном была проведена подготовительная работы. Подготовлен общий план работы и проведены встречи со всеми заинтересованными лицами. Был подготовлен итоговый бриф проекта. \r\n\r\nЧасть работ, которые были проведены на этом этапе:\r\n\r\n- **Анализ текущего дизайна.** UX-тестирование текущего сайта, поиск проблем.\r\n- **Ресёрч конкурентов.** Изучение как прямых конкурентов, так и решений крупных платформ. Например, Zendesk, Freshdesk, Zoho Desk.\r\n- **Сбор и анализ существующего фидбека.** За годы работы, накопилось большое количество тикетов, комментарием и другой обратной связи касаемо работы портала. Была проведена большая работу по сбору всей это информации в один документ, её анализу и приоритизации.\r\n- **Сбор информации от саппорт-инженеров.** Инженеры поддержки активнее всего общаются с пользователями и знают детали и проблемы, которые могут быть неизвестны и неочевидны другим членам команды.\r\n- **Изучение текущих данных аналитики и список того, что хотим собирать ещё в новом дизайне.** Для работы с данными использовались:  Google Analytics (+Google Tag Manager), Matomo, внутренние инструменты.\r\n- **Сбор требований от заказчиков и всех заинтересованных лиц.**\r\n- **Подготовка брифа.** Описание проблем, целей и задач. Развёрнутый ответ на вопрос, что мы будем считать успешным редизайном.\r\n\r\n## Процесс\r\n\r\nРабота над сайтом строилась 2-4 недельными спринтами. В конце каждого спринта проводились синхронизационные встречи с заказчиками. \r\n\r\nВ начале работы над дизайном была согласована общая концепция. Отрисованы низко детализированные прототипы с решением основных UX проблем. Найден общий подход к внешнему виду.  \r\n\r\nЧтобы работа над новым дизайном была эффективной и обратная связь поступала как можно быстрее был принят рад мер:\r\n\r\n- Продукт менеджер продукта показывал прототипы и просто картинки небольшой выборке самых активных и заинтересованных пользователей саппорт-центра. Благодаря этому получалось очень быстро собрать много полезной информации, которая помогала намного быстрее замечать точки роста.\r\n- Тесное общение с разработчиками. Так дизайн значительно обгонял разработку, нужно было сразу учитывать технические ограничения. Для этого проводились постоянные встречи между разработчикам, заказчиками и дизайнером. Так мы оценивали техническую сложность каждой фичи и на основе этого принимали решение, будем мы брать её в работу или нет.\r\n- На этапе, когда появилась первая работающая версия сайта, его стали тестировать сотрудники. В первую очередь, к тестированию подключались саппорт-инженеры. На этом этапе было собрано большое количество фидбека как по техническим багам, визуальным багам, так и просто по неудачным UX-решениям.\r\n- На следующем этапе снова к фидбеку снова были подключены активные клиенты. Которые были готовы дать развёрнутый фидбек.\r\n- На одном из финальных этапов сайт стал доступен для всех пользователей, но в виде бета-версии. При этом, каждый пользователь мог вернуться к старой версии сайта. Со временем, пользователей вернувшихся на старый сайт становилось меньше. Также, мы старались собирать фидбек от таких пользователей. Чтобы понять, почему они вернулись на старую версию сайта.\r\n- К новой версии сайта была прикручена продвинутая аналитика.\r\n\r\n## Примеры реализации\r\n\r\n### Релевантные подсказки при создании тикета\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/sc-2.png\" srcset=\"/images/blog/1x/sc-2.png 1x, /images/blog/2x/sc-2@2x.png 2x\" class=\"img-fluid\">\r\n\r\n### Упрощена навигация по дискуссии с ветвистой иерархией\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/sc-3.png\" srcset=\"/images/blog/1x/sc-3.png 1x, /images/blog/2x/sc-3@2x.png 2x\" class=\"img-fluid\">\r\n\r\n### Обновлён текстовый редактор\r\n\r\n### Обновлены инструменты фильтра на странице со списком тикетов\r\n\r\n### Обновлены почтовые уведомлению, улучшения подписка на уведомления на самом сайте\r\n\r\n# Внутренний портал и админ-панель\r\n\r\nОтдельной крупной задачей была необходимость сделать внутренний портал для сотрудников. Главным вызовом было задача учесть флоу саппорт-инженеров из разных команд. Ингода оно сильно отличалось и нужно было найти решения, которые устроят всех.\r\n\r\nДля этого проводилось множество сложных встреч с саппорт-инженерами из разных команд и топ-саппортом. По каким-то сценариям приходилось идти на компромиссы, по каким-то — выбирать один вариант и убеждать в правильности этого варианта остальных.\r\n\r\nВ результате, судя по опросам и личным разговорам, большая часть сотрудников осталась довольна новой системой.\r\n\r\nТакже, для более гибкой работы и настройки системы под текущие нужды бизнеса была спроектирована админ-панель, где можно точечно настроить различные параметры системы.\r\n\r\nТак как решения внутренние, вдаваться в подробности и показывать скриншоты я не могу.  \r\n\r\n# Результаты\r\n\r\nВ итоге, полный переход на новую версию получился безболезненным. На каждой итерации выявлялись проблемные места и не учтённые сценарий. Большая часть из них решалась, от небольшой части осознанно отказывались.\r\n\r\nСтарая версия сайта постепенно была отключена, когда количество её пользователей стало совсем небольшим.\r\n\r\nОбщая оценка редизайна была оценена как успешная. Как со стороны клиентов, так и со стороны сотрудников. Поставленные перед редизайном цели были достигнуты:\r\n\r\n- **Уменьшилась нагрузка на саппорт-инженеров.**\r\n    - Пользователи стали чаще находить решения самостоятельно: улучшен движок поиска, предлагаются релевантные ссылки при создании тикета, улучшена фильтрация.\r\n    - Пользователи стали реже ошибаться с выбором платформы/продукта и других деталей при создании тикета.\r\n    - Во внутреннем портале появились инструменты, помогающие саппорт-инженерам быстрее отвечать на тикеты, ответ на которые уже давался ранее.\r\n- **Не отформатированные тикеты появляются гораздо реже.** Решилась проблема с тем, что пользователи не понимали, как отправлять аттачи.\r\n- **Уменьшилось количество проблем, когда пользователи не получают уведомления вовремя.**\r\n    - В настройках уведомлений появился отдельный чекбокс, для получения уведомлений от саппорт-центра (раньше был единый чекбокс, для всех почтовых рассылок).\r\n    - Даже если пользователь отключил уведомления от таких рассылок, то саппорт-инженер будет об этом знать. И, если у пользователя возникают с этим проблемы, подсказать варианты решения.\r\n    - Сами почтовые уведомления стали понятнее, появилась возможность подключить браузерные уведомления.\r\n    - Появилась возможность подписать на рассылку на любой тикет со страницы этого тикета.\r\n- **Более точечно настроена аналитика.**\r\n    - Саппорт-инженер теперь может видеть карточку пользователя с историей посещений тикетов и документов в документации. Так инженер поддержки сразу может понять, какие ссылки есть смысл советовать, а какие — нет, так как пользователь их уже посещал.\r\n    - Добавлены ивенты на целевые действия.\r\n    - Созданный внутренние дашборды с анализом различных данных, необходимых для оценки поступаемого  количества тикетов и оценки эффективности саппорта.\r\n- **Поиск по тикетам стал гибче и проще.**\r\n    - Были докручены мета-теги, чтобы тикеты лучше искались поисковиками.\r\n    - Переосмыслены фильтры, добавлены готовые пресеты и возможность подписаться на созданный фильтр.\r\n    - Оптимизирована внутренняя страница поиска.\r\n- **Сделана мобильная версия клиентского портала.**', `Summary`='', `FormatterID`='neasden', `OriginalAlias`='support-center', `Uploads`='a:4:{i:0;s:24:\"/images/blog/1x/sc-1.png\";i:1;s:15:\"empty-image.jpg\";i:2;s:24:\"/images/blog/1x/sc-2.png\";i:5;s:24:\"/images/blog/1x/sc-3.png\";}', `IsPublished`='1', `IsCommentable`='0', `IsVisible`='1', `IsFavourite`='1', `Stamp`='1711383800', `LastModified`='1711828881', `Offset`='14400', `IsDST`='0', `IsIndexed`='1', `IsExternal`='0', `ReadCount`='4', `SourceID`='0', `SourceNoteID`='0', `SourceNoteURL`='', `SourceNoteJSONURL`='', `SourceNoteData`='' WHERE `SubsetID`=1 AND (`ID`=1);

UPDATE `e2BlogAliases` SET `EntityType`='n', `EntityID`='1', `Alias`='support-center', `Stamp`='1711829810' WHERE `SubsetID`=1 AND (`ID`=1);

UPDATE `e2BlogNotes` SET `SubsetID`='1', `Title`='Support Center', `Text`='Система поддержки пользователей. Включает различные информационные ресурсы: вопросы от пользователей, статьи в базе знаний и истории версий.\r\n\r\nЕжедневно в Support Center создаются сотни новых вопросов и на них отвечают десятки саппорт-инженеров. За годы работы старый интерфейс устарел как внешне, так и с точки зрения удобства и функциональности. Пришла задача полностью переработать платформу, с учётом всех бизнес-требований.\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/sc-1.png\" srcset=\"/images/blog/1x/sc-1.png 1x, /images/blog/2x/sc-1@2x.png 2x\" class=\"img-fluid\">\r\n\r\n# Вводная\r\n\r\nСистема состоит из трёх основных порталов:\r\n\r\n- Клиентский портал\r\n- Внутренний портал для сотрудников\r\n- Админ-панель\r\n\r\nКаждым порталом пользуется свой сегмент пользователей. Клиенты компании ожидают простой и понятный интерфейс . В то время как саппорт-инженеры привыкли к определенным сценариям, которые тоже нужно было сохранить.\r\n\r\n# Клиентский портал\r\n\r\nНа этот ресурс были задействованы основные силы. Клиентский портал даёт возможность клиентам задавать вопросы технического характера и получать на них ответы. \r\n\r\nПеред редизайном ставились следующие задачи:\r\n\r\n- **Снизить нагрузку на саппорт-инженеров.** Помочь пользователям находить ответы самостоятельно, если на вопрос уже отвечали ранее или решение описано в документации.\r\n- **Улучшить UX.** Накопился список проблем, которые нужно было решать:\r\n    - **Пользователи выбирают неверный продукт при создании вопроса.** DevExpress разрабатывает и поддерживает десятки продуктов. У каждого продукта могут быть разные платформы и версии. Иногда важно знать, какая ОС установлена у пользователя, каким IDE он пользуется. Нужно было сделать так, чтобы у пользователя не возникали проблемы при выборе нужных значений. Помочь ему на этом пути.\r\n    - **Возникают проблемы при форматировании текста.** Пользователи приходят в поддержку с техническими проблемами. Описание проблемы содержит куски кода или целые архивы с проектами. В старой версии сайта пользователи путались в текстовом редакторе и отправляли не отформатированные куски куда, которые сливались с обычным текстом. Также, пользователи не всегда понимали как аттачить файлы. Всё это приводило к дополнительной нагрузке на саппорт-инженеров.\r\n    - **Пользователи не замечают уведомления об ответах в их тикете.** Проблема касалась как веб-интерфейса, так и уведомлений приходящих пользователю на почту. Пользователи либо не замечали уведомления, либо не понимали к чему они относятся, либо ранее отключали уведомления и забывали об этом. В связи с этим, среднее время на решение таких тикетов значительно увеличивалось.\r\n    - **Клиенты из одной и той же компании не видят вопросы друг друга.** Большинство клиентов предпочитает оставлять свои вопросы приватно. Чтобы их могли видеть только саппорт-инженеры. Из-за этого возникала проблема, что вопросы становились приватными полностью и их не могли видеть даже сотрудники одной и той же компании с разных аккаунтов.\r\n    - **Неудобные фильтры.** Пользователи, что на странице со списком публичных тикетов невозможно ничего найти. Фильтров мало, а то, что есть не всегда работает очевидным образом.\r\n- **Переосмыслить встроенный инструмент “Version History”.**\r\n- **Улучшить аналитику.**\r\n- **Освежить внешний вид.**\r\n\r\n## Подготовка к работе\r\n\r\nПеред началом работы над редизайном была проведена подготовительная работы. Подготовлен общий план работы и проведены встречи со всеми заинтересованными лицами. Был подготовлен итоговый бриф проекта. \r\n\r\nЧасть работ, которые были проведены на этом этапе:\r\n\r\n- **Анализ текущего дизайна.** UX-тестирование текущего сайта, поиск проблем.\r\n- **Ресёрч конкурентов.** Изучение как прямых конкурентов, так и решений крупных платформ. Например, Zendesk, Freshdesk, Zoho Desk.\r\n- **Сбор и анализ существующего фидбека.** За годы работы, накопилось большое количество тикетов, комментарием и другой обратной связи касаемо работы портала. Была проведена большая работу по сбору всей это информации в один документ, её анализу и приоритизации.\r\n- **Сбор информации от саппорт-инженеров.** Инженеры поддержки активнее всего общаются с пользователями и знают детали и проблемы, которые могут быть неизвестны и неочевидны другим членам команды.\r\n- **Изучение текущих данных аналитики и список того, что хотим собирать ещё в новом дизайне.** Для работы с данными использовались:  Google Analytics (+Google Tag Manager), Matomo, внутренние инструменты.\r\n- **Сбор требований от заказчиков и всех заинтересованных лиц.**\r\n- **Подготовка брифа.** Описание проблем, целей и задач. Развёрнутый ответ на вопрос, что мы будем считать успешным редизайном.\r\n\r\n## Процесс\r\n\r\nРабота над сайтом строилась 2-4 недельными спринтами. В конце каждого спринта проводились синхронизационные встречи с заказчиками. \r\n\r\nВ начале работы над дизайном была согласована общая концепция. Отрисованы низко детализированные прототипы с решением основных UX проблем. Найден общий подход к внешнему виду.  \r\n\r\nЧтобы работа над новым дизайном была эффективной и обратная связь поступала как можно быстрее был принят рад мер:\r\n\r\n- Продукт менеджер продукта показывал прототипы и просто картинки небольшой выборке самых активных и заинтересованных пользователей саппорт-центра. Благодаря этому получалось очень быстро собрать много полезной информации, которая помогала намного быстрее замечать точки роста.\r\n- Тесное общение с разработчиками. Так дизайн значительно обгонял разработку, нужно было сразу учитывать технические ограничения. Для этого проводились постоянные встречи между разработчикам, заказчиками и дизайнером. Так мы оценивали техническую сложность каждой фичи и на основе этого принимали решение, будем мы брать её в работу или нет.\r\n- На этапе, когда появилась первая работающая версия сайта, его стали тестировать сотрудники. В первую очередь, к тестированию подключались саппорт-инженеры. На этом этапе было собрано большое количество фидбека как по техническим багам, визуальным багам, так и просто по неудачным UX-решениям.\r\n- На следующем этапе снова к фидбеку снова были подключены активные клиенты. Которые были готовы дать развёрнутый фидбек.\r\n- На одном из финальных этапов сайт стал доступен для всех пользователей, но в виде бета-версии. При этом, каждый пользователь мог вернуться к старой версии сайта. Со временем, пользователей вернувшихся на старый сайт становилось меньше. Также, мы старались собирать фидбек от таких пользователей. Чтобы понять, почему они вернулись на старую версию сайта.\r\n- К новой версии сайта была прикручена продвинутая аналитика.\r\n\r\n## Примеры реализации\r\n\r\n### Релевантные подсказки при создании тикета\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/sc-2.png\" srcset=\"/images/blog/1x/sc-2.png 1x, /images/blog/2x/sc-2@2x.png 2x\" class=\"img-fluid\">\r\n\r\n### Упрощена навигация по дискуссии с ветвистой иерархией\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/sc-3.png\" srcset=\"/images/blog/1x/sc-3.png 1x, /images/blog/2x/sc-3@2x.png 2x\" class=\"img-fluid\">\r\n\r\n### Обновлены инструменты фильтра на странице со списком тикетов\r\n\r\n### Обновлены почтовые уведомлению, улучшения подписка на уведомления на самом сайте\r\n\r\n# Внутренний портал и админ-панель\r\n\r\nОтдельной крупной задачей была необходимость сделать внутренний портал для сотрудников. Главным вызовом было задача учесть флоу саппорт-инженеров из разных команд. Ингода оно сильно отличалось и нужно было найти решения, которые устроят всех.\r\n\r\nДля этого проводилось множество сложных встреч с саппорт-инженерами из разных команд и топ-саппортом. По каким-то сценариям приходилось идти на компромиссы, по каким-то — выбирать один вариант и убеждать в правильности этого варианта остальных.\r\n\r\nВ результате, судя по опросам и личным разговорам, большая часть сотрудников осталась довольна новой системой.\r\n\r\nТакже, для более гибкой работы и настройки системы под текущие нужды бизнеса была спроектирована админ-панель, где можно точечно настроить различные параметры системы.\r\n\r\nТак как решения внутренние, вдаваться в подробности и показывать скриншоты я не могу.  \r\n\r\n# Результаты\r\n\r\nВ итоге, полный переход на новую версию получился безболезненным. На каждой итерации выявлялись проблемные места и не учтённые сценарий. Большая часть из них решалась, от небольшой части осознанно отказывались.\r\n\r\nСтарая версия сайта постепенно была отключена, когда количество её пользователей стало совсем небольшим.\r\n\r\nОбщая оценка редизайна была оценена как успешная. Как со стороны клиентов, так и со стороны сотрудников. Поставленные перед редизайном цели были достигнуты:\r\n\r\n- **Уменьшилась нагрузка на саппорт-инженеров.**\r\n    - Пользователи стали чаще находить решения самостоятельно: улучшен движок поиска, предлагаются релевантные ссылки при создании тикета, улучшена фильтрация.\r\n    - Пользователи стали реже ошибаться с выбором платформы/продукта и других деталей при создании тикета.\r\n    - Во внутреннем портале появились инструменты, помогающие саппорт-инженерам быстрее отвечать на тикеты, ответ на которые уже давался ранее.\r\n- **Не отформатированные тикеты появляются гораздо реже.** Решилась проблема с тем, что пользователи не понимали, как отправлять аттачи.\r\n- **Уменьшилось количество проблем, когда пользователи не получают уведомления вовремя.**\r\n    - В настройках уведомлений появился отдельный чекбокс, для получения уведомлений от саппорт-центра (раньше был единый чекбокс, для всех почтовых рассылок).\r\n    - Даже если пользователь отключил уведомления от таких рассылок, то саппорт-инженер будет об этом знать. И, если у пользователя возникают с этим проблемы, подсказать варианты решения.\r\n    - Сами почтовые уведомления стали понятнее, появилась возможность подключить браузерные уведомления.\r\n    - Появилась возможность подписать на рассылку на любой тикет со страницы этого тикета.\r\n- **Более точечно настроена аналитика.**\r\n    - Саппорт-инженер теперь может видеть карточку пользователя с историей посещений тикетов и документов в документации. Так инженер поддержки сразу может понять, какие ссылки есть смысл советовать, а какие — нет, так как пользователь их уже посещал.\r\n    - Добавлены ивенты на целевые действия.\r\n    - Созданный внутренние дашборды с анализом различных данных, необходимых для оценки поступаемого  количества тикетов и оценки эффективности саппорта.\r\n- **Поиск по тикетам стал гибче и проще.**\r\n    - Были докручены мета-теги, чтобы тикеты лучше искались поисковиками.\r\n    - Переосмыслены фильтры, добавлены готовые пресеты и возможность подписаться на созданный фильтр.\r\n    - Оптимизирована внутренняя страница поиска.\r\n- **Сделана мобильная версия клиентского портала.**', `Summary`='', `FormatterID`='neasden', `OriginalAlias`='support-center', `Uploads`='a:4:{i:0;s:24:\"/images/blog/1x/sc-1.png\";i:1;s:15:\"empty-image.jpg\";i:2;s:24:\"/images/blog/1x/sc-2.png\";i:5;s:24:\"/images/blog/1x/sc-3.png\";}', `IsPublished`='1', `IsCommentable`='0', `IsVisible`='1', `IsFavourite`='1', `Stamp`='1711383800', `LastModified`='1711829810', `Offset`='14400', `IsDST`='0', `IsIndexed`='0', `IsExternal`='0', `ReadCount`='4', `SourceID`='0', `SourceNoteID`='0', `SourceNoteURL`='', `SourceNoteJSONURL`='', `SourceNoteData`='' WHERE `SubsetID`=1 AND (`ID`=1);

UPDATE `e2BlogNotes` SET `SubsetID`='1', `Title`='Support Center', `Text`='Система поддержки пользователей. Включает различные информационные ресурсы: вопросы от пользователей, статьи в базе знаний и истории версий.\r\n\r\nЕжедневно в Support Center создаются сотни новых вопросов и на них отвечают десятки саппорт-инженеров. За годы работы старый интерфейс устарел как внешне, так и с точки зрения удобства и функциональности. Пришла задача полностью переработать платформу, с учётом всех бизнес-требований.\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/sc-1.png\" srcset=\"/images/blog/1x/sc-1.png 1x, /images/blog/2x/sc-1@2x.png 2x\" class=\"img-fluid\">\r\n\r\n# Вводная\r\n\r\nСистема состоит из трёх основных порталов:\r\n\r\n- Клиентский портал\r\n- Внутренний портал для сотрудников\r\n- Админ-панель\r\n\r\nКаждым порталом пользуется свой сегмент пользователей. Клиенты компании ожидают простой и понятный интерфейс . В то время как саппорт-инженеры привыкли к определенным сценариям, которые тоже нужно было сохранить.\r\n\r\n# Клиентский портал\r\n\r\nНа этот ресурс были задействованы основные силы. Клиентский портал даёт возможность клиентам задавать вопросы технического характера и получать на них ответы. \r\n\r\nПеред редизайном ставились следующие задачи:\r\n\r\n- **Снизить нагрузку на саппорт-инженеров.** Помочь пользователям находить ответы самостоятельно, если на вопрос уже отвечали ранее или решение описано в документации.\r\n- **Улучшить UX.** Накопился список проблем, которые нужно было решать:\r\n    - **Пользователи выбирают неверный продукт при создании вопроса.** DevExpress разрабатывает и поддерживает десятки продуктов. У каждого продукта могут быть разные платформы и версии. Иногда важно знать, какая ОС установлена у пользователя, каким IDE он пользуется. Нужно было сделать так, чтобы у пользователя не возникали проблемы при выборе нужных значений. Помочь ему на этом пути.\r\n    - **Возникают проблемы при форматировании текста.** Пользователи приходят в поддержку с техническими проблемами. Описание проблемы содержит куски кода или целые архивы с проектами. В старой версии сайта пользователи путались в текстовом редакторе и отправляли не отформатированные куски куда, которые сливались с обычным текстом. Также, пользователи не всегда понимали как аттачить файлы. Всё это приводило к дополнительной нагрузке на саппорт-инженеров.\r\n    - **Пользователи не замечают уведомления об ответах в их тикете.** Проблема касалась как веб-интерфейса, так и уведомлений приходящих пользователю на почту. Пользователи либо не замечали уведомления, либо не понимали к чему они относятся, либо ранее отключали уведомления и забывали об этом. В связи с этим, среднее время на решение таких тикетов значительно увеличивалось.\r\n    - **Клиенты из одной и той же компании не видят вопросы друг друга.** Большинство клиентов предпочитает оставлять свои вопросы приватно. Чтобы их могли видеть только саппорт-инженеры. Из-за этого возникала проблема, что вопросы становились приватными полностью и их не могли видеть даже сотрудники одной и той же компании с разных аккаунтов.\r\n    - **Неудобные фильтры.** Пользователи, что на странице со списком публичных тикетов невозможно ничего найти. Фильтров мало, а то, что есть не всегда работает очевидным образом.\r\n- **Переосмыслить встроенный инструмент “Version History”.**\r\n- **Улучшить аналитику.**\r\n- **Освежить внешний вид.**\r\n\r\n## Подготовка к работе\r\n\r\nПеред началом работы над редизайном была проведена подготовительная работы. Подготовлен общий план работы и проведены встречи со всеми заинтересованными лицами. Был подготовлен итоговый бриф проекта. \r\n\r\nЧасть работ, которые были проведены на этом этапе:\r\n\r\n- **Анализ текущего дизайна.** UX-тестирование текущего сайта, поиск проблем.\r\n- **Ресёрч конкурентов.** Изучение как прямых конкурентов, так и решений крупных платформ. Например, Zendesk, Freshdesk, Zoho Desk.\r\n- **Сбор и анализ существующего фидбека.** За годы работы, накопилось большое количество тикетов, комментарием и другой обратной связи касаемо работы портала. Была проведена большая работу по сбору всей это информации в один документ, её анализу и приоритизации.\r\n- **Сбор информации от саппорт-инженеров.** Инженеры поддержки активнее всего общаются с пользователями и знают детали и проблемы, которые могут быть неизвестны и неочевидны другим членам команды.\r\n- **Изучение текущих данных аналитики и список того, что хотим собирать ещё в новом дизайне.** Для работы с данными использовались:  Google Analytics (+Google Tag Manager), Matomo, внутренние инструменты.\r\n- **Сбор требований от заказчиков и всех заинтересованных лиц.**\r\n- **Подготовка брифа.** Описание проблем, целей и задач. Развёрнутый ответ на вопрос, что мы будем считать успешным редизайном.\r\n\r\n## Процесс\r\n\r\nРабота над сайтом строилась 2-4 недельными спринтами. В конце каждого спринта проводились синхронизационные встречи с заказчиками. \r\n\r\nВ начале работы над дизайном была согласована общая концепция. Отрисованы низко детализированные прототипы с решением основных UX проблем. Найден общий подход к внешнему виду.  \r\n\r\nЧтобы работа над новым дизайном была эффективной и обратная связь поступала как можно быстрее был принят рад мер:\r\n\r\n- Продукт менеджер продукта показывал прототипы и просто картинки небольшой выборке самых активных и заинтересованных пользователей саппорт-центра. Благодаря этому получалось очень быстро собрать много полезной информации, которая помогала намного быстрее замечать точки роста.\r\n- Тесное общение с разработчиками. Так дизайн значительно обгонял разработку, нужно было сразу учитывать технические ограничения. Для этого проводились постоянные встречи между разработчикам, заказчиками и дизайнером. Так мы оценивали техническую сложность каждой фичи и на основе этого принимали решение, будем мы брать её в работу или нет.\r\n- На этапе, когда появилась первая работающая версия сайта, его стали тестировать сотрудники. В первую очередь, к тестированию подключались саппорт-инженеры. На этом этапе было собрано большое количество фидбека как по техническим багам, визуальным багам, так и просто по неудачным UX-решениям.\r\n- На следующем этапе снова к фидбеку снова были подключены активные клиенты. Которые были готовы дать развёрнутый фидбек.\r\n- На одном из финальных этапов сайт стал доступен для всех пользователей, но в виде бета-версии. При этом, каждый пользователь мог вернуться к старой версии сайта. Со временем, пользователей вернувшихся на старый сайт становилось меньше. Также, мы старались собирать фидбек от таких пользователей. Чтобы понять, почему они вернулись на старую версию сайта.\r\n- К новой версии сайта была прикручена продвинутая аналитика.\r\n\r\n## Примеры реализации\r\n\r\n### Релевантные подсказки при создании тикета\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/sc-2.png\" srcset=\"/images/blog/1x/sc-2.png 1x, /images/blog/2x/sc-2@2x.png 2x\" class=\"img-fluid\">\r\n\r\n### Упрощена навигация по дискуссии с ветвистой иерархией\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/sc-3.png\" srcset=\"/images/blog/1x/sc-3.png 1x, /images/blog/2x/sc-3@2x.png 2x\" class=\"img-fluid\">\r\n\r\n### Обновлены инструменты фильтра на странице со списком тикетов\r\n\r\n### Обновлены почтовые уведомлению, улучшения подписка на уведомления на самом сайте\r\n\r\n# Внутренний портал и админ-панель\r\n\r\nОтдельной крупной задачей была необходимость сделать внутренний портал для сотрудников. Главным вызовом было задача учесть флоу саппорт-инженеров из разных команд. Ингода оно сильно отличалось и нужно было найти решения, которые устроят всех.\r\n\r\nДля этого проводилось множество сложных встреч с саппорт-инженерами из разных команд и топ-саппортом. По каким-то сценариям приходилось идти на компромиссы, по каким-то — выбирать один вариант и убеждать в правильности этого варианта остальных.\r\n\r\nВ результате, судя по опросам и личным разговорам, большая часть сотрудников осталась довольна новой системой.\r\n\r\nТакже, для более гибкой работы и настройки системы под текущие нужды бизнеса была спроектирована админ-панель, где можно точечно настроить различные параметры системы.\r\n\r\nТак как решения внутренние, вдаваться в подробности и показывать скриншоты я не могу.  \r\n\r\n# Результаты\r\n\r\nВ итоге, полный переход на новую версию получился безболезненным. На каждой итерации выявлялись проблемные места и не учтённые сценарий. Большая часть из них решалась, от небольшой части осознанно отказывались.\r\n\r\nСтарая версия сайта постепенно была отключена, когда количество её пользователей стало совсем небольшим.\r\n\r\nОбщая оценка редизайна была оценена как успешная. Как со стороны клиентов, так и со стороны сотрудников. Поставленные перед редизайном цели были достигнуты:\r\n\r\n- **Уменьшилась нагрузка на саппорт-инженеров.**\r\n    - Пользователи стали чаще находить решения самостоятельно: улучшен движок поиска, предлагаются релевантные ссылки при создании тикета, улучшена фильтрация.\r\n    - Пользователи стали реже ошибаться с выбором платформы/продукта и других деталей при создании тикета.\r\n    - Во внутреннем портале появились инструменты, помогающие саппорт-инженерам быстрее отвечать на тикеты, ответ на которые уже давался ранее.\r\n- **Не отформатированные тикеты появляются гораздо реже.** Решилась проблема с тем, что пользователи не понимали, как отправлять аттачи.\r\n- **Уменьшилось количество проблем, когда пользователи не получают уведомления вовремя.**\r\n    - В настройках уведомлений появился отдельный чекбокс, для получения уведомлений от саппорт-центра (раньше был единый чекбокс, для всех почтовых рассылок).\r\n    - Даже если пользователь отключил уведомления от таких рассылок, то саппорт-инженер будет об этом знать. И, если у пользователя возникают с этим проблемы, подсказать варианты решения.\r\n    - Сами почтовые уведомления стали понятнее, появилась возможность подключить браузерные уведомления.\r\n    - Появилась возможность подписать на рассылку на любой тикет со страницы этого тикета.\r\n- **Более точечно настроена аналитика.**\r\n    - Саппорт-инженер теперь может видеть карточку пользователя с историей посещений тикетов и документов в документации. Так инженер поддержки сразу может понять, какие ссылки есть смысл советовать, а какие — нет, так как пользователь их уже посещал.\r\n    - Добавлены ивенты на целевые действия.\r\n    - Созданный внутренние дашборды с анализом различных данных, необходимых для оценки поступаемого  количества тикетов и оценки эффективности саппорта.\r\n- **Поиск по тикетам стал гибче и проще.**\r\n    - Были докручены мета-теги, чтобы тикеты лучше искались поисковиками.\r\n    - Переосмыслены фильтры, добавлены готовые пресеты и возможность подписаться на созданный фильтр.\r\n    - Оптимизирована внутренняя страница поиска.\r\n- **Сделана мобильная версия клиентского портала.**', `Summary`='', `FormatterID`='neasden', `OriginalAlias`='support-center', `Uploads`='a:4:{i:0;s:24:\"/images/blog/1x/sc-1.png\";i:1;s:15:\"empty-image.jpg\";i:2;s:24:\"/images/blog/1x/sc-2.png\";i:5;s:24:\"/images/blog/1x/sc-3.png\";}', `IsPublished`='1', `IsCommentable`='0', `IsVisible`='1', `IsFavourite`='1', `Stamp`='1711383800', `LastModified`='1711829810', `Offset`='14400', `IsDST`='0', `IsIndexed`='1', `IsExternal`='0', `ReadCount`='4', `SourceID`='0', `SourceNoteID`='0', `SourceNoteURL`='', `SourceNoteJSONURL`='', `SourceNoteData`='' WHERE `SubsetID`=1 AND (`ID`=1);

UPDATE `e2BlogNotes` SET `SubsetID`='1', `Title`='Support Center', `Text`='Система поддержки пользователей. Включает различные информационные ресурсы: вопросы от пользователей, статьи в базе знаний и истории версий.\r\n\r\nЕжедневно в Support Center создаются сотни новых вопросов и на них отвечают десятки саппорт-инженеров. За годы работы старый интерфейс устарел как внешне, так и с точки зрения удобства и функциональности. Пришла задача полностью переработать платформу, с учётом всех бизнес-требований.\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/sc-1.png\" srcset=\"/images/blog/1x/sc-1.png 1x, /images/blog/2x/sc-1@2x.png 2x\" class=\"img-fluid\">\r\n\r\n# Вводная\r\n\r\nСистема состоит из трёх основных порталов:\r\n\r\n- Клиентский портал\r\n- Внутренний портал для сотрудников\r\n- Админ-панель\r\n\r\nКаждым порталом пользуется свой сегмент пользователей. Клиенты компании ожидают простой и понятный интерфейс . В то время как саппорт-инженеры привыкли к определенным сценариям, которые тоже нужно было сохранить.\r\n\r\n# Клиентский портал\r\n\r\nНа этот ресурс были задействованы основные силы. Клиентский портал даёт возможность клиентам задавать вопросы технического характера и получать на них ответы. \r\n\r\nПеред редизайном ставились следующие задачи:\r\n\r\n- **Снизить нагрузку на саппорт-инженеров.** Помочь пользователям находить ответы самостоятельно, если на вопрос уже отвечали ранее или решение описано в документации.\r\n- **Улучшить UX.** Накопился список проблем, которые нужно было решать:\r\n    - **Пользователи выбирают неверный продукт при создании вопроса.** DevExpress разрабатывает и поддерживает десятки продуктов. У каждого продукта могут быть разные платформы и версии. Иногда важно знать, какая ОС установлена у пользователя, каким IDE он пользуется. Нужно было сделать так, чтобы у пользователя не возникали проблемы при выборе нужных значений. Помочь ему на этом пути.\r\n    - **Возникают проблемы при форматировании текста.** Пользователи приходят в поддержку с техническими проблемами. Описание проблемы содержит куски кода или целые архивы с проектами. В старой версии сайта пользователи путались в текстовом редакторе и отправляли не отформатированные куски куда, которые сливались с обычным текстом. Также, пользователи не всегда понимали как аттачить файлы. Всё это приводило к дополнительной нагрузке на саппорт-инженеров.\r\n    - **Пользователи не замечают уведомления об ответах в их тикете.** Проблема касалась как веб-интерфейса, так и уведомлений приходящих пользователю на почту. Пользователи либо не замечали уведомления, либо не понимали к чему они относятся, либо ранее отключали уведомления и забывали об этом. В связи с этим, среднее время на решение таких тикетов значительно увеличивалось.\r\n    - **Клиенты из одной и той же компании не видят вопросы друг друга.** Большинство клиентов предпочитает оставлять свои вопросы приватно. Чтобы их могли видеть только саппорт-инженеры. Из-за этого возникала проблема, что вопросы становились приватными полностью и их не могли видеть даже сотрудники одной и той же компании с разных аккаунтов.\r\n    - **Неудобные фильтры.** Пользователи, что на странице со списком публичных тикетов невозможно ничего найти. Фильтров мало, а то, что есть не всегда работает очевидным образом.\r\n- **Переосмыслить встроенный инструмент “Version History”.**\r\n- **Улучшить аналитику.**\r\n- **Освежить внешний вид.**\r\n\r\n## Подготовка к работе\r\n\r\nПеред началом работы над редизайном была проведена подготовительная работы. Подготовлен общий план работы и проведены встречи со всеми заинтересованными лицами. Был подготовлен итоговый бриф проекта. \r\n\r\nЧасть работ, которые были проведены на этом этапе:\r\n\r\n- **Анализ текущего дизайна.** UX-тестирование текущего сайта, поиск проблем.\r\n- **Ресёрч конкурентов.** Изучение как прямых конкурентов, так и решений крупных платформ. Например, Zendesk, Freshdesk, Zoho Desk.\r\n- **Сбор и анализ существующего фидбека.** За годы работы, накопилось большое количество тикетов, комментарием и другой обратной связи касаемо работы портала. Была проведена большая работу по сбору всей это информации в один документ, её анализу и приоритизации.\r\n- **Сбор информации от саппорт-инженеров.** Инженеры поддержки активнее всего общаются с пользователями и знают детали и проблемы, которые могут быть неизвестны и неочевидны другим членам команды.\r\n- **Изучение текущих данных аналитики и список того, что хотим собирать ещё в новом дизайне.** Для работы с данными использовались:  Google Analytics (+Google Tag Manager), Matomo, внутренние инструменты.\r\n- **Сбор требований от заказчиков и всех заинтересованных лиц.**\r\n- **Подготовка брифа.** Описание проблем, целей и задач. Развёрнутый ответ на вопрос, что мы будем считать успешным редизайном.\r\n\r\n## Процесс\r\n\r\nРабота над сайтом строилась 2-4 недельными спринтами. В конце каждого спринта проводились синхронизационные встречи с заказчиками. \r\n\r\nВ начале работы над дизайном была согласована общая концепция. Отрисованы низко детализированные прототипы с решением основных UX проблем. Найден общий подход к внешнему виду.  \r\n\r\nЧтобы работа над новым дизайном была эффективной и обратная связь поступала как можно быстрее был принят рад мер:\r\n\r\n- Продукт менеджер продукта показывал прототипы и просто картинки небольшой выборке самых активных и заинтересованных пользователей саппорт-центра. Благодаря этому получалось очень быстро собрать много полезной информации, которая помогала намного быстрее замечать точки роста.\r\n- Тесное общение с разработчиками. Так дизайн значительно обгонял разработку, нужно было сразу учитывать технические ограничения. Для этого проводились постоянные встречи между разработчикам, заказчиками и дизайнером. Так мы оценивали техническую сложность каждой фичи и на основе этого принимали решение, будем мы брать её в работу или нет.\r\n- На этапе, когда появилась первая работающая версия сайта, его стали тестировать сотрудники. В первую очередь, к тестированию подключались саппорт-инженеры. На этом этапе было собрано большое количество фидбека как по техническим багам, визуальным багам, так и просто по неудачным UX-решениям.\r\n- На следующем этапе снова к фидбеку снова были подключены активные клиенты. Которые были готовы дать развёрнутый фидбек.\r\n- На одном из финальных этапов сайт стал доступен для всех пользователей, но в виде бета-версии. При этом, каждый пользователь мог вернуться к старой версии сайта. Со временем, пользователей вернувшихся на старый сайт становилось меньше. Также, мы старались собирать фидбек от таких пользователей. Чтобы понять, почему они вернулись на старую версию сайта.\r\n- К новой версии сайта была прикручена продвинутая аналитика.\r\n\r\n## Примеры реализации\r\n\r\n### Релевантные подсказки при создании тикета\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/sc-2.png\" srcset=\"/images/blog/1x/sc-2.png 1x, /images/blog/2x/sc-2@2x.png 2x\" class=\"img-fluid\">\r\n\r\n### Упрощена навигация по дискуссии с ветвистой иерархией\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/sc-3.png\" srcset=\"/images/blog/1x/sc-3.png 1x, /images/blog/2x/sc-3@2x.png 2x\" class=\"img-fluid\">\r\n\r\n### Обновлены инструменты фильтра на странице со списком тикетов\r\n\r\n### Обновлены почтовые уведомлению, улучшения подписка на уведомления на самом сайте\r\n\r\n# Внутренний портал и админ-панель\r\n\r\nОтдельной крупной задачей была необходимость сделать внутренний портал для сотрудников. Главным вызовом было задача учесть флоу саппорт-инженеров из разных команд. Ингода оно сильно отличалось и нужно было найти решения, которые устроят всех.\r\n\r\nДля этого проводилось множество сложных встреч с саппорт-инженерами из разных команд и топ-саппортом. По каким-то сценариям приходилось идти на компромиссы, по каким-то — выбирать один вариант и убеждать в правильности этого варианта остальных.\r\n\r\nВ результате, судя по опросам и личным разговорам, большая часть сотрудников осталась довольна новой системой.\r\n\r\nТакже, для более гибкой работы и настройки системы под текущие нужды бизнеса была спроектирована админ-панель, где можно точечно настроить различные параметры системы.\r\n\r\nТак как решения внутренние, вдаваться в подробности и показывать скриншоты я не могу.  \r\n\r\n# Результаты\r\n\r\nВ итоге, полный переход на новую версию получился безболезненным. На каждой итерации выявлялись проблемные места и не учтённые сценарий. Большая часть из них решалась, от небольшой части осознанно отказывались.\r\n\r\nСтарая версия сайта постепенно была отключена, когда количество её пользователей стало совсем небольшим.\r\n\r\nОбщая оценка редизайна была оценена как успешная. Как со стороны клиентов, так и со стороны сотрудников. Поставленные перед редизайном цели были достигнуты:\r\n\r\n- **Уменьшилась нагрузка на саппорт-инженеров.**\r\n    - Пользователи стали чаще находить решения самостоятельно: улучшен движок поиска, предлагаются релевантные ссылки при создании тикета, улучшена фильтрация.\r\n    - Пользователи стали реже ошибаться с выбором платформы/продукта и других деталей при создании тикета.\r\n    - Во внутреннем портале появились инструменты, помогающие саппорт-инженерам быстрее отвечать на тикеты, ответ на которые уже давался ранее.\r\n- **Не отформатированные тикеты появляются гораздо реже.** Решилась проблема с тем, что пользователи не понимали, как отправлять аттачи.\r\n- **Уменьшилось количество проблем, когда пользователи не получают уведомления вовремя.**\r\n    - В настройках уведомлений появился отдельный чекбокс, для получения уведомлений от саппорт-центра (раньше был единый чекбокс, для всех почтовых рассылок).\r\n    - Даже если пользователь отключил уведомления от таких рассылок, то саппорт-инженер будет об этом знать. И, если у пользователя возникают с этим проблемы, подсказать варианты решения.\r\n    - Сами почтовые уведомления стали понятнее, появилась возможность подключить браузерные уведомления.\r\n    - Появилась возможность подписать на рассылку на любой тикет со страницы этого тикета.\r\n- **Более точечно настроена аналитика.**\r\n    - Саппорт-инженер теперь может видеть карточку пользователя с историей посещений тикетов и документов в документации. Так инженер поддержки сразу может понять, какие ссылки есть смысл советовать, а какие — нет, так как пользователь их уже посещал.\r\n    - Добавлены ивенты на целевые действия.\r\n    - Созданный внутренние дашборды с анализом различных данных, необходимых для оценки поступаемого  количества тикетов и оценки эффективности саппорта.\r\n- **Поиск по тикетам стал гибче и проще.**\r\n    - Были докручены мета-теги, чтобы тикеты лучше искались поисковиками.\r\n    - Переосмыслены фильтры, добавлены готовые пресеты и возможность подписаться на созданный фильтр.\r\n    - Оптимизирована внутренняя страница поиска.\r\n- **Сделана мобильная версия клиентского портала.**', `Summary`='', `FormatterID`='neasden', `OriginalAlias`='support-center', `Uploads`='a:4:{i:0;s:24:\"/images/blog/1x/sc-1.png\";i:1;s:15:\"empty-image.jpg\";i:2;s:24:\"/images/blog/1x/sc-2.png\";i:3;s:24:\"/images/blog/1x/sc-3.png\";}', `IsPublished`='1', `IsCommentable`='0', `IsVisible`='1', `IsFavourite`='1', `Stamp`='1711383800', `LastModified`='1711829810', `Offset`='14400', `IsDST`='0', `IsIndexed`='1', `IsExternal`='0', `ReadCount`='4', `SourceID`='0', `SourceNoteID`='0', `SourceNoteURL`='', `SourceNoteJSONURL`='', `SourceNoteData`='' WHERE `SubsetID`=1 AND (`ID`=1);

UPDATE `e2BlogAliases` SET `EntityType`='n', `EntityID`='1', `Alias`='support-center', `Stamp`='1711830224' WHERE `SubsetID`=1 AND (`ID`=1);

UPDATE `e2BlogNotes` SET `SubsetID`='1', `Title`='Support Center', `Text`='Система поддержки пользователей. Включает различные информационные ресурсы: вопросы от пользователей, статьи в базе знаний и истории версий.\r\n\r\nЕжедневно в Support Center создаются сотни новых вопросов и на них отвечают десятки саппорт-инженеров. За годы работы старый интерфейс устарел как внешне, так и с точки зрения удобства и функциональности. Пришла задача полностью переработать платформу, с учётом всех бизнес-требований.\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/sc-1.png\" srcset=\"/images/blog/1x/sc-1.png 1x, /images/blog/2x/sc-1@2x.png 2x\" class=\"img-fluid\">\r\n\r\n# Вводная\r\n\r\nСистема состоит из трёх основных порталов:\r\n\r\n- Клиентский портал\r\n- Внутренний портал для сотрудников\r\n- Админ-панель\r\n\r\nКаждым порталом пользуется свой сегмент пользователей. Клиенты компании ожидают простой и понятный интерфейс . В то время как саппорт-инженеры привыкли к определенным сценариям, которые тоже нужно было сохранить.\r\n\r\n# Клиентский портал\r\n\r\nНа этот ресурс были задействованы основные силы. Клиентский портал даёт возможность клиентам задавать вопросы технического характера и получать на них ответы. \r\n\r\nПеред редизайном ставились следующие задачи:\r\n\r\n- **Снизить нагрузку на саппорт-инженеров.** Помочь пользователям находить ответы самостоятельно, если на вопрос уже отвечали ранее или решение описано в документации.\r\n- **Улучшить UX.** Накопился список проблем, которые нужно было решать:\r\n    - **Пользователи выбирают неверный продукт при создании вопроса.** DevExpress разрабатывает и поддерживает десятки продуктов. У каждого продукта могут быть разные платформы и версии. Иногда важно знать, какая ОС установлена у пользователя, каким IDE он пользуется. Нужно было сделать так, чтобы у пользователя не возникали проблемы при выборе нужных значений. Помочь ему на этом пути.\r\n    - **Возникают проблемы при форматировании текста.** Пользователи приходят в поддержку с техническими проблемами. Описание проблемы содержит куски кода или целые архивы с проектами. В старой версии сайта пользователи путались в текстовом редакторе и отправляли не отформатированные куски куда, которые сливались с обычным текстом. Также, пользователи не всегда понимали как аттачить файлы. Всё это приводило к дополнительной нагрузке на саппорт-инженеров.\r\n    - **Пользователи не замечают уведомления об ответах в их тикете.** Проблема касалась как веб-интерфейса, так и уведомлений приходящих пользователю на почту. Пользователи либо не замечали уведомления, либо не понимали к чему они относятся, либо ранее отключали уведомления и забывали об этом. В связи с этим, среднее время на решение таких тикетов значительно увеличивалось.\r\n    - **Клиенты из одной и той же компании не видят вопросы друг друга.** Большинство клиентов предпочитает оставлять свои вопросы приватно. Чтобы их могли видеть только саппорт-инженеры. Из-за этого возникала проблема, что вопросы становились приватными полностью и их не могли видеть даже сотрудники одной и той же компании с разных аккаунтов.\r\n    - **Неудобные фильтры.** Пользователи, что на странице со списком публичных тикетов невозможно ничего найти. Фильтров мало, а то, что есть не всегда работает очевидным образом.\r\n- **Переосмыслить встроенный инструмент “Version History”.**\r\n- **Улучшить аналитику.**\r\n- **Освежить внешний вид.**\r\n\r\n## Подготовка к работе\r\n\r\nПеред началом работы над редизайном была проведена подготовительная работы. Подготовлен общий план работы и проведены встречи со всеми заинтересованными лицами. Был подготовлен итоговый бриф проекта. \r\n\r\nЧасть работ, которые были проведены на этом этапе:\r\n\r\n- **Анализ текущего дизайна.** UX-тестирование текущего сайта, поиск проблем.\r\n- **Ресёрч конкурентов.** Изучение как прямых конкурентов, так и решений крупных платформ. Например, Zendesk, Freshdesk, Zoho Desk.\r\n- **Сбор и анализ существующего фидбека.** За годы работы, накопилось большое количество тикетов, комментарием и другой обратной связи касаемо работы портала. Была проведена большая работу по сбору всей это информации в один документ, её анализу и приоритизации.\r\n- **Сбор информации от саппорт-инженеров.** Инженеры поддержки активнее всего общаются с пользователями и знают детали и проблемы, которые могут быть неизвестны и неочевидны другим членам команды.\r\n- **Изучение текущих данных аналитики и список того, что хотим собирать ещё в новом дизайне.** Для работы с данными использовались:  Google Analytics (+Google Tag Manager), Matomo, внутренние инструменты.\r\n- **Сбор требований от заказчиков и всех заинтересованных лиц.**\r\n- **Подготовка брифа.** Описание проблем, целей и задач. Развёрнутый ответ на вопрос, что мы будем считать успешным редизайном.\r\n\r\n## Процесс\r\n\r\nРабота над сайтом строилась 2-4 недельными спринтами. В конце каждого спринта проводились синхронизационные встречи с заказчиками. \r\n\r\nВ начале работы над дизайном была согласована общая концепция. Отрисованы низко детализированные прототипы с решением основных UX проблем. Найден общий подход к внешнему виду.  \r\n\r\nЧтобы работа над новым дизайном была эффективной и обратная связь поступала как можно быстрее был принят рад мер:\r\n\r\n- Продукт менеджер продукта показывал прототипы и просто картинки небольшой выборке самых активных и заинтересованных пользователей саппорт-центра. Благодаря этому получалось очень быстро собрать много полезной информации, которая помогала намного быстрее замечать точки роста.\r\n- Тесное общение с разработчиками. Так дизайн значительно обгонял разработку, нужно было сразу учитывать технические ограничения. Для этого проводились постоянные встречи между разработчикам, заказчиками и дизайнером. Так мы оценивали техническую сложность каждой фичи и на основе этого принимали решение, будем мы брать её в работу или нет.\r\n- На этапе, когда появилась первая работающая версия сайта, его стали тестировать сотрудники. В первую очередь, к тестированию подключались саппорт-инженеры. На этом этапе было собрано большое количество фидбека как по техническим багам, визуальным багам, так и просто по неудачным UX-решениям.\r\n- На следующем этапе снова к фидбеку снова были подключены активные клиенты. Которые были готовы дать развёрнутый фидбек.\r\n- На одном из финальных этапов сайт стал доступен для всех пользователей, но в виде бета-версии. При этом, каждый пользователь мог вернуться к старой версии сайта. Со временем, пользователей вернувшихся на старый сайт становилось меньше. Также, мы старались собирать фидбек от таких пользователей. Чтобы понять, почему они вернулись на старую версию сайта.\r\n- К новой версии сайта была прикручена продвинутая аналитика.\r\n\r\n## Примеры реализации\r\n\r\n### Релевантные подсказки при создании тикета\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/sc-2.png\" srcset=\"/images/blog/1x/sc-2.png 1x, /images/blog/2x/sc-2@2x.png 2x\" class=\"img-fluid\">\r\n\r\n### Упрощена навигация по дискуссии с ветвистой иерархией\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/sc-3.png\" srcset=\"/images/blog/1x/sc-3.png 1x, /images/blog/2x/sc-3@2x.png 2x\" class=\"img-fluid\">\r\n\r\n### Обновлены инструменты фильтра на странице со списком тикетов\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/sc-4.png\" srcset=\"/images/blog/1x/sc-4.png 1x, /images/blog/2x/sc-4@2x.png 2x\" class=\"img-fluid\">\r\n\r\n### Обновлены почтовые уведомлению, улучшения подписка на уведомления на самом сайте\r\n\r\n# Внутренний портал и админ-панель\r\n\r\nОтдельной крупной задачей была необходимость сделать внутренний портал для сотрудников. Главным вызовом было задача учесть флоу саппорт-инженеров из разных команд. Ингода оно сильно отличалось и нужно было найти решения, которые устроят всех.\r\n\r\nДля этого проводилось множество сложных встреч с саппорт-инженерами из разных команд и топ-саппортом. По каким-то сценариям приходилось идти на компромиссы, по каким-то — выбирать один вариант и убеждать в правильности этого варианта остальных.\r\n\r\nВ результате, судя по опросам и личным разговорам, большая часть сотрудников осталась довольна новой системой.\r\n\r\nТакже, для более гибкой работы и настройки системы под текущие нужды бизнеса была спроектирована админ-панель, где можно точечно настроить различные параметры системы.\r\n\r\nТак как решения внутренние, вдаваться в подробности и показывать скриншоты я не могу.  \r\n\r\n# Результаты\r\n\r\nВ итоге, полный переход на новую версию получился безболезненным. На каждой итерации выявлялись проблемные места и не учтённые сценарий. Большая часть из них решалась, от небольшой части осознанно отказывались.\r\n\r\nСтарая версия сайта постепенно была отключена, когда количество её пользователей стало совсем небольшим.\r\n\r\nОбщая оценка редизайна была оценена как успешная. Как со стороны клиентов, так и со стороны сотрудников. Поставленные перед редизайном цели были достигнуты:\r\n\r\n- **Уменьшилась нагрузка на саппорт-инженеров.**\r\n    - Пользователи стали чаще находить решения самостоятельно: улучшен движок поиска, предлагаются релевантные ссылки при создании тикета, улучшена фильтрация.\r\n    - Пользователи стали реже ошибаться с выбором платформы/продукта и других деталей при создании тикета.\r\n    - Во внутреннем портале появились инструменты, помогающие саппорт-инженерам быстрее отвечать на тикеты, ответ на которые уже давался ранее.\r\n- **Не отформатированные тикеты появляются гораздо реже.** Решилась проблема с тем, что пользователи не понимали, как отправлять аттачи.\r\n- **Уменьшилось количество проблем, когда пользователи не получают уведомления вовремя.**\r\n    - В настройках уведомлений появился отдельный чекбокс, для получения уведомлений от саппорт-центра (раньше был единый чекбокс, для всех почтовых рассылок).\r\n    - Даже если пользователь отключил уведомления от таких рассылок, то саппорт-инженер будет об этом знать. И, если у пользователя возникают с этим проблемы, подсказать варианты решения.\r\n    - Сами почтовые уведомления стали понятнее, появилась возможность подключить браузерные уведомления.\r\n    - Появилась возможность подписать на рассылку на любой тикет со страницы этого тикета.\r\n- **Более точечно настроена аналитика.**\r\n    - Саппорт-инженер теперь может видеть карточку пользователя с историей посещений тикетов и документов в документации. Так инженер поддержки сразу может понять, какие ссылки есть смысл советовать, а какие — нет, так как пользователь их уже посещал.\r\n    - Добавлены ивенты на целевые действия.\r\n    - Созданный внутренние дашборды с анализом различных данных, необходимых для оценки поступаемого  количества тикетов и оценки эффективности саппорта.\r\n- **Поиск по тикетам стал гибче и проще.**\r\n    - Были докручены мета-теги, чтобы тикеты лучше искались поисковиками.\r\n    - Переосмыслены фильтры, добавлены готовые пресеты и возможность подписаться на созданный фильтр.\r\n    - Оптимизирована внутренняя страница поиска.\r\n- **Сделана мобильная версия клиентского портала.**', `Summary`='', `FormatterID`='neasden', `OriginalAlias`='support-center', `Uploads`='a:4:{i:0;s:24:\"/images/blog/1x/sc-1.png\";i:1;s:15:\"empty-image.jpg\";i:2;s:24:\"/images/blog/1x/sc-2.png\";i:3;s:24:\"/images/blog/1x/sc-3.png\";}', `IsPublished`='1', `IsCommentable`='0', `IsVisible`='1', `IsFavourite`='1', `Stamp`='1711383800', `LastModified`='1711830224', `Offset`='14400', `IsDST`='0', `IsIndexed`='0', `IsExternal`='0', `ReadCount`='4', `SourceID`='0', `SourceNoteID`='0', `SourceNoteURL`='', `SourceNoteJSONURL`='', `SourceNoteData`='' WHERE `SubsetID`=1 AND (`ID`=1);

UPDATE `e2BlogNotes` SET `Uploads`='a:5:{i:0;s:24:"/images/blog/1x/sc-1.png";i:1;s:15:"empty-image.jpg";i:2;s:24:"/images/blog/1x/sc-2.png";i:3;s:24:"/images/blog/1x/sc-3.png";i:4;s:24:"/images/blog/1x/sc-4.png";}' WHERE `SubsetID`=1 AND `ID`=1;

UPDATE `e2BlogNotes` SET `SubsetID`='1', `Title`='Support Center', `Text`='Система поддержки пользователей. Включает различные информационные ресурсы: вопросы от пользователей, статьи в базе знаний и истории версий.\r\n\r\nЕжедневно в Support Center создаются сотни новых вопросов и на них отвечают десятки саппорт-инженеров. За годы работы старый интерфейс устарел как внешне, так и с точки зрения удобства и функциональности. Пришла задача полностью переработать платформу, с учётом всех бизнес-требований.\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/sc-1.png\" srcset=\"/images/blog/1x/sc-1.png 1x, /images/blog/2x/sc-1@2x.png 2x\" class=\"img-fluid\">\r\n\r\n# Вводная\r\n\r\nСистема состоит из трёх основных порталов:\r\n\r\n- Клиентский портал\r\n- Внутренний портал для сотрудников\r\n- Админ-панель\r\n\r\nКаждым порталом пользуется свой сегмент пользователей. Клиенты компании ожидают простой и понятный интерфейс . В то время как саппорт-инженеры привыкли к определенным сценариям, которые тоже нужно было сохранить.\r\n\r\n# Клиентский портал\r\n\r\nНа этот ресурс были задействованы основные силы. Клиентский портал даёт возможность клиентам задавать вопросы технического характера и получать на них ответы. \r\n\r\nПеред редизайном ставились следующие задачи:\r\n\r\n- **Снизить нагрузку на саппорт-инженеров.** Помочь пользователям находить ответы самостоятельно, если на вопрос уже отвечали ранее или решение описано в документации.\r\n- **Улучшить UX.** Накопился список проблем, которые нужно было решать:\r\n    - **Пользователи выбирают неверный продукт при создании вопроса.** DevExpress разрабатывает и поддерживает десятки продуктов. У каждого продукта могут быть разные платформы и версии. Иногда важно знать, какая ОС установлена у пользователя, каким IDE он пользуется. Нужно было сделать так, чтобы у пользователя не возникали проблемы при выборе нужных значений. Помочь ему на этом пути.\r\n    - **Возникают проблемы при форматировании текста.** Пользователи приходят в поддержку с техническими проблемами. Описание проблемы содержит куски кода или целые архивы с проектами. В старой версии сайта пользователи путались в текстовом редакторе и отправляли не отформатированные куски куда, которые сливались с обычным текстом. Также, пользователи не всегда понимали как аттачить файлы. Всё это приводило к дополнительной нагрузке на саппорт-инженеров.\r\n    - **Пользователи не замечают уведомления об ответах в их тикете.** Проблема касалась как веб-интерфейса, так и уведомлений приходящих пользователю на почту. Пользователи либо не замечали уведомления, либо не понимали к чему они относятся, либо ранее отключали уведомления и забывали об этом. В связи с этим, среднее время на решение таких тикетов значительно увеличивалось.\r\n    - **Клиенты из одной и той же компании не видят вопросы друг друга.** Большинство клиентов предпочитает оставлять свои вопросы приватно. Чтобы их могли видеть только саппорт-инженеры. Из-за этого возникала проблема, что вопросы становились приватными полностью и их не могли видеть даже сотрудники одной и той же компании с разных аккаунтов.\r\n    - **Неудобные фильтры.** Пользователи, что на странице со списком публичных тикетов невозможно ничего найти. Фильтров мало, а то, что есть не всегда работает очевидным образом.\r\n- **Переосмыслить встроенный инструмент “Version History”.**\r\n- **Улучшить аналитику.**\r\n- **Освежить внешний вид.**\r\n\r\n## Подготовка к работе\r\n\r\nПеред началом работы над редизайном была проведена подготовительная работы. Подготовлен общий план работы и проведены встречи со всеми заинтересованными лицами. Был подготовлен итоговый бриф проекта. \r\n\r\nЧасть работ, которые были проведены на этом этапе:\r\n\r\n- **Анализ текущего дизайна.** UX-тестирование текущего сайта, поиск проблем.\r\n- **Ресёрч конкурентов.** Изучение как прямых конкурентов, так и решений крупных платформ. Например, Zendesk, Freshdesk, Zoho Desk.\r\n- **Сбор и анализ существующего фидбека.** За годы работы, накопилось большое количество тикетов, комментарием и другой обратной связи касаемо работы портала. Была проведена большая работу по сбору всей это информации в один документ, её анализу и приоритизации.\r\n- **Сбор информации от саппорт-инженеров.** Инженеры поддержки активнее всего общаются с пользователями и знают детали и проблемы, которые могут быть неизвестны и неочевидны другим членам команды.\r\n- **Изучение текущих данных аналитики и список того, что хотим собирать ещё в новом дизайне.** Для работы с данными использовались:  Google Analytics (+Google Tag Manager), Matomo, внутренние инструменты.\r\n- **Сбор требований от заказчиков и всех заинтересованных лиц.**\r\n- **Подготовка брифа.** Описание проблем, целей и задач. Развёрнутый ответ на вопрос, что мы будем считать успешным редизайном.\r\n\r\n## Процесс\r\n\r\nРабота над сайтом строилась 2-4 недельными спринтами. В конце каждого спринта проводились синхронизационные встречи с заказчиками. \r\n\r\nВ начале работы над дизайном была согласована общая концепция. Отрисованы низко детализированные прототипы с решением основных UX проблем. Найден общий подход к внешнему виду.  \r\n\r\nЧтобы работа над новым дизайном была эффективной и обратная связь поступала как можно быстрее был принят рад мер:\r\n\r\n- Продукт менеджер продукта показывал прототипы и просто картинки небольшой выборке самых активных и заинтересованных пользователей саппорт-центра. Благодаря этому получалось очень быстро собрать много полезной информации, которая помогала намного быстрее замечать точки роста.\r\n- Тесное общение с разработчиками. Так дизайн значительно обгонял разработку, нужно было сразу учитывать технические ограничения. Для этого проводились постоянные встречи между разработчикам, заказчиками и дизайнером. Так мы оценивали техническую сложность каждой фичи и на основе этого принимали решение, будем мы брать её в работу или нет.\r\n- На этапе, когда появилась первая работающая версия сайта, его стали тестировать сотрудники. В первую очередь, к тестированию подключались саппорт-инженеры. На этом этапе было собрано большое количество фидбека как по техническим багам, визуальным багам, так и просто по неудачным UX-решениям.\r\n- На следующем этапе снова к фидбеку снова были подключены активные клиенты. Которые были готовы дать развёрнутый фидбек.\r\n- На одном из финальных этапов сайт стал доступен для всех пользователей, но в виде бета-версии. При этом, каждый пользователь мог вернуться к старой версии сайта. Со временем, пользователей вернувшихся на старый сайт становилось меньше. Также, мы старались собирать фидбек от таких пользователей. Чтобы понять, почему они вернулись на старую версию сайта.\r\n- К новой версии сайта была прикручена продвинутая аналитика.\r\n\r\n## Примеры реализации\r\n\r\n### Релевантные подсказки при создании тикета\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/sc-2.png\" srcset=\"/images/blog/1x/sc-2.png 1x, /images/blog/2x/sc-2@2x.png 2x\" class=\"img-fluid\">\r\n\r\n### Упрощена навигация по дискуссии с ветвистой иерархией\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/sc-3.png\" srcset=\"/images/blog/1x/sc-3.png 1x, /images/blog/2x/sc-3@2x.png 2x\" class=\"img-fluid\">\r\n\r\n### Обновлены инструменты фильтра на странице со списком тикетов\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/sc-4.png\" srcset=\"/images/blog/1x/sc-4.png 1x, /images/blog/2x/sc-4@2x.png 2x\" class=\"img-fluid\">\r\n\r\n### Обновлены почтовые уведомлению, улучшения подписка на уведомления на самом сайте\r\n\r\n# Внутренний портал и админ-панель\r\n\r\nОтдельной крупной задачей была необходимость сделать внутренний портал для сотрудников. Главным вызовом было задача учесть флоу саппорт-инженеров из разных команд. Ингода оно сильно отличалось и нужно было найти решения, которые устроят всех.\r\n\r\nДля этого проводилось множество сложных встреч с саппорт-инженерами из разных команд и топ-саппортом. По каким-то сценариям приходилось идти на компромиссы, по каким-то — выбирать один вариант и убеждать в правильности этого варианта остальных.\r\n\r\nВ результате, судя по опросам и личным разговорам, большая часть сотрудников осталась довольна новой системой.\r\n\r\nТакже, для более гибкой работы и настройки системы под текущие нужды бизнеса была спроектирована админ-панель, где можно точечно настроить различные параметры системы.\r\n\r\nТак как решения внутренние, вдаваться в подробности и показывать скриншоты я не могу.  \r\n\r\n# Результаты\r\n\r\nВ итоге, полный переход на новую версию получился безболезненным. На каждой итерации выявлялись проблемные места и не учтённые сценарий. Большая часть из них решалась, от небольшой части осознанно отказывались.\r\n\r\nСтарая версия сайта постепенно была отключена, когда количество её пользователей стало совсем небольшим.\r\n\r\nОбщая оценка редизайна была оценена как успешная. Как со стороны клиентов, так и со стороны сотрудников. Поставленные перед редизайном цели были достигнуты:\r\n\r\n- **Уменьшилась нагрузка на саппорт-инженеров.**\r\n    - Пользователи стали чаще находить решения самостоятельно: улучшен движок поиска, предлагаются релевантные ссылки при создании тикета, улучшена фильтрация.\r\n    - Пользователи стали реже ошибаться с выбором платформы/продукта и других деталей при создании тикета.\r\n    - Во внутреннем портале появились инструменты, помогающие саппорт-инженерам быстрее отвечать на тикеты, ответ на которые уже давался ранее.\r\n- **Не отформатированные тикеты появляются гораздо реже.** Решилась проблема с тем, что пользователи не понимали, как отправлять аттачи.\r\n- **Уменьшилось количество проблем, когда пользователи не получают уведомления вовремя.**\r\n    - В настройках уведомлений появился отдельный чекбокс, для получения уведомлений от саппорт-центра (раньше был единый чекбокс, для всех почтовых рассылок).\r\n    - Даже если пользователь отключил уведомления от таких рассылок, то саппорт-инженер будет об этом знать. И, если у пользователя возникают с этим проблемы, подсказать варианты решения.\r\n    - Сами почтовые уведомления стали понятнее, появилась возможность подключить браузерные уведомления.\r\n    - Появилась возможность подписать на рассылку на любой тикет со страницы этого тикета.\r\n- **Более точечно настроена аналитика.**\r\n    - Саппорт-инженер теперь может видеть карточку пользователя с историей посещений тикетов и документов в документации. Так инженер поддержки сразу может понять, какие ссылки есть смысл советовать, а какие — нет, так как пользователь их уже посещал.\r\n    - Добавлены ивенты на целевые действия.\r\n    - Созданный внутренние дашборды с анализом различных данных, необходимых для оценки поступаемого  количества тикетов и оценки эффективности саппорта.\r\n- **Поиск по тикетам стал гибче и проще.**\r\n    - Были докручены мета-теги, чтобы тикеты лучше искались поисковиками.\r\n    - Переосмыслены фильтры, добавлены готовые пресеты и возможность подписаться на созданный фильтр.\r\n    - Оптимизирована внутренняя страница поиска.\r\n- **Сделана мобильная версия клиентского портала.**', `Summary`='', `FormatterID`='neasden', `OriginalAlias`='support-center', `Uploads`='a:4:{i:0;s:24:\"/images/blog/1x/sc-1.png\";i:1;s:15:\"empty-image.jpg\";i:2;s:24:\"/images/blog/1x/sc-2.png\";i:3;s:24:\"/images/blog/1x/sc-3.png\";}', `IsPublished`='1', `IsCommentable`='0', `IsVisible`='1', `IsFavourite`='1', `Stamp`='1711383800', `LastModified`='1711830224', `Offset`='14400', `IsDST`='0', `IsIndexed`='1', `IsExternal`='0', `ReadCount`='4', `SourceID`='0', `SourceNoteID`='0', `SourceNoteURL`='', `SourceNoteJSONURL`='', `SourceNoteData`='' WHERE `SubsetID`=1 AND (`ID`=1);

UPDATE `e2BlogNotes` SET `SubsetID`='1', `Title`='Support Center', `Text`='Система поддержки пользователей. Включает различные информационные ресурсы: вопросы от пользователей, статьи в базе знаний и истории версий.\r\n\r\nЕжедневно в Support Center создаются сотни новых вопросов и на них отвечают десятки саппорт-инженеров. За годы работы старый интерфейс устарел как внешне, так и с точки зрения удобства и функциональности. Пришла задача полностью переработать платформу, с учётом всех бизнес-требований.\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/sc-1.png\" srcset=\"/images/blog/1x/sc-1.png 1x, /images/blog/2x/sc-1@2x.png 2x\" class=\"img-fluid\">\r\n\r\n# Вводная\r\n\r\nСистема состоит из трёх основных порталов:\r\n\r\n- Клиентский портал\r\n- Внутренний портал для сотрудников\r\n- Админ-панель\r\n\r\nКаждым порталом пользуется свой сегмент пользователей. Клиенты компании ожидают простой и понятный интерфейс . В то время как саппорт-инженеры привыкли к определенным сценариям, которые тоже нужно было сохранить.\r\n\r\n# Клиентский портал\r\n\r\nНа этот ресурс были задействованы основные силы. Клиентский портал даёт возможность клиентам задавать вопросы технического характера и получать на них ответы. \r\n\r\nПеред редизайном ставились следующие задачи:\r\n\r\n- **Снизить нагрузку на саппорт-инженеров.** Помочь пользователям находить ответы самостоятельно, если на вопрос уже отвечали ранее или решение описано в документации.\r\n- **Улучшить UX.** Накопился список проблем, которые нужно было решать:\r\n    - **Пользователи выбирают неверный продукт при создании вопроса.** DevExpress разрабатывает и поддерживает десятки продуктов. У каждого продукта могут быть разные платформы и версии. Иногда важно знать, какая ОС установлена у пользователя, каким IDE он пользуется. Нужно было сделать так, чтобы у пользователя не возникали проблемы при выборе нужных значений. Помочь ему на этом пути.\r\n    - **Возникают проблемы при форматировании текста.** Пользователи приходят в поддержку с техническими проблемами. Описание проблемы содержит куски кода или целые архивы с проектами. В старой версии сайта пользователи путались в текстовом редакторе и отправляли не отформатированные куски куда, которые сливались с обычным текстом. Также, пользователи не всегда понимали как аттачить файлы. Всё это приводило к дополнительной нагрузке на саппорт-инженеров.\r\n    - **Пользователи не замечают уведомления об ответах в их тикете.** Проблема касалась как веб-интерфейса, так и уведомлений приходящих пользователю на почту. Пользователи либо не замечали уведомления, либо не понимали к чему они относятся, либо ранее отключали уведомления и забывали об этом. В связи с этим, среднее время на решение таких тикетов значительно увеличивалось.\r\n    - **Клиенты из одной и той же компании не видят вопросы друг друга.** Большинство клиентов предпочитает оставлять свои вопросы приватно. Чтобы их могли видеть только саппорт-инженеры. Из-за этого возникала проблема, что вопросы становились приватными полностью и их не могли видеть даже сотрудники одной и той же компании с разных аккаунтов.\r\n    - **Неудобные фильтры.** Пользователи, что на странице со списком публичных тикетов невозможно ничего найти. Фильтров мало, а то, что есть не всегда работает очевидным образом.\r\n- **Переосмыслить встроенный инструмент “Version History”.**\r\n- **Улучшить аналитику.**\r\n- **Освежить внешний вид.**\r\n\r\n## Подготовка к работе\r\n\r\nПеред началом работы над редизайном была проведена подготовительная работы. Подготовлен общий план работы и проведены встречи со всеми заинтересованными лицами. Был подготовлен итоговый бриф проекта. \r\n\r\nЧасть работ, которые были проведены на этом этапе:\r\n\r\n- **Анализ текущего дизайна.** UX-тестирование текущего сайта, поиск проблем.\r\n- **Ресёрч конкурентов.** Изучение как прямых конкурентов, так и решений крупных платформ. Например, Zendesk, Freshdesk, Zoho Desk.\r\n- **Сбор и анализ существующего фидбека.** За годы работы, накопилось большое количество тикетов, комментарием и другой обратной связи касаемо работы портала. Была проведена большая работу по сбору всей это информации в один документ, её анализу и приоритизации.\r\n- **Сбор информации от саппорт-инженеров.** Инженеры поддержки активнее всего общаются с пользователями и знают детали и проблемы, которые могут быть неизвестны и неочевидны другим членам команды.\r\n- **Изучение текущих данных аналитики и список того, что хотим собирать ещё в новом дизайне.** Для работы с данными использовались:  Google Analytics (+Google Tag Manager), Matomo, внутренние инструменты.\r\n- **Сбор требований от заказчиков и всех заинтересованных лиц.**\r\n- **Подготовка брифа.** Описание проблем, целей и задач. Развёрнутый ответ на вопрос, что мы будем считать успешным редизайном.\r\n\r\n## Процесс\r\n\r\nРабота над сайтом строилась 2-4 недельными спринтами. В конце каждого спринта проводились синхронизационные встречи с заказчиками. \r\n\r\nВ начале работы над дизайном была согласована общая концепция. Отрисованы низко детализированные прототипы с решением основных UX проблем. Найден общий подход к внешнему виду.  \r\n\r\nЧтобы работа над новым дизайном была эффективной и обратная связь поступала как можно быстрее был принят рад мер:\r\n\r\n- Продукт менеджер продукта показывал прототипы и просто картинки небольшой выборке самых активных и заинтересованных пользователей саппорт-центра. Благодаря этому получалось очень быстро собрать много полезной информации, которая помогала намного быстрее замечать точки роста.\r\n- Тесное общение с разработчиками. Так дизайн значительно обгонял разработку, нужно было сразу учитывать технические ограничения. Для этого проводились постоянные встречи между разработчикам, заказчиками и дизайнером. Так мы оценивали техническую сложность каждой фичи и на основе этого принимали решение, будем мы брать её в работу или нет.\r\n- На этапе, когда появилась первая работающая версия сайта, его стали тестировать сотрудники. В первую очередь, к тестированию подключались саппорт-инженеры. На этом этапе было собрано большое количество фидбека как по техническим багам, визуальным багам, так и просто по неудачным UX-решениям.\r\n- На следующем этапе снова к фидбеку снова были подключены активные клиенты. Которые были готовы дать развёрнутый фидбек.\r\n- На одном из финальных этапов сайт стал доступен для всех пользователей, но в виде бета-версии. При этом, каждый пользователь мог вернуться к старой версии сайта. Со временем, пользователей вернувшихся на старый сайт становилось меньше. Также, мы старались собирать фидбек от таких пользователей. Чтобы понять, почему они вернулись на старую версию сайта.\r\n- К новой версии сайта была прикручена продвинутая аналитика.\r\n\r\n## Примеры реализации\r\n\r\n### Релевантные подсказки при создании тикета\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/sc-2.png\" srcset=\"/images/blog/1x/sc-2.png 1x, /images/blog/2x/sc-2@2x.png 2x\" class=\"img-fluid\">\r\n\r\n### Упрощена навигация по дискуссии с ветвистой иерархией\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/sc-3.png\" srcset=\"/images/blog/1x/sc-3.png 1x, /images/blog/2x/sc-3@2x.png 2x\" class=\"img-fluid\">\r\n\r\n### Обновлены инструменты фильтра на странице со списком тикетов\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/sc-4.png\" srcset=\"/images/blog/1x/sc-4.png 1x, /images/blog/2x/sc-4@2x.png 2x\" class=\"img-fluid\">\r\n\r\n### Обновлены почтовые уведомлению, улучшения подписка на уведомления на самом сайте\r\n\r\n# Внутренний портал и админ-панель\r\n\r\nОтдельной крупной задачей была необходимость сделать внутренний портал для сотрудников. Главным вызовом было задача учесть флоу саппорт-инженеров из разных команд. Ингода оно сильно отличалось и нужно было найти решения, которые устроят всех.\r\n\r\nДля этого проводилось множество сложных встреч с саппорт-инженерами из разных команд и топ-саппортом. По каким-то сценариям приходилось идти на компромиссы, по каким-то — выбирать один вариант и убеждать в правильности этого варианта остальных.\r\n\r\nВ результате, судя по опросам и личным разговорам, большая часть сотрудников осталась довольна новой системой.\r\n\r\nТакже, для более гибкой работы и настройки системы под текущие нужды бизнеса была спроектирована админ-панель, где можно точечно настроить различные параметры системы.\r\n\r\nТак как решения внутренние, вдаваться в подробности и показывать скриншоты я не могу.  \r\n\r\n# Результаты\r\n\r\nВ итоге, полный переход на новую версию получился безболезненным. На каждой итерации выявлялись проблемные места и не учтённые сценарий. Большая часть из них решалась, от небольшой части осознанно отказывались.\r\n\r\nСтарая версия сайта постепенно была отключена, когда количество её пользователей стало совсем небольшим.\r\n\r\nОбщая оценка редизайна была оценена как успешная. Как со стороны клиентов, так и со стороны сотрудников. Поставленные перед редизайном цели были достигнуты:\r\n\r\n- **Уменьшилась нагрузка на саппорт-инженеров.**\r\n    - Пользователи стали чаще находить решения самостоятельно: улучшен движок поиска, предлагаются релевантные ссылки при создании тикета, улучшена фильтрация.\r\n    - Пользователи стали реже ошибаться с выбором платформы/продукта и других деталей при создании тикета.\r\n    - Во внутреннем портале появились инструменты, помогающие саппорт-инженерам быстрее отвечать на тикеты, ответ на которые уже давался ранее.\r\n- **Не отформатированные тикеты появляются гораздо реже.** Решилась проблема с тем, что пользователи не понимали, как отправлять аттачи.\r\n- **Уменьшилось количество проблем, когда пользователи не получают уведомления вовремя.**\r\n    - В настройках уведомлений появился отдельный чекбокс, для получения уведомлений от саппорт-центра (раньше был единый чекбокс, для всех почтовых рассылок).\r\n    - Даже если пользователь отключил уведомления от таких рассылок, то саппорт-инженер будет об этом знать. И, если у пользователя возникают с этим проблемы, подсказать варианты решения.\r\n    - Сами почтовые уведомления стали понятнее, появилась возможность подключить браузерные уведомления.\r\n    - Появилась возможность подписать на рассылку на любой тикет со страницы этого тикета.\r\n- **Более точечно настроена аналитика.**\r\n    - Саппорт-инженер теперь может видеть карточку пользователя с историей посещений тикетов и документов в документации. Так инженер поддержки сразу может понять, какие ссылки есть смысл советовать, а какие — нет, так как пользователь их уже посещал.\r\n    - Добавлены ивенты на целевые действия.\r\n    - Созданный внутренние дашборды с анализом различных данных, необходимых для оценки поступаемого  количества тикетов и оценки эффективности саппорта.\r\n- **Поиск по тикетам стал гибче и проще.**\r\n    - Были докручены мета-теги, чтобы тикеты лучше искались поисковиками.\r\n    - Переосмыслены фильтры, добавлены готовые пресеты и возможность подписаться на созданный фильтр.\r\n    - Оптимизирована внутренняя страница поиска.\r\n- **Сделана мобильная версия клиентского портала.**', `Summary`='', `FormatterID`='neasden', `OriginalAlias`='support-center', `Uploads`='a:5:{i:0;s:24:\"/images/blog/1x/sc-1.png\";i:1;s:15:\"empty-image.jpg\";i:2;s:24:\"/images/blog/1x/sc-2.png\";i:3;s:24:\"/images/blog/1x/sc-3.png\";i:7;s:24:\"/images/blog/1x/sc-4.png\";}', `IsPublished`='1', `IsCommentable`='0', `IsVisible`='1', `IsFavourite`='1', `Stamp`='1711383800', `LastModified`='1711830224', `Offset`='14400', `IsDST`='0', `IsIndexed`='1', `IsExternal`='0', `ReadCount`='4', `SourceID`='0', `SourceNoteID`='0', `SourceNoteURL`='', `SourceNoteJSONURL`='', `SourceNoteData`='' WHERE `SubsetID`=1 AND (`ID`=1);

UPDATE `e2BlogNotes` SET `SubsetID`='1', `Title`='Support Center', `Text`='Система поддержки пользователей. Включает различные информационные ресурсы: вопросы от пользователей, статьи в базе знаний и истории версий.\r\n\r\nЕжедневно в Support Center создаются сотни новых вопросов и на них отвечают десятки саппорт-инженеров. За годы работы старый интерфейс устарел как внешне, так и с точки зрения удобства и функциональности. Пришла задача полностью переработать платформу, с учётом всех бизнес-требований.\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/sc-1.png\" srcset=\"/images/blog/1x/sc-1.png 1x, /images/blog/2x/sc-1@2x.png 2x\" class=\"img-fluid\">\r\n\r\n# Вводная\r\n\r\nСистема состоит из трёх основных порталов:\r\n\r\n- Клиентский портал\r\n- Внутренний портал для сотрудников\r\n- Админ-панель\r\n\r\nКаждым порталом пользуется свой сегмент пользователей. Клиенты компании ожидают простой и понятный интерфейс . В то время как саппорт-инженеры привыкли к определенным сценариям, которые тоже нужно было сохранить.\r\n\r\n# Клиентский портал\r\n\r\nНа этот ресурс были задействованы основные силы. Клиентский портал даёт возможность клиентам задавать вопросы технического характера и получать на них ответы. \r\n\r\nПеред редизайном ставились следующие задачи:\r\n\r\n- **Снизить нагрузку на саппорт-инженеров.** Помочь пользователям находить ответы самостоятельно, если на вопрос уже отвечали ранее или решение описано в документации.\r\n- **Улучшить UX.** Накопился список проблем, которые нужно было решать:\r\n    - **Пользователи выбирают неверный продукт при создании вопроса.** DevExpress разрабатывает и поддерживает десятки продуктов. У каждого продукта могут быть разные платформы и версии. Иногда важно знать, какая ОС установлена у пользователя, каким IDE он пользуется. Нужно было сделать так, чтобы у пользователя не возникали проблемы при выборе нужных значений. Помочь ему на этом пути.\r\n    - **Возникают проблемы при форматировании текста.** Пользователи приходят в поддержку с техническими проблемами. Описание проблемы содержит куски кода или целые архивы с проектами. В старой версии сайта пользователи путались в текстовом редакторе и отправляли не отформатированные куски куда, которые сливались с обычным текстом. Также, пользователи не всегда понимали как аттачить файлы. Всё это приводило к дополнительной нагрузке на саппорт-инженеров.\r\n    - **Пользователи не замечают уведомления об ответах в их тикете.** Проблема касалась как веб-интерфейса, так и уведомлений приходящих пользователю на почту. Пользователи либо не замечали уведомления, либо не понимали к чему они относятся, либо ранее отключали уведомления и забывали об этом. В связи с этим, среднее время на решение таких тикетов значительно увеличивалось.\r\n    - **Клиенты из одной и той же компании не видят вопросы друг друга.** Большинство клиентов предпочитает оставлять свои вопросы приватно. Чтобы их могли видеть только саппорт-инженеры. Из-за этого возникала проблема, что вопросы становились приватными полностью и их не могли видеть даже сотрудники одной и той же компании с разных аккаунтов.\r\n    - **Неудобные фильтры.** Пользователи, что на странице со списком публичных тикетов невозможно ничего найти. Фильтров мало, а то, что есть не всегда работает очевидным образом.\r\n- **Переосмыслить встроенный инструмент “Version History”.**\r\n- **Улучшить аналитику.**\r\n- **Освежить внешний вид.**\r\n\r\n## Подготовка к работе\r\n\r\nПеред началом работы над редизайном была проведена подготовительная работы. Подготовлен общий план работы и проведены встречи со всеми заинтересованными лицами. Был подготовлен итоговый бриф проекта. \r\n\r\nЧасть работ, которые были проведены на этом этапе:\r\n\r\n- **Анализ текущего дизайна.** UX-тестирование текущего сайта, поиск проблем.\r\n- **Ресёрч конкурентов.** Изучение как прямых конкурентов, так и решений крупных платформ. Например, Zendesk, Freshdesk, Zoho Desk.\r\n- **Сбор и анализ существующего фидбека.** За годы работы, накопилось большое количество тикетов, комментарием и другой обратной связи касаемо работы портала. Была проведена большая работу по сбору всей это информации в один документ, её анализу и приоритизации.\r\n- **Сбор информации от саппорт-инженеров.** Инженеры поддержки активнее всего общаются с пользователями и знают детали и проблемы, которые могут быть неизвестны и неочевидны другим членам команды.\r\n- **Изучение текущих данных аналитики и список того, что хотим собирать ещё в новом дизайне.** Для работы с данными использовались:  Google Analytics (+Google Tag Manager), Matomo, внутренние инструменты.\r\n- **Сбор требований от заказчиков и всех заинтересованных лиц.**\r\n- **Подготовка брифа.** Описание проблем, целей и задач. Развёрнутый ответ на вопрос, что мы будем считать успешным редизайном.\r\n\r\n## Процесс\r\n\r\nРабота над сайтом строилась 2-4 недельными спринтами. В конце каждого спринта проводились синхронизационные встречи с заказчиками. \r\n\r\nВ начале работы над дизайном была согласована общая концепция. Отрисованы низко детализированные прототипы с решением основных UX проблем. Найден общий подход к внешнему виду.  \r\n\r\nЧтобы работа над новым дизайном была эффективной и обратная связь поступала как можно быстрее был принят рад мер:\r\n\r\n- Продукт менеджер продукта показывал прототипы и просто картинки небольшой выборке самых активных и заинтересованных пользователей саппорт-центра. Благодаря этому получалось очень быстро собрать много полезной информации, которая помогала намного быстрее замечать точки роста.\r\n- Тесное общение с разработчиками. Так дизайн значительно обгонял разработку, нужно было сразу учитывать технические ограничения. Для этого проводились постоянные встречи между разработчикам, заказчиками и дизайнером. Так мы оценивали техническую сложность каждой фичи и на основе этого принимали решение, будем мы брать её в работу или нет.\r\n- На этапе, когда появилась первая работающая версия сайта, его стали тестировать сотрудники. В первую очередь, к тестированию подключались саппорт-инженеры. На этом этапе было собрано большое количество фидбека как по техническим багам, визуальным багам, так и просто по неудачным UX-решениям.\r\n- На следующем этапе снова к фидбеку снова были подключены активные клиенты. Которые были готовы дать развёрнутый фидбек.\r\n- На одном из финальных этапов сайт стал доступен для всех пользователей, но в виде бета-версии. При этом, каждый пользователь мог вернуться к старой версии сайта. Со временем, пользователей вернувшихся на старый сайт становилось меньше. Также, мы старались собирать фидбек от таких пользователей. Чтобы понять, почему они вернулись на старую версию сайта.\r\n- К новой версии сайта была прикручена продвинутая аналитика.\r\n\r\n## Примеры реализации\r\n\r\n### Релевантные подсказки при создании тикета\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/sc-2.png\" srcset=\"/images/blog/1x/sc-2.png 1x, /images/blog/2x/sc-2@2x.png 2x\" class=\"img-fluid\">\r\n\r\n### Упрощена навигация по дискуссии с ветвистой иерархией\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/sc-3.png\" srcset=\"/images/blog/1x/sc-3.png 1x, /images/blog/2x/sc-3@2x.png 2x\" class=\"img-fluid\">\r\n\r\n### Обновлены инструменты фильтра на странице со списком тикетов\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/sc-4.png\" srcset=\"/images/blog/1x/sc-4.png 1x, /images/blog/2x/sc-4@2x.png 2x\" class=\"img-fluid\">\r\n\r\n### Обновлены почтовые уведомлению, улучшения подписка на уведомления на самом сайте\r\n\r\n# Внутренний портал и админ-панель\r\n\r\nОтдельной крупной задачей была необходимость сделать внутренний портал для сотрудников. Главным вызовом было задача учесть флоу саппорт-инженеров из разных команд. Ингода оно сильно отличалось и нужно было найти решения, которые устроят всех.\r\n\r\nДля этого проводилось множество сложных встреч с саппорт-инженерами из разных команд и топ-саппортом. По каким-то сценариям приходилось идти на компромиссы, по каким-то — выбирать один вариант и убеждать в правильности этого варианта остальных.\r\n\r\nВ результате, судя по опросам и личным разговорам, большая часть сотрудников осталась довольна новой системой.\r\n\r\nТакже, для более гибкой работы и настройки системы под текущие нужды бизнеса была спроектирована админ-панель, где можно точечно настроить различные параметры системы.\r\n\r\nТак как решения внутренние, вдаваться в подробности и показывать скриншоты я не могу.  \r\n\r\n# Результаты\r\n\r\nВ итоге, полный переход на новую версию получился безболезненным. На каждой итерации выявлялись проблемные места и не учтённые сценарий. Большая часть из них решалась, от небольшой части осознанно отказывались.\r\n\r\nСтарая версия сайта постепенно была отключена, когда количество её пользователей стало совсем небольшим.\r\n\r\nОбщая оценка редизайна была оценена как успешная. Как со стороны клиентов, так и со стороны сотрудников. Поставленные перед редизайном цели были достигнуты:\r\n\r\n- **Уменьшилась нагрузка на саппорт-инженеров.**\r\n    - Пользователи стали чаще находить решения самостоятельно: улучшен движок поиска, предлагаются релевантные ссылки при создании тикета, улучшена фильтрация.\r\n    - Пользователи стали реже ошибаться с выбором платформы/продукта и других деталей при создании тикета.\r\n    - Во внутреннем портале появились инструменты, помогающие саппорт-инженерам быстрее отвечать на тикеты, ответ на которые уже давался ранее.\r\n- **Не отформатированные тикеты появляются гораздо реже.** Решилась проблема с тем, что пользователи не понимали, как отправлять аттачи.\r\n- **Уменьшилось количество проблем, когда пользователи не получают уведомления вовремя.**\r\n    - В настройках уведомлений появился отдельный чекбокс, для получения уведомлений от саппорт-центра (раньше был единый чекбокс, для всех почтовых рассылок).\r\n    - Даже если пользователь отключил уведомления от таких рассылок, то саппорт-инженер будет об этом знать. И, если у пользователя возникают с этим проблемы, подсказать варианты решения.\r\n    - Сами почтовые уведомления стали понятнее, появилась возможность подключить браузерные уведомления.\r\n    - Появилась возможность подписать на рассылку на любой тикет со страницы этого тикета.\r\n- **Более точечно настроена аналитика.**\r\n    - Саппорт-инженер теперь может видеть карточку пользователя с историей посещений тикетов и документов в документации. Так инженер поддержки сразу может понять, какие ссылки есть смысл советовать, а какие — нет, так как пользователь их уже посещал.\r\n    - Добавлены ивенты на целевые действия.\r\n    - Созданный внутренние дашборды с анализом различных данных, необходимых для оценки поступаемого  количества тикетов и оценки эффективности саппорта.\r\n- **Поиск по тикетам стал гибче и проще.**\r\n    - Были докручены мета-теги, чтобы тикеты лучше искались поисковиками.\r\n    - Переосмыслены фильтры, добавлены готовые пресеты и возможность подписаться на созданный фильтр.\r\n    - Оптимизирована внутренняя страница поиска.\r\n- **Сделана мобильная версия клиентского портала.**', `Summary`='', `FormatterID`='neasden', `OriginalAlias`='support-center', `Uploads`='a:5:{i:0;s:24:\"/images/blog/1x/sc-1.png\";i:1;s:15:\"empty-image.jpg\";i:2;s:24:\"/images/blog/1x/sc-2.png\";i:3;s:24:\"/images/blog/1x/sc-3.png\";i:4;s:24:\"/images/blog/1x/sc-4.png\";}', `IsPublished`='1', `IsCommentable`='0', `IsVisible`='1', `IsFavourite`='1', `Stamp`='1711383800', `LastModified`='1711830224', `Offset`='14400', `IsDST`='0', `IsIndexed`='1', `IsExternal`='0', `ReadCount`='4', `SourceID`='0', `SourceNoteID`='0', `SourceNoteURL`='', `SourceNoteJSONURL`='', `SourceNoteData`='' WHERE `SubsetID`=1 AND (`ID`=1);

UPDATE `e2BlogAliases` SET `EntityType`='n', `EntityID`='1', `Alias`='support-center', `Stamp`='1711831845' WHERE `SubsetID`=1 AND (`ID`=1);

UPDATE `e2BlogNotes` SET `SubsetID`='1', `Title`='Support Center', `Text`='Система поддержки пользователей. Включает различные информационные ресурсы: вопросы от пользователей, статьи в базе знаний и истории версий.\r\n\r\nЕжедневно в Support Center создаются сотни новых вопросов и на них отвечают десятки саппорт-инженеров. За годы работы старый интерфейс устарел как внешне, так и с точки зрения удобства и функциональности. Пришла задача полностью переработать платформу, с учётом всех бизнес-требований.\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/sc-1.png\" srcset=\"/images/blog/1x/sc-1.png 1x, /images/blog/2x/sc-1@2x.png 2x\" class=\"img-fluid\">\r\n\r\n# Вводная\r\n\r\nСистема состоит из трёх основных порталов:\r\n\r\n- Клиентский портал\r\n- Внутренний портал для сотрудников\r\n- Админ-панель\r\n\r\nКаждым порталом пользуется свой сегмент пользователей. Клиенты компании ожидают простой и понятный интерфейс . В то время как саппорт-инженеры привыкли к определенным сценариям, которые тоже нужно было сохранить.\r\n\r\n# Клиентский портал\r\n\r\nНа этот ресурс были задействованы основные силы. Клиентский портал даёт возможность клиентам задавать вопросы технического характера и получать на них ответы. \r\n\r\nПеред редизайном ставились следующие задачи:\r\n\r\n- **Снизить нагрузку на саппорт-инженеров.** Помочь пользователям находить ответы самостоятельно, если на вопрос уже отвечали ранее или решение описано в документации.\r\n- **Улучшить UX.** Накопился список проблем, которые нужно было решать:\r\n    - **Пользователи выбирают неверный продукт при создании вопроса.** DevExpress разрабатывает и поддерживает десятки продуктов. У каждого продукта могут быть разные платформы и версии. Иногда важно знать, какая ОС установлена у пользователя, каким IDE он пользуется. Нужно было сделать так, чтобы у пользователя не возникали проблемы при выборе нужных значений. Помочь ему на этом пути.\r\n    - **Возникают проблемы при форматировании текста.** Пользователи приходят в поддержку с техническими проблемами. Описание проблемы содержит куски кода или целые архивы с проектами. В старой версии сайта пользователи путались в текстовом редакторе и отправляли не отформатированные куски куда, которые сливались с обычным текстом. Также, пользователи не всегда понимали как аттачить файлы. Всё это приводило к дополнительной нагрузке на саппорт-инженеров.\r\n    - **Пользователи не замечают уведомления об ответах в их тикете.** Проблема касалась как веб-интерфейса, так и уведомлений приходящих пользователю на почту. Пользователи либо не замечали уведомления, либо не понимали к чему они относятся, либо ранее отключали уведомления и забывали об этом. В связи с этим, среднее время на решение таких тикетов значительно увеличивалось.\r\n    - **Клиенты из одной и той же компании не видят вопросы друг друга.** Большинство клиентов предпочитает оставлять свои вопросы приватно. Чтобы их могли видеть только саппорт-инженеры. Из-за этого возникала проблема, что вопросы становились приватными полностью и их не могли видеть даже сотрудники одной и той же компании с разных аккаунтов.\r\n    - **Неудобные фильтры.** Пользователи, что на странице со списком публичных тикетов невозможно ничего найти. Фильтров мало, а то, что есть не всегда работает очевидным образом.\r\n- **Переосмыслить встроенный инструмент “Version History”.**\r\n- **Улучшить аналитику.**\r\n- **Освежить внешний вид.**\r\n\r\n## Подготовка к работе\r\n\r\nПеред началом работы над редизайном была проведена подготовительная работы. Подготовлен общий план работы и проведены встречи со всеми заинтересованными лицами. Был подготовлен итоговый бриф проекта. \r\n\r\nЧасть работ, которые были проведены на этом этапе:\r\n\r\n- **Анализ текущего дизайна.** UX-тестирование текущего сайта, поиск проблем.\r\n- **Ресёрч конкурентов.** Изучение как прямых конкурентов, так и решений крупных платформ. Например, Zendesk, Freshdesk, Zoho Desk.\r\n- **Сбор и анализ существующего фидбека.** За годы работы, накопилось большое количество тикетов, комментарием и другой обратной связи касаемо работы портала. Была проведена большая работу по сбору всей это информации в один документ, её анализу и приоритизации.\r\n- **Сбор информации от саппорт-инженеров.** Инженеры поддержки активнее всего общаются с пользователями и знают детали и проблемы, которые могут быть неизвестны и неочевидны другим членам команды.\r\n- **Изучение текущих данных аналитики и список того, что хотим собирать ещё в новом дизайне.** Для работы с данными использовались:  Google Analytics (+Google Tag Manager), Matomo, внутренние инструменты.\r\n- **Сбор требований от заказчиков и всех заинтересованных лиц.**\r\n- **Подготовка брифа.** Описание проблем, целей и задач. Развёрнутый ответ на вопрос, что мы будем считать успешным редизайном.\r\n\r\n## Процесс\r\n\r\nРабота над сайтом строилась 2-4 недельными спринтами. В конце каждого спринта проводились синхронизационные встречи с заказчиками. \r\n\r\nВ начале работы над дизайном была согласована общая концепция. Отрисованы низко детализированные прототипы с решением основных UX проблем. Найден общий подход к внешнему виду.  \r\n\r\nЧтобы работа над новым дизайном была эффективной и обратная связь поступала как можно быстрее был принят рад мер:\r\n\r\n- Продукт менеджер продукта показывал прототипы и просто картинки небольшой выборке самых активных и заинтересованных пользователей саппорт-центра. Благодаря этому получалось очень быстро собрать много полезной информации, которая помогала намного быстрее замечать точки роста.\r\n- Тесное общение с разработчиками. Так дизайн значительно обгонял разработку, нужно было сразу учитывать технические ограничения. Для этого проводились постоянные встречи между разработчикам, заказчиками и дизайнером. Так мы оценивали техническую сложность каждой фичи и на основе этого принимали решение, будем мы брать её в работу или нет.\r\n- На этапе, когда появилась первая работающая версия сайта, его стали тестировать сотрудники. В первую очередь, к тестированию подключались саппорт-инженеры. На этом этапе было собрано большое количество фидбека как по техническим багам, визуальным багам, так и просто по неудачным UX-решениям.\r\n- На следующем этапе снова к фидбеку снова были подключены активные клиенты. Которые были готовы дать развёрнутый фидбек.\r\n- На одном из финальных этапов сайт стал доступен для всех пользователей, но в виде бета-версии. При этом, каждый пользователь мог вернуться к старой версии сайта. Со временем, пользователей вернувшихся на старый сайт становилось меньше. Также, мы старались собирать фидбек от таких пользователей. Чтобы понять, почему они вернулись на старую версию сайта.\r\n- К новой версии сайта была прикручена продвинутая аналитика.\r\n\r\n## Примеры реализации\r\n\r\n### Релевантные подсказки при создании тикета\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/sc-2.png\" srcset=\"/images/blog/1x/sc-2.png 1x, /images/blog/2x/sc-2@2x.png 2x\" class=\"img-fluid\">\r\n\r\n### Упрощена навигация по дискуссии с ветвистой иерархией\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/sc-3.png\" srcset=\"/images/blog/1x/sc-3.png 1x, /images/blog/2x/sc-3@2x.png 2x\" class=\"img-fluid\">\r\n\r\n### Обновлены инструменты фильтра на странице со списком тикетов\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/sc-4.png\" srcset=\"/images/blog/1x/sc-4.png 1x, /images/blog/2x/sc-4@2x.png 2x\" class=\"img-fluid\">\r\n\r\n### Сделана мобильная версия под разные размеры\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/sc-5.png\" srcset=\"/images/blog/1x/sc-5.png 1x, /images/blog/2x/sc-5@2x.png 2x\" class=\"img-fluid\">\r\n\r\n# Внутренний портал и админ-панель\r\n\r\nОтдельной крупной задачей была необходимость сделать внутренний портал для сотрудников. Главным вызовом было задача учесть флоу саппорт-инженеров из разных команд. Ингода оно сильно отличалось и нужно было найти решения, которые устроят всех.\r\n\r\nДля этого проводилось множество сложных встреч с саппорт-инженерами из разных команд и топ-саппортом. По каким-то сценариям приходилось идти на компромиссы, по каким-то — выбирать один вариант и убеждать в правильности этого варианта остальных.\r\n\r\nВ результате, судя по опросам и личным разговорам, большая часть сотрудников осталась довольна новой системой.\r\n\r\nТакже, для более гибкой работы и настройки системы под текущие нужды бизнеса была спроектирована админ-панель, где можно точечно настроить различные параметры системы.\r\n\r\nТак как решения внутренние, вдаваться в подробности и показывать скриншоты я не могу.  \r\n\r\n# Результаты\r\n\r\nВ итоге, полный переход на новую версию получился безболезненным. На каждой итерации выявлялись проблемные места и не учтённые сценарий. Большая часть из них решалась, от небольшой части осознанно отказывались.\r\n\r\nСтарая версия сайта постепенно была отключена, когда количество её пользователей стало совсем небольшим.\r\n\r\nОбщая оценка редизайна была оценена как успешная. Как со стороны клиентов, так и со стороны сотрудников. Поставленные перед редизайном цели были достигнуты:\r\n\r\n- **Уменьшилась нагрузка на саппорт-инженеров.**\r\n    - Пользователи стали чаще находить решения самостоятельно: улучшен движок поиска, предлагаются релевантные ссылки при создании тикета, улучшена фильтрация.\r\n    - Пользователи стали реже ошибаться с выбором платформы/продукта и других деталей при создании тикета.\r\n    - Во внутреннем портале появились инструменты, помогающие саппорт-инженерам быстрее отвечать на тикеты, ответ на которые уже давался ранее.\r\n- **Не отформатированные тикеты появляются гораздо реже.** Решилась проблема с тем, что пользователи не понимали, как отправлять аттачи.\r\n- **Уменьшилось количество проблем, когда пользователи не получают уведомления вовремя.**\r\n    - В настройках уведомлений появился отдельный чекбокс, для получения уведомлений от саппорт-центра (раньше был единый чекбокс, для всех почтовых рассылок).\r\n    - Даже если пользователь отключил уведомления от таких рассылок, то саппорт-инженер будет об этом знать. И, если у пользователя возникают с этим проблемы, подсказать варианты решения.\r\n    - Сами почтовые уведомления стали понятнее, появилась возможность подключить браузерные уведомления.\r\n    - Появилась возможность подписать на рассылку на любой тикет со страницы этого тикета.\r\n- **Более точечно настроена аналитика.**\r\n    - Саппорт-инженер теперь может видеть карточку пользователя с историей посещений тикетов и документов в документации. Так инженер поддержки сразу может понять, какие ссылки есть смысл советовать, а какие — нет, так как пользователь их уже посещал.\r\n    - Добавлены ивенты на целевые действия.\r\n    - Созданный внутренние дашборды с анализом различных данных, необходимых для оценки поступаемого  количества тикетов и оценки эффективности саппорта.\r\n- **Поиск по тикетам стал гибче и проще.**\r\n    - Были докручены мета-теги, чтобы тикеты лучше искались поисковиками.\r\n    - Переосмыслены фильтры, добавлены готовые пресеты и возможность подписаться на созданный фильтр.\r\n    - Оптимизирована внутренняя страница поиска.\r\n- **Сделана мобильная версия клиентского портала.**', `Summary`='', `FormatterID`='neasden', `OriginalAlias`='support-center', `Uploads`='a:5:{i:0;s:24:\"/images/blog/1x/sc-1.png\";i:1;s:15:\"empty-image.jpg\";i:2;s:24:\"/images/blog/1x/sc-2.png\";i:3;s:24:\"/images/blog/1x/sc-3.png\";i:4;s:24:\"/images/blog/1x/sc-4.png\";}', `IsPublished`='1', `IsCommentable`='0', `IsVisible`='1', `IsFavourite`='1', `Stamp`='1711383800', `LastModified`='1711831845', `Offset`='14400', `IsDST`='0', `IsIndexed`='0', `IsExternal`='0', `ReadCount`='4', `SourceID`='0', `SourceNoteID`='0', `SourceNoteURL`='', `SourceNoteJSONURL`='', `SourceNoteData`='' WHERE `SubsetID`=1 AND (`ID`=1);

UPDATE `e2BlogNotes` SET `Uploads`='a:6:{i:0;s:24:"/images/blog/1x/sc-1.png";i:1;s:15:"empty-image.jpg";i:2;s:24:"/images/blog/1x/sc-2.png";i:3;s:24:"/images/blog/1x/sc-3.png";i:4;s:24:"/images/blog/1x/sc-4.png";i:5;s:24:"/images/blog/1x/sc-5.png";}' WHERE `SubsetID`=1 AND `ID`=1;

UPDATE `e2BlogNotes` SET `SubsetID`='1', `Title`='Support Center', `Text`='Система поддержки пользователей. Включает различные информационные ресурсы: вопросы от пользователей, статьи в базе знаний и истории версий.\r\n\r\nЕжедневно в Support Center создаются сотни новых вопросов и на них отвечают десятки саппорт-инженеров. За годы работы старый интерфейс устарел как внешне, так и с точки зрения удобства и функциональности. Пришла задача полностью переработать платформу, с учётом всех бизнес-требований.\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/sc-1.png\" srcset=\"/images/blog/1x/sc-1.png 1x, /images/blog/2x/sc-1@2x.png 2x\" class=\"img-fluid\">\r\n\r\n# Вводная\r\n\r\nСистема состоит из трёх основных порталов:\r\n\r\n- Клиентский портал\r\n- Внутренний портал для сотрудников\r\n- Админ-панель\r\n\r\nКаждым порталом пользуется свой сегмент пользователей. Клиенты компании ожидают простой и понятный интерфейс . В то время как саппорт-инженеры привыкли к определенным сценариям, которые тоже нужно было сохранить.\r\n\r\n# Клиентский портал\r\n\r\nНа этот ресурс были задействованы основные силы. Клиентский портал даёт возможность клиентам задавать вопросы технического характера и получать на них ответы. \r\n\r\nПеред редизайном ставились следующие задачи:\r\n\r\n- **Снизить нагрузку на саппорт-инженеров.** Помочь пользователям находить ответы самостоятельно, если на вопрос уже отвечали ранее или решение описано в документации.\r\n- **Улучшить UX.** Накопился список проблем, которые нужно было решать:\r\n    - **Пользователи выбирают неверный продукт при создании вопроса.** DevExpress разрабатывает и поддерживает десятки продуктов. У каждого продукта могут быть разные платформы и версии. Иногда важно знать, какая ОС установлена у пользователя, каким IDE он пользуется. Нужно было сделать так, чтобы у пользователя не возникали проблемы при выборе нужных значений. Помочь ему на этом пути.\r\n    - **Возникают проблемы при форматировании текста.** Пользователи приходят в поддержку с техническими проблемами. Описание проблемы содержит куски кода или целые архивы с проектами. В старой версии сайта пользователи путались в текстовом редакторе и отправляли не отформатированные куски куда, которые сливались с обычным текстом. Также, пользователи не всегда понимали как аттачить файлы. Всё это приводило к дополнительной нагрузке на саппорт-инженеров.\r\n    - **Пользователи не замечают уведомления об ответах в их тикете.** Проблема касалась как веб-интерфейса, так и уведомлений приходящих пользователю на почту. Пользователи либо не замечали уведомления, либо не понимали к чему они относятся, либо ранее отключали уведомления и забывали об этом. В связи с этим, среднее время на решение таких тикетов значительно увеличивалось.\r\n    - **Клиенты из одной и той же компании не видят вопросы друг друга.** Большинство клиентов предпочитает оставлять свои вопросы приватно. Чтобы их могли видеть только саппорт-инженеры. Из-за этого возникала проблема, что вопросы становились приватными полностью и их не могли видеть даже сотрудники одной и той же компании с разных аккаунтов.\r\n    - **Неудобные фильтры.** Пользователи, что на странице со списком публичных тикетов невозможно ничего найти. Фильтров мало, а то, что есть не всегда работает очевидным образом.\r\n- **Переосмыслить встроенный инструмент “Version History”.**\r\n- **Улучшить аналитику.**\r\n- **Освежить внешний вид.**\r\n\r\n## Подготовка к работе\r\n\r\nПеред началом работы над редизайном была проведена подготовительная работы. Подготовлен общий план работы и проведены встречи со всеми заинтересованными лицами. Был подготовлен итоговый бриф проекта. \r\n\r\nЧасть работ, которые были проведены на этом этапе:\r\n\r\n- **Анализ текущего дизайна.** UX-тестирование текущего сайта, поиск проблем.\r\n- **Ресёрч конкурентов.** Изучение как прямых конкурентов, так и решений крупных платформ. Например, Zendesk, Freshdesk, Zoho Desk.\r\n- **Сбор и анализ существующего фидбека.** За годы работы, накопилось большое количество тикетов, комментарием и другой обратной связи касаемо работы портала. Была проведена большая работу по сбору всей это информации в один документ, её анализу и приоритизации.\r\n- **Сбор информации от саппорт-инженеров.** Инженеры поддержки активнее всего общаются с пользователями и знают детали и проблемы, которые могут быть неизвестны и неочевидны другим членам команды.\r\n- **Изучение текущих данных аналитики и список того, что хотим собирать ещё в новом дизайне.** Для работы с данными использовались:  Google Analytics (+Google Tag Manager), Matomo, внутренние инструменты.\r\n- **Сбор требований от заказчиков и всех заинтересованных лиц.**\r\n- **Подготовка брифа.** Описание проблем, целей и задач. Развёрнутый ответ на вопрос, что мы будем считать успешным редизайном.\r\n\r\n## Процесс\r\n\r\nРабота над сайтом строилась 2-4 недельными спринтами. В конце каждого спринта проводились синхронизационные встречи с заказчиками. \r\n\r\nВ начале работы над дизайном была согласована общая концепция. Отрисованы низко детализированные прототипы с решением основных UX проблем. Найден общий подход к внешнему виду.  \r\n\r\nЧтобы работа над новым дизайном была эффективной и обратная связь поступала как можно быстрее был принят рад мер:\r\n\r\n- Продукт менеджер продукта показывал прототипы и просто картинки небольшой выборке самых активных и заинтересованных пользователей саппорт-центра. Благодаря этому получалось очень быстро собрать много полезной информации, которая помогала намного быстрее замечать точки роста.\r\n- Тесное общение с разработчиками. Так дизайн значительно обгонял разработку, нужно было сразу учитывать технические ограничения. Для этого проводились постоянные встречи между разработчикам, заказчиками и дизайнером. Так мы оценивали техническую сложность каждой фичи и на основе этого принимали решение, будем мы брать её в работу или нет.\r\n- На этапе, когда появилась первая работающая версия сайта, его стали тестировать сотрудники. В первую очередь, к тестированию подключались саппорт-инженеры. На этом этапе было собрано большое количество фидбека как по техническим багам, визуальным багам, так и просто по неудачным UX-решениям.\r\n- На следующем этапе снова к фидбеку снова были подключены активные клиенты. Которые были готовы дать развёрнутый фидбек.\r\n- На одном из финальных этапов сайт стал доступен для всех пользователей, но в виде бета-версии. При этом, каждый пользователь мог вернуться к старой версии сайта. Со временем, пользователей вернувшихся на старый сайт становилось меньше. Также, мы старались собирать фидбек от таких пользователей. Чтобы понять, почему они вернулись на старую версию сайта.\r\n- К новой версии сайта была прикручена продвинутая аналитика.\r\n\r\n## Примеры реализации\r\n\r\n### Релевантные подсказки при создании тикета\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/sc-2.png\" srcset=\"/images/blog/1x/sc-2.png 1x, /images/blog/2x/sc-2@2x.png 2x\" class=\"img-fluid\">\r\n\r\n### Упрощена навигация по дискуссии с ветвистой иерархией\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/sc-3.png\" srcset=\"/images/blog/1x/sc-3.png 1x, /images/blog/2x/sc-3@2x.png 2x\" class=\"img-fluid\">\r\n\r\n### Обновлены инструменты фильтра на странице со списком тикетов\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/sc-4.png\" srcset=\"/images/blog/1x/sc-4.png 1x, /images/blog/2x/sc-4@2x.png 2x\" class=\"img-fluid\">\r\n\r\n### Сделана мобильная версия под разные размеры\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/sc-5.png\" srcset=\"/images/blog/1x/sc-5.png 1x, /images/blog/2x/sc-5@2x.png 2x\" class=\"img-fluid\">\r\n\r\n# Внутренний портал и админ-панель\r\n\r\nОтдельной крупной задачей была необходимость сделать внутренний портал для сотрудников. Главным вызовом было задача учесть флоу саппорт-инженеров из разных команд. Ингода оно сильно отличалось и нужно было найти решения, которые устроят всех.\r\n\r\nДля этого проводилось множество сложных встреч с саппорт-инженерами из разных команд и топ-саппортом. По каким-то сценариям приходилось идти на компромиссы, по каким-то — выбирать один вариант и убеждать в правильности этого варианта остальных.\r\n\r\nВ результате, судя по опросам и личным разговорам, большая часть сотрудников осталась довольна новой системой.\r\n\r\nТакже, для более гибкой работы и настройки системы под текущие нужды бизнеса была спроектирована админ-панель, где можно точечно настроить различные параметры системы.\r\n\r\nТак как решения внутренние, вдаваться в подробности и показывать скриншоты я не могу.  \r\n\r\n# Результаты\r\n\r\nВ итоге, полный переход на новую версию получился безболезненным. На каждой итерации выявлялись проблемные места и не учтённые сценарий. Большая часть из них решалась, от небольшой части осознанно отказывались.\r\n\r\nСтарая версия сайта постепенно была отключена, когда количество её пользователей стало совсем небольшим.\r\n\r\nОбщая оценка редизайна была оценена как успешная. Как со стороны клиентов, так и со стороны сотрудников. Поставленные перед редизайном цели были достигнуты:\r\n\r\n- **Уменьшилась нагрузка на саппорт-инженеров.**\r\n    - Пользователи стали чаще находить решения самостоятельно: улучшен движок поиска, предлагаются релевантные ссылки при создании тикета, улучшена фильтрация.\r\n    - Пользователи стали реже ошибаться с выбором платформы/продукта и других деталей при создании тикета.\r\n    - Во внутреннем портале появились инструменты, помогающие саппорт-инженерам быстрее отвечать на тикеты, ответ на которые уже давался ранее.\r\n- **Не отформатированные тикеты появляются гораздо реже.** Решилась проблема с тем, что пользователи не понимали, как отправлять аттачи.\r\n- **Уменьшилось количество проблем, когда пользователи не получают уведомления вовремя.**\r\n    - В настройках уведомлений появился отдельный чекбокс, для получения уведомлений от саппорт-центра (раньше был единый чекбокс, для всех почтовых рассылок).\r\n    - Даже если пользователь отключил уведомления от таких рассылок, то саппорт-инженер будет об этом знать. И, если у пользователя возникают с этим проблемы, подсказать варианты решения.\r\n    - Сами почтовые уведомления стали понятнее, появилась возможность подключить браузерные уведомления.\r\n    - Появилась возможность подписать на рассылку на любой тикет со страницы этого тикета.\r\n- **Более точечно настроена аналитика.**\r\n    - Саппорт-инженер теперь может видеть карточку пользователя с историей посещений тикетов и документов в документации. Так инженер поддержки сразу может понять, какие ссылки есть смысл советовать, а какие — нет, так как пользователь их уже посещал.\r\n    - Добавлены ивенты на целевые действия.\r\n    - Созданный внутренние дашборды с анализом различных данных, необходимых для оценки поступаемого  количества тикетов и оценки эффективности саппорта.\r\n- **Поиск по тикетам стал гибче и проще.**\r\n    - Были докручены мета-теги, чтобы тикеты лучше искались поисковиками.\r\n    - Переосмыслены фильтры, добавлены готовые пресеты и возможность подписаться на созданный фильтр.\r\n    - Оптимизирована внутренняя страница поиска.\r\n- **Сделана мобильная версия клиентского портала.**', `Summary`='', `FormatterID`='neasden', `OriginalAlias`='support-center', `Uploads`='a:5:{i:0;s:24:\"/images/blog/1x/sc-1.png\";i:1;s:15:\"empty-image.jpg\";i:2;s:24:\"/images/blog/1x/sc-2.png\";i:3;s:24:\"/images/blog/1x/sc-3.png\";i:4;s:24:\"/images/blog/1x/sc-4.png\";}', `IsPublished`='1', `IsCommentable`='0', `IsVisible`='1', `IsFavourite`='1', `Stamp`='1711383800', `LastModified`='1711831845', `Offset`='14400', `IsDST`='0', `IsIndexed`='1', `IsExternal`='0', `ReadCount`='4', `SourceID`='0', `SourceNoteID`='0', `SourceNoteURL`='', `SourceNoteJSONURL`='', `SourceNoteData`='' WHERE `SubsetID`=1 AND (`ID`=1);

UPDATE `e2BlogAliases` SET `EntityType`='n', `EntityID`='4', `Alias`='documentation', `Stamp`='1711832025' WHERE `SubsetID`=1 AND (`ID`=4);

UPDATE `e2BlogNotes` SET `SubsetID`='1', `Title`='Documentation', `Text`='DevExpress Documentation — одна из самый объемных документации на рынке. Содержит несколько сотен тысяч статей и АПИ. Внутри для её работы создана целая экосистема, включающая в себя множество отдельных компонентов.\r\n\r\n# Вводная\r\n\r\nДолгое время единой системы документации не было. Всё состояло из отдельных проектов и отдавалось пользователям в формате довольно простых HTML файлов, либо в CHM формате.\r\n\r\nС развитием продуктовой линейки и увеличение штата технических писателей такой подход стал приносить неудобства как для сотрудников, так и для пользователей.\r\n\r\nУчитывай количество и объем документов, было принято решение сделать собственную систему документации.\r\n\r\n# Задачи\r\n\r\nСистема документации состоит из различных функциональных компонентов. При разработке дизайна нужно было учесть следующие факторы:\r\n\r\n- **Огромное количество написанных топиков.** Разные топики были написаны разными людьми, в разное время. Поэтому, сильно отличались по структуре. Нужно было найти такой подход к стилям, чтобы старые документы не ломали внешний вид страниц.\r\n- **Документацию читают с разных устройств.** Нужно было сделать документацию такой, чтобы её можно было читать на любом экране.\r\n- **Навигация по проекту должна быть удобной.** Структура каждого проекта документации древовидна, один проект может быть вложен в другой и так далее. Нужно сделать так, чтобы пользователь понимал, на каком уровне он находится и мог легко навигироваться между документами.\r\n- **Поиск по документу должен быть удобным.** Документы внутри проекта могут быть большими и сложными. Нужно сделать так, чтобы пользователь мог быстро найти ответ на свой вопрос внутри конкретного документа.\r\n- **Сделать разводящую страницу по проектам.** Новая система документации собирает все проекты в рамках одного сайта. Важно было сделать страницу, где пользователь может выбрать нужный ему проект.\r\n- **Содержимое документа может варьировать от версии продукта и его платформы.**\r\n- **Совместно с техническими писателями подготовить гайдлайны по оформлению топиков.**\r\n- **Учесть оффлайн документацию.** Часть пользователей, в свете специфики бизнеса, используют активно оффлайн версию документации. А именно, CHM. Поэтому, нужно было подготовить стили для оффлайн документации. Учитывая, что CHM поддерживает CSS уровня Internet Explorer 7 (и то не всегда) — это было очень непростой задачей.\r\n- **Поддержать интеграцию с саппорт-центром.** Сегмент пользователей читающих документацию и создающих тикеты в саппорт-центре тесно связан. Важно было найти такое решение, чтобы пользователь имел возможность создать тикет прямо из документации, если ему не понятен какой-то из топиков. И наоборот, если ссылку на топик дал сотрудник саппорт-центра, то нужно иметь возможность дополнительно уточнить у пользователя, помог ли ему этот топик.\r\n- **Сделать документацию доступной.** Сайт документации должен удовлетворять требования A11Y, чтобы им было удобно пользоваться всем пользователям.\r\n\r\n# Результат\r\n\r\nНовая система документации получила положительный фидбек как со стороны пользователей, так и со стороны технических писателей. Основная часть задач была решения в рамках основной работы над проектом, многие дополнительные фичи — в рамках доработок по проекту.\r\n\r\nКроме работы непосредственно над дизайном, я внёс большой вклад во фронденд составляющую сайта:\r\n\r\n- Написал несколько функциональных фич.\r\n- Обновил семантику сайта, для решения проблем связанных с доступностью.\r\n- Активно работал со стилям в коде.\r\n\r\n## Примеры реализации\r\n\r\n### Стили, которые работают для разных топиков\r\n\r\n### Доступность со всех устройств\r\n\r\n### Навигация по документу\r\n\r\n### Разводящая страница\r\n\r\n### Версионность\r\n\r\n### Интеграция с саппорт-центром\r\n\r\n### Оффлайн документация\r\n\r\n### Доступность', `Summary`='', `FormatterID`='neasden', `OriginalAlias`='documentation', `Uploads`='a:0:{}', `IsPublished`='1', `IsCommentable`='0', `IsVisible`='1', `IsFavourite`='1', `Stamp`='1711383886', `LastModified`='1711832025', `Offset`='14400', `IsDST`='0', `IsIndexed`='0', `IsExternal`='0', `ReadCount`='5', `SourceID`='0', `SourceNoteID`='0', `SourceNoteURL`='', `SourceNoteJSONURL`='', `SourceNoteData`='' WHERE `SubsetID`=1 AND (`ID`=4);

UPDATE `e2BlogNotes` SET `SubsetID`='1', `Title`='Documentation', `Text`='DevExpress Documentation — одна из самый объемных документации на рынке. Содержит несколько сотен тысяч статей и АПИ. Внутри для её работы создана целая экосистема, включающая в себя множество отдельных компонентов.\r\n\r\n# Вводная\r\n\r\nДолгое время единой системы документации не было. Всё состояло из отдельных проектов и отдавалось пользователям в формате довольно простых HTML файлов, либо в CHM формате.\r\n\r\nС развитием продуктовой линейки и увеличение штата технических писателей такой подход стал приносить неудобства как для сотрудников, так и для пользователей.\r\n\r\nУчитывай количество и объем документов, было принято решение сделать собственную систему документации.\r\n\r\n# Задачи\r\n\r\nСистема документации состоит из различных функциональных компонентов. При разработке дизайна нужно было учесть следующие факторы:\r\n\r\n- **Огромное количество написанных топиков.** Разные топики были написаны разными людьми, в разное время. Поэтому, сильно отличались по структуре. Нужно было найти такой подход к стилям, чтобы старые документы не ломали внешний вид страниц.\r\n- **Документацию читают с разных устройств.** Нужно было сделать документацию такой, чтобы её можно было читать на любом экране.\r\n- **Навигация по проекту должна быть удобной.** Структура каждого проекта документации древовидна, один проект может быть вложен в другой и так далее. Нужно сделать так, чтобы пользователь понимал, на каком уровне он находится и мог легко навигироваться между документами.\r\n- **Поиск по документу должен быть удобным.** Документы внутри проекта могут быть большими и сложными. Нужно сделать так, чтобы пользователь мог быстро найти ответ на свой вопрос внутри конкретного документа.\r\n- **Сделать разводящую страницу по проектам.** Новая система документации собирает все проекты в рамках одного сайта. Важно было сделать страницу, где пользователь может выбрать нужный ему проект.\r\n- **Содержимое документа может варьировать от версии продукта и его платформы.**\r\n- **Совместно с техническими писателями подготовить гайдлайны по оформлению топиков.**\r\n- **Учесть оффлайн документацию.** Часть пользователей, в свете специфики бизнеса, используют активно оффлайн версию документации. А именно, CHM. Поэтому, нужно было подготовить стили для оффлайн документации. Учитывая, что CHM поддерживает CSS уровня Internet Explorer 7 (и то не всегда) — это было очень непростой задачей.\r\n- **Поддержать интеграцию с саппорт-центром.** Сегмент пользователей читающих документацию и создающих тикеты в саппорт-центре тесно связан. Важно было найти такое решение, чтобы пользователь имел возможность создать тикет прямо из документации, если ему не понятен какой-то из топиков. И наоборот, если ссылку на топик дал сотрудник саппорт-центра, то нужно иметь возможность дополнительно уточнить у пользователя, помог ли ему этот топик.\r\n- **Сделать документацию доступной.** Сайт документации должен удовлетворять требования A11Y, чтобы им было удобно пользоваться всем пользователям.\r\n\r\n# Результат\r\n\r\nНовая система документации получила положительный фидбек как со стороны пользователей, так и со стороны технических писателей. Основная часть задач была решения в рамках основной работы над проектом, многие дополнительные фичи — в рамках доработок по проекту.\r\n\r\nКроме работы непосредственно над дизайном, я внёс большой вклад во фронденд составляющую сайта:\r\n\r\n- Написал несколько функциональных фич.\r\n- Обновил семантику сайта, для решения проблем связанных с доступностью.\r\n- Активно работал со стилям в коде.\r\n\r\n## Примеры реализации\r\n\r\n### Стили, которые работают для разных топиков\r\n\r\n### Доступность со всех устройств\r\n\r\n### Навигация по документу\r\n\r\n### Разводящая страница\r\n\r\n### Версионность\r\n\r\n### Интеграция с саппорт-центром\r\n\r\n### Оффлайн документация\r\n\r\n### Доступность', `Summary`='', `FormatterID`='neasden', `OriginalAlias`='documentation', `Uploads`='a:0:{}', `IsPublished`='1', `IsCommentable`='0', `IsVisible`='1', `IsFavourite`='1', `Stamp`='1711383886', `LastModified`='1711832025', `Offset`='14400', `IsDST`='0', `IsIndexed`='1', `IsExternal`='0', `ReadCount`='5', `SourceID`='0', `SourceNoteID`='0', `SourceNoteURL`='', `SourceNoteJSONURL`='', `SourceNoteData`='' WHERE `SubsetID`=1 AND (`ID`=4);

UPDATE `e2BlogNotes` SET `SubsetID`='1', `Title`='Support Center', `Text`='Система поддержки пользователей. Включает различные информационные ресурсы: вопросы от пользователей, статьи в базе знаний и истории версий.\r\n\r\nЕжедневно в Support Center создаются сотни новых вопросов и на них отвечают десятки саппорт-инженеров. За годы работы старый интерфейс устарел как внешне, так и с точки зрения удобства и функциональности. Пришла задача полностью переработать платформу, с учётом всех бизнес-требований.\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/sc-1.png\" srcset=\"/images/blog/1x/sc-1.png 1x, /images/blog/2x/sc-1@2x.png 2x\" class=\"img-fluid\">\r\n\r\n# Вводная\r\n\r\nСистема состоит из трёх основных порталов:\r\n\r\n- Клиентский портал\r\n- Внутренний портал для сотрудников\r\n- Админ-панель\r\n\r\nКаждым порталом пользуется свой сегмент пользователей. Клиенты компании ожидают простой и понятный интерфейс . В то время как саппорт-инженеры привыкли к определенным сценариям, которые тоже нужно было сохранить.\r\n\r\n# Клиентский портал\r\n\r\nНа этот ресурс были задействованы основные силы. Клиентский портал даёт возможность клиентам задавать вопросы технического характера и получать на них ответы. \r\n\r\nПеред редизайном ставились следующие задачи:\r\n\r\n- **Снизить нагрузку на саппорт-инженеров.** Помочь пользователям находить ответы самостоятельно, если на вопрос уже отвечали ранее или решение описано в документации.\r\n- **Улучшить UX.** Накопился список проблем, которые нужно было решать:\r\n    - **Пользователи выбирают неверный продукт при создании вопроса.** DevExpress разрабатывает и поддерживает десятки продуктов. У каждого продукта могут быть разные платформы и версии. Иногда важно знать, какая ОС установлена у пользователя, каким IDE он пользуется. Нужно было сделать так, чтобы у пользователя не возникали проблемы при выборе нужных значений. Помочь ему на этом пути.\r\n    - **Возникают проблемы при форматировании текста.** Пользователи приходят в поддержку с техническими проблемами. Описание проблемы содержит куски кода или целые архивы с проектами. В старой версии сайта пользователи путались в текстовом редакторе и отправляли не отформатированные куски куда, которые сливались с обычным текстом. Также, пользователи не всегда понимали как аттачить файлы. Всё это приводило к дополнительной нагрузке на саппорт-инженеров.\r\n    - **Пользователи не замечают уведомления об ответах в их тикете.** Проблема касалась как веб-интерфейса, так и уведомлений приходящих пользователю на почту. Пользователи либо не замечали уведомления, либо не понимали к чему они относятся, либо ранее отключали уведомления и забывали об этом. В связи с этим, среднее время на решение таких тикетов значительно увеличивалось.\r\n    - **Клиенты из одной и той же компании не видят вопросы друг друга.** Большинство клиентов предпочитает оставлять свои вопросы приватно. Чтобы их могли видеть только саппорт-инженеры. Из-за этого возникала проблема, что вопросы становились приватными полностью и их не могли видеть даже сотрудники одной и той же компании с разных аккаунтов.\r\n    - **Неудобные фильтры.** Пользователи, что на странице со списком публичных тикетов невозможно ничего найти. Фильтров мало, а то, что есть не всегда работает очевидным образом.\r\n- **Переосмыслить встроенный инструмент “Version History”.**\r\n- **Улучшить аналитику.**\r\n- **Освежить внешний вид.**\r\n\r\n## Подготовка к работе\r\n\r\nПеред началом работы над редизайном была проведена подготовительная работы. Подготовлен общий план работы и проведены встречи со всеми заинтересованными лицами. Был подготовлен итоговый бриф проекта. \r\n\r\nЧасть работ, которые были проведены на этом этапе:\r\n\r\n- **Анализ текущего дизайна.** UX-тестирование текущего сайта, поиск проблем.\r\n- **Ресёрч конкурентов.** Изучение как прямых конкурентов, так и решений крупных платформ. Например, Zendesk, Freshdesk, Zoho Desk.\r\n- **Сбор и анализ существующего фидбека.** За годы работы, накопилось большое количество тикетов, комментарием и другой обратной связи касаемо работы портала. Была проведена большая работу по сбору всей это информации в один документ, её анализу и приоритизации.\r\n- **Сбор информации от саппорт-инженеров.** Инженеры поддержки активнее всего общаются с пользователями и знают детали и проблемы, которые могут быть неизвестны и неочевидны другим членам команды.\r\n- **Изучение текущих данных аналитики и список того, что хотим собирать ещё в новом дизайне.** Для работы с данными использовались:  Google Analytics (+Google Tag Manager), Matomo, внутренние инструменты.\r\n- **Сбор требований от заказчиков и всех заинтересованных лиц.**\r\n- **Подготовка брифа.** Описание проблем, целей и задач. Развёрнутый ответ на вопрос, что мы будем считать успешным редизайном.\r\n\r\n## Процесс\r\n\r\nРабота над сайтом строилась 2-4 недельными спринтами. В конце каждого спринта проводились синхронизационные встречи с заказчиками. \r\n\r\nВ начале работы над дизайном была согласована общая концепция. Отрисованы низко детализированные прототипы с решением основных UX проблем. Найден общий подход к внешнему виду.  \r\n\r\nЧтобы работа над новым дизайном была эффективной и обратная связь поступала как можно быстрее был принят рад мер:\r\n\r\n- Продукт менеджер продукта показывал прототипы и просто картинки небольшой выборке самых активных и заинтересованных пользователей саппорт-центра. Благодаря этому получалось очень быстро собрать много полезной информации, которая помогала намного быстрее замечать точки роста.\r\n- Тесное общение с разработчиками. Так дизайн значительно обгонял разработку, нужно было сразу учитывать технические ограничения. Для этого проводились постоянные встречи между разработчикам, заказчиками и дизайнером. Так мы оценивали техническую сложность каждой фичи и на основе этого принимали решение, будем мы брать её в работу или нет.\r\n- На этапе, когда появилась первая работающая версия сайта, его стали тестировать сотрудники. В первую очередь, к тестированию подключались саппорт-инженеры. На этом этапе было собрано большое количество фидбека как по техническим багам, визуальным багам, так и просто по неудачным UX-решениям.\r\n- На следующем этапе снова к фидбеку снова были подключены активные клиенты. Которые были готовы дать развёрнутый фидбек.\r\n- На одном из финальных этапов сайт стал доступен для всех пользователей, но в виде бета-версии. При этом, каждый пользователь мог вернуться к старой версии сайта. Со временем, пользователей вернувшихся на старый сайт становилось меньше. Также, мы старались собирать фидбек от таких пользователей. Чтобы понять, почему они вернулись на старую версию сайта.\r\n- К новой версии сайта была прикручена продвинутая аналитика.\r\n\r\n## Примеры реализации\r\n\r\n### Релевантные подсказки при создании тикета\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/sc-2.png\" srcset=\"/images/blog/1x/sc-2.png 1x, /images/blog/2x/sc-2@2x.png 2x\" class=\"img-fluid\">\r\n\r\n### Упрощена навигация по дискуссии с ветвистой иерархией\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/sc-3.png\" srcset=\"/images/blog/1x/sc-3.png 1x, /images/blog/2x/sc-3@2x.png 2x\" class=\"img-fluid\">\r\n\r\n### Обновлены инструменты фильтра на странице со списком тикетов\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/sc-4.png\" srcset=\"/images/blog/1x/sc-4.png 1x, /images/blog/2x/sc-4@2x.png 2x\" class=\"img-fluid\">\r\n\r\n### Сделана мобильная версия под разные размеры\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/sc-5.png\" srcset=\"/images/blog/1x/sc-5.png 1x, /images/blog/2x/sc-5@2x.png 2x\" class=\"img-fluid\">\r\n\r\n# Внутренний портал и админ-панель\r\n\r\nОтдельной крупной задачей была необходимость сделать внутренний портал для сотрудников. Главным вызовом было задача учесть флоу саппорт-инженеров из разных команд. Ингода оно сильно отличалось и нужно было найти решения, которые устроят всех.\r\n\r\nДля этого проводилось множество сложных встреч с саппорт-инженерами из разных команд и топ-саппортом. По каким-то сценариям приходилось идти на компромиссы, по каким-то — выбирать один вариант и убеждать в правильности этого варианта остальных.\r\n\r\nВ результате, судя по опросам и личным разговорам, большая часть сотрудников осталась довольна новой системой.\r\n\r\nТакже, для более гибкой работы и настройки системы под текущие нужды бизнеса была спроектирована админ-панель, где можно точечно настроить различные параметры системы.\r\n\r\nТак как решения внутренние, вдаваться в подробности и показывать скриншоты я не могу.  \r\n\r\n# Результаты\r\n\r\nВ итоге, полный переход на новую версию получился безболезненным. На каждой итерации выявлялись проблемные места и не учтённые сценарий. Большая часть из них решалась, от небольшой части осознанно отказывались.\r\n\r\nСтарая версия сайта постепенно была отключена, когда количество её пользователей стало совсем небольшим.\r\n\r\nОбщая оценка редизайна была оценена как успешная. Как со стороны клиентов, так и со стороны сотрудников. Поставленные перед редизайном цели были достигнуты:\r\n\r\n- **Уменьшилась нагрузка на саппорт-инженеров.**\r\n    - Пользователи стали чаще находить решения самостоятельно: улучшен движок поиска, предлагаются релевантные ссылки при создании тикета, улучшена фильтрация.\r\n    - Пользователи стали реже ошибаться с выбором платформы/продукта и других деталей при создании тикета.\r\n    - Во внутреннем портале появились инструменты, помогающие саппорт-инженерам быстрее отвечать на тикеты, ответ на которые уже давался ранее.\r\n- **Не отформатированные тикеты появляются гораздо реже.** Решилась проблема с тем, что пользователи не понимали, как отправлять аттачи.\r\n- **Уменьшилось количество проблем, когда пользователи не получают уведомления вовремя.**\r\n    - В настройках уведомлений появился отдельный чекбокс, для получения уведомлений от саппорт-центра (раньше был единый чекбокс, для всех почтовых рассылок).\r\n    - Даже если пользователь отключил уведомления от таких рассылок, то саппорт-инженер будет об этом знать. И, если у пользователя возникают с этим проблемы, подсказать варианты решения.\r\n    - Сами почтовые уведомления стали понятнее, появилась возможность подключить браузерные уведомления.\r\n    - Появилась возможность подписать на рассылку на любой тикет со страницы этого тикета.\r\n- **Более точечно настроена аналитика.**\r\n    - Саппорт-инженер теперь может видеть карточку пользователя с историей посещений тикетов и документов в документации. Так инженер поддержки сразу может понять, какие ссылки есть смысл советовать, а какие — нет, так как пользователь их уже посещал.\r\n    - Добавлены ивенты на целевые действия.\r\n    - Созданный внутренние дашборды с анализом различных данных, необходимых для оценки поступаемого  количества тикетов и оценки эффективности саппорта.\r\n- **Поиск по тикетам стал гибче и проще.**\r\n    - Были докручены мета-теги, чтобы тикеты лучше искались поисковиками.\r\n    - Переосмыслены фильтры, добавлены готовые пресеты и возможность подписаться на созданный фильтр.\r\n    - Оптимизирована внутренняя страница поиска.\r\n- **Сделана мобильная версия клиентского портала.**', `Summary`='', `FormatterID`='neasden', `OriginalAlias`='support-center', `Uploads`='a:6:{i:0;s:24:\"/images/blog/1x/sc-1.png\";i:1;s:15:\"empty-image.jpg\";i:2;s:24:\"/images/blog/1x/sc-2.png\";i:3;s:24:\"/images/blog/1x/sc-3.png\";i:4;s:24:\"/images/blog/1x/sc-4.png\";i:9;s:24:\"/images/blog/1x/sc-5.png\";}', `IsPublished`='1', `IsCommentable`='0', `IsVisible`='1', `IsFavourite`='1', `Stamp`='1711383800', `LastModified`='1711831845', `Offset`='14400', `IsDST`='0', `IsIndexed`='1', `IsExternal`='0', `ReadCount`='4', `SourceID`='0', `SourceNoteID`='0', `SourceNoteURL`='', `SourceNoteJSONURL`='', `SourceNoteData`='' WHERE `SubsetID`=1 AND (`ID`=1);

UPDATE `e2BlogAliases` SET `EntityType`='n', `EntityID`='4', `Alias`='documentation', `Stamp`='1711903201' WHERE `SubsetID`=1 AND (`ID`=4);

UPDATE `e2BlogNotes` SET `SubsetID`='1', `Title`='Documentation', `Text`='DevExpress Documentation — одна из самый объемных документации на рынке. Содержит несколько сотен тысяч статей и АПИ. Внутри для её работы создана целая экосистема, включающая в себя множество отдельных компонентов.\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/docs-1.png\" srcset=\"/images/blog/1x/docs-1.png 1x, /images/blog/2x/docs-1@2x.png 2x\" class=\"img-fluid\">\r\n\r\n# Вводная\r\n\r\nДолгое время единой системы документации не было. Всё состояло из отдельных проектов и отдавалось пользователям в формате довольно простых HTML файлов, либо в CHM формате.\r\n\r\nС развитием продуктовой линейки и увеличение штата технических писателей такой подход стал приносить неудобства как для сотрудников, так и для пользователей.\r\n\r\nУчитывай количество и объем документов, было принято решение сделать собственную систему документации.\r\n\r\n# Задачи\r\n\r\nСистема документации состоит из различных функциональных компонентов. При разработке дизайна нужно было учесть следующие факторы:\r\n\r\n- **Огромное количество написанных топиков.** Разные топики были написаны разными людьми, в разное время. Поэтому, сильно отличались по структуре. Нужно было найти такой подход к стилям, чтобы старые документы не ломали внешний вид страниц.\r\n- **Документацию читают с разных устройств.** Нужно было сделать документацию такой, чтобы её можно было читать на любом экране.\r\n- **Навигация по проекту должна быть удобной.** Структура каждого проекта документации древовидна, один проект может быть вложен в другой и так далее. Нужно сделать так, чтобы пользователь понимал, на каком уровне он находится и мог легко навигироваться между документами.\r\n- **Поиск по документу должен быть удобным.** Документы внутри проекта могут быть большими и сложными. Нужно сделать так, чтобы пользователь мог быстро найти ответ на свой вопрос внутри конкретного документа.\r\n- **Сделать разводящую страницу по проектам.** Новая система документации собирает все проекты в рамках одного сайта. Важно было сделать страницу, где пользователь может выбрать нужный ему проект.\r\n- **Содержимое документа может варьировать от версии продукта и его платформы.**\r\n- **Совместно с техническими писателями подготовить гайдлайны по оформлению топиков.**\r\n- **Учесть оффлайн документацию.** Часть пользователей, в свете специфики бизнеса, используют активно оффлайн версию документации. А именно, CHM. Поэтому, нужно было подготовить стили для оффлайн документации. Учитывая, что CHM поддерживает CSS уровня Internet Explorer 7 (и то не всегда) — это было очень непростой задачей.\r\n- **Поддержать интеграцию с саппорт-центром.** Сегмент пользователей читающих документацию и создающих тикеты в саппорт-центре тесно связан. Важно было найти такое решение, чтобы пользователь имел возможность создать тикет прямо из документации, если ему не понятен какой-то из топиков. И наоборот, если ссылку на топик дал сотрудник саппорт-центра, то нужно иметь возможность дополнительно уточнить у пользователя, помог ли ему этот топик.\r\n- **Сделать документацию доступной.** Сайт документации должен удовлетворять требования A11Y, чтобы им было удобно пользоваться всем пользователям.\r\n\r\n# Результат\r\n\r\nНовая система документации получила положительный фидбек как со стороны пользователей, так и со стороны технических писателей. Основная часть задач была решения в рамках основной работы над проектом, многие дополнительные фичи — в рамках доработок по проекту.\r\n\r\nКроме работы непосредственно над дизайном, я внёс большой вклад во фронденд составляющую сайта:\r\n\r\n- Написал несколько функциональных фич.\r\n- Обновил семантику сайта, для решения проблем связанных с доступностью.\r\n- Активно работал со стилям в коде.\r\n\r\n## Примеры реализации\r\n\r\n### Стили, которые работают для разных топиков\r\n\r\n### Доступность со всех устройств\r\n\r\n### Навигация по документу\r\n\r\n### Разводящая страница\r\n\r\n### Версионность\r\n\r\n### Интеграция с саппорт-центром\r\n\r\n### Оффлайн документация\r\n\r\n### Доступность', `Summary`='', `FormatterID`='neasden', `OriginalAlias`='documentation', `Uploads`='a:0:{}', `IsPublished`='1', `IsCommentable`='0', `IsVisible`='1', `IsFavourite`='1', `Stamp`='1711383886', `LastModified`='1711903201', `Offset`='14400', `IsDST`='0', `IsIndexed`='0', `IsExternal`='0', `ReadCount`='5', `SourceID`='0', `SourceNoteID`='0', `SourceNoteURL`='', `SourceNoteJSONURL`='', `SourceNoteData`='' WHERE `SubsetID`=1 AND (`ID`=4);

UPDATE `e2BlogNotes` SET `Uploads`='a:2:{i:0;s:26:"/images/blog/1x/docs-1.png";i:1;s:15:"empty-image.jpg";}' WHERE `SubsetID`=1 AND `ID`=4;

UPDATE `e2BlogNotes` SET `SubsetID`='1', `Title`='Documentation', `Text`='DevExpress Documentation — одна из самый объемных документации на рынке. Содержит несколько сотен тысяч статей и АПИ. Внутри для её работы создана целая экосистема, включающая в себя множество отдельных компонентов.\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/docs-1.png\" srcset=\"/images/blog/1x/docs-1.png 1x, /images/blog/2x/docs-1@2x.png 2x\" class=\"img-fluid\">\r\n\r\n# Вводная\r\n\r\nДолгое время единой системы документации не было. Всё состояло из отдельных проектов и отдавалось пользователям в формате довольно простых HTML файлов, либо в CHM формате.\r\n\r\nС развитием продуктовой линейки и увеличение штата технических писателей такой подход стал приносить неудобства как для сотрудников, так и для пользователей.\r\n\r\nУчитывай количество и объем документов, было принято решение сделать собственную систему документации.\r\n\r\n# Задачи\r\n\r\nСистема документации состоит из различных функциональных компонентов. При разработке дизайна нужно было учесть следующие факторы:\r\n\r\n- **Огромное количество написанных топиков.** Разные топики были написаны разными людьми, в разное время. Поэтому, сильно отличались по структуре. Нужно было найти такой подход к стилям, чтобы старые документы не ломали внешний вид страниц.\r\n- **Документацию читают с разных устройств.** Нужно было сделать документацию такой, чтобы её можно было читать на любом экране.\r\n- **Навигация по проекту должна быть удобной.** Структура каждого проекта документации древовидна, один проект может быть вложен в другой и так далее. Нужно сделать так, чтобы пользователь понимал, на каком уровне он находится и мог легко навигироваться между документами.\r\n- **Поиск по документу должен быть удобным.** Документы внутри проекта могут быть большими и сложными. Нужно сделать так, чтобы пользователь мог быстро найти ответ на свой вопрос внутри конкретного документа.\r\n- **Сделать разводящую страницу по проектам.** Новая система документации собирает все проекты в рамках одного сайта. Важно было сделать страницу, где пользователь может выбрать нужный ему проект.\r\n- **Содержимое документа может варьировать от версии продукта и его платформы.**\r\n- **Совместно с техническими писателями подготовить гайдлайны по оформлению топиков.**\r\n- **Учесть оффлайн документацию.** Часть пользователей, в свете специфики бизнеса, используют активно оффлайн версию документации. А именно, CHM. Поэтому, нужно было подготовить стили для оффлайн документации. Учитывая, что CHM поддерживает CSS уровня Internet Explorer 7 (и то не всегда) — это было очень непростой задачей.\r\n- **Поддержать интеграцию с саппорт-центром.** Сегмент пользователей читающих документацию и создающих тикеты в саппорт-центре тесно связан. Важно было найти такое решение, чтобы пользователь имел возможность создать тикет прямо из документации, если ему не понятен какой-то из топиков. И наоборот, если ссылку на топик дал сотрудник саппорт-центра, то нужно иметь возможность дополнительно уточнить у пользователя, помог ли ему этот топик.\r\n- **Сделать документацию доступной.** Сайт документации должен удовлетворять требования A11Y, чтобы им было удобно пользоваться всем пользователям.\r\n\r\n# Результат\r\n\r\nНовая система документации получила положительный фидбек как со стороны пользователей, так и со стороны технических писателей. Основная часть задач была решения в рамках основной работы над проектом, многие дополнительные фичи — в рамках доработок по проекту.\r\n\r\nКроме работы непосредственно над дизайном, я внёс большой вклад во фронденд составляющую сайта:\r\n\r\n- Написал несколько функциональных фич.\r\n- Обновил семантику сайта, для решения проблем связанных с доступностью.\r\n- Активно работал со стилям в коде.\r\n\r\n## Примеры реализации\r\n\r\n### Стили, которые работают для разных топиков\r\n\r\n### Доступность со всех устройств\r\n\r\n### Навигация по документу\r\n\r\n### Разводящая страница\r\n\r\n### Версионность\r\n\r\n### Интеграция с саппорт-центром\r\n\r\n### Оффлайн документация\r\n\r\n### Доступность', `Summary`='', `FormatterID`='neasden', `OriginalAlias`='documentation', `Uploads`='a:0:{}', `IsPublished`='1', `IsCommentable`='0', `IsVisible`='1', `IsFavourite`='1', `Stamp`='1711383886', `LastModified`='1711903201', `Offset`='14400', `IsDST`='0', `IsIndexed`='1', `IsExternal`='0', `ReadCount`='5', `SourceID`='0', `SourceNoteID`='0', `SourceNoteURL`='', `SourceNoteJSONURL`='', `SourceNoteData`='' WHERE `SubsetID`=1 AND (`ID`=4);

UPDATE `e2BlogNotes` SET `SubsetID`='1', `Title`='Documentation', `Text`='DevExpress Documentation — одна из самый объемных документации на рынке. Содержит несколько сотен тысяч статей и АПИ. Внутри для её работы создана целая экосистема, включающая в себя множество отдельных компонентов.\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/docs-1.png\" srcset=\"/images/blog/1x/docs-1.png 1x, /images/blog/2x/docs-1@2x.png 2x\" class=\"img-fluid\">\r\n\r\n# Вводная\r\n\r\nДолгое время единой системы документации не было. Всё состояло из отдельных проектов и отдавалось пользователям в формате довольно простых HTML файлов, либо в CHM формате.\r\n\r\nС развитием продуктовой линейки и увеличение штата технических писателей такой подход стал приносить неудобства как для сотрудников, так и для пользователей.\r\n\r\nУчитывай количество и объем документов, было принято решение сделать собственную систему документации.\r\n\r\n# Задачи\r\n\r\nСистема документации состоит из различных функциональных компонентов. При разработке дизайна нужно было учесть следующие факторы:\r\n\r\n- **Огромное количество написанных топиков.** Разные топики были написаны разными людьми, в разное время. Поэтому, сильно отличались по структуре. Нужно было найти такой подход к стилям, чтобы старые документы не ломали внешний вид страниц.\r\n- **Документацию читают с разных устройств.** Нужно было сделать документацию такой, чтобы её можно было читать на любом экране.\r\n- **Навигация по проекту должна быть удобной.** Структура каждого проекта документации древовидна, один проект может быть вложен в другой и так далее. Нужно сделать так, чтобы пользователь понимал, на каком уровне он находится и мог легко навигироваться между документами.\r\n- **Поиск по документу должен быть удобным.** Документы внутри проекта могут быть большими и сложными. Нужно сделать так, чтобы пользователь мог быстро найти ответ на свой вопрос внутри конкретного документа.\r\n- **Сделать разводящую страницу по проектам.** Новая система документации собирает все проекты в рамках одного сайта. Важно было сделать страницу, где пользователь может выбрать нужный ему проект.\r\n- **Содержимое документа может варьировать от версии продукта и его платформы.**\r\n- **Совместно с техническими писателями подготовить гайдлайны по оформлению топиков.**\r\n- **Учесть оффлайн документацию.** Часть пользователей, в свете специфики бизнеса, используют активно оффлайн версию документации. А именно, CHM. Поэтому, нужно было подготовить стили для оффлайн документации. Учитывая, что CHM поддерживает CSS уровня Internet Explorer 7 (и то не всегда) — это было очень непростой задачей.\r\n- **Поддержать интеграцию с саппорт-центром.** Сегмент пользователей читающих документацию и создающих тикеты в саппорт-центре тесно связан. Важно было найти такое решение, чтобы пользователь имел возможность создать тикет прямо из документации, если ему не понятен какой-то из топиков. И наоборот, если ссылку на топик дал сотрудник саппорт-центра, то нужно иметь возможность дополнительно уточнить у пользователя, помог ли ему этот топик.\r\n- **Сделать документацию доступной.** Сайт документации должен удовлетворять требования A11Y, чтобы им было удобно пользоваться всем пользователям.\r\n\r\n# Результат\r\n\r\nНовая система документации получила положительный фидбек как со стороны пользователей, так и со стороны технических писателей. Основная часть задач была решения в рамках основной работы над проектом, многие дополнительные фичи — в рамках доработок по проекту.\r\n\r\nКроме работы непосредственно над дизайном, я внёс большой вклад во фронденд составляющую сайта:\r\n\r\n- Написал несколько функциональных фич.\r\n- Обновил семантику сайта, для решения проблем связанных с доступностью.\r\n- Активно работал со стилям в коде.\r\n\r\n## Примеры реализации\r\n\r\n### Стили, которые работают для разных топиков\r\n\r\n### Доступность со всех устройств\r\n\r\n### Навигация по документу\r\n\r\n### Разводящая страница\r\n\r\n### Версионность\r\n\r\n### Интеграция с саппорт-центром\r\n\r\n### Оффлайн документация\r\n\r\n### Доступность', `Summary`='', `FormatterID`='neasden', `OriginalAlias`='documentation', `Uploads`='a:2:{i:0;s:26:\"/images/blog/1x/docs-1.png\";i:1;s:15:\"empty-image.jpg\";}', `IsPublished`='1', `IsCommentable`='0', `IsVisible`='1', `IsFavourite`='1', `Stamp`='1711383886', `LastModified`='1711903201', `Offset`='14400', `IsDST`='0', `IsIndexed`='1', `IsExternal`='0', `ReadCount`='5', `SourceID`='0', `SourceNoteID`='0', `SourceNoteURL`='', `SourceNoteJSONURL`='', `SourceNoteData`='' WHERE `SubsetID`=1 AND (`ID`=4);

UPDATE `e2BlogAliases` SET `EntityType`='n', `EntityID`='4', `Alias`='documentation', `Stamp`='1711906616' WHERE `SubsetID`=1 AND (`ID`=4);

UPDATE `e2BlogNotes` SET `SubsetID`='1', `Title`='Documentation', `Text`='DevExpress Documentation — одна из самый объемных документации на рынке. Содержит несколько сотен тысяч статей и АПИ. Внутри для её работы создана целая экосистема, включающая в себя множество отдельных компонентов.\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/docs-1.png\" srcset=\"/images/blog/1x/docs-1.png 1x, /images/blog/2x/docs-1@2x.png 2x\" class=\"img-fluid\">\r\n\r\n# Вводная\r\n\r\nДолгое время единой системы документации не было. Всё состояло из отдельных проектов и отдавалось пользователям в формате довольно простых HTML файлов, либо в CHM формате.\r\n\r\nС развитием продуктовой линейки и увеличение штата технических писателей такой подход стал приносить неудобства как для сотрудников, так и для пользователей.\r\n\r\nУчитывай количество и объем документов, было принято решение сделать собственную систему документации.\r\n\r\n# Задачи\r\n\r\nСистема документации состоит из различных функциональных компонентов. При разработке дизайна нужно было учесть следующие факторы:\r\n\r\n- **Огромное количество написанных топиков.** Разные топики были написаны разными людьми, в разное время. Поэтому, сильно отличались по структуре. Нужно было найти такой подход к стилям, чтобы старые документы не ломали внешний вид страниц.\r\n- **Документацию читают с разных устройств.** Нужно было сделать документацию такой, чтобы её можно было читать на любом экране.\r\n- **Навигация по проекту должна быть удобной.** Структура каждого проекта документации древовидна, один проект может быть вложен в другой и так далее. Нужно сделать так, чтобы пользователь понимал, на каком уровне он находится и мог легко навигироваться между документами.\r\n- **Поиск по документу должен быть удобным.** Документы внутри проекта могут быть большими и сложными. Нужно сделать так, чтобы пользователь мог быстро найти ответ на свой вопрос внутри конкретного документа.\r\n- **Сделать разводящую страницу по проектам.** Новая система документации собирает все проекты в рамках одного сайта. Важно было сделать страницу, где пользователь может выбрать нужный ему проект.\r\n- **Содержимое документа может варьировать от версии продукта и его платформы.**\r\n- **Совместно с техническими писателями подготовить гайдлайны по оформлению топиков.**\r\n- **Учесть оффлайн документацию.** Часть пользователей, в свете специфики бизнеса, используют активно оффлайн версию документации. А именно, CHM. Поэтому, нужно было подготовить стили для оффлайн документации. Учитывая, что CHM поддерживает CSS уровня Internet Explorer 7 (и то не всегда) — это было очень непростой задачей.\r\n- **Поддержать интеграцию с саппорт-центром.** Сегмент пользователей читающих документацию и создающих тикеты в саппорт-центре тесно связан. Важно было найти такое решение, чтобы пользователь имел возможность создать тикет прямо из документации, если ему не понятен какой-то из топиков. И наоборот, если ссылку на топик дал сотрудник саппорт-центра, то нужно иметь возможность дополнительно уточнить у пользователя, помог ли ему этот топик.\r\n- **Сделать документацию доступной.** Сайт документации должен удовлетворять требования A11Y, чтобы им было удобно пользоваться всем пользователям.\r\n\r\n# Результат\r\n\r\nНовая система документации получила положительный фидбек как со стороны пользователей, так и со стороны технических писателей. Основная часть задач была решения в рамках основной работы над проектом, многие дополнительные фичи — в рамках доработок по проекту.\r\n\r\nКроме работы непосредственно над дизайном, я внёс большой вклад во фронденд составляющую сайта:\r\n\r\n- Написал несколько функциональных фич.\r\n- Обновил семантику сайта, для решения проблем связанных с доступностью.\r\n- Активно работал со стилям в коде.\r\n\r\n## Примеры реализации\r\n\r\n### Разводящая страница\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/docs-2.png\" srcset=\"/images/blog/1x/docs-2.png 1x, /images/blog/2x/docs-2@2x.png 2x\" class=\"img-fluid\">\r\n\r\n### Доступность со всех устройств\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/docs-3.png\" srcset=\"/images/blog/1x/docs-3.png 1x, /images/blog/2x/docs-3@2x.png 2x\" class=\"img-fluid\">\r\n\r\n### Доступность\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/docs-4.png\" srcset=\"/images/blog/1x/docs-4.png 1x, /images/blog/2x/docs-4@2x.png 2x\" class=\"img-fluid\">', `Summary`='', `FormatterID`='neasden', `OriginalAlias`='documentation', `Uploads`='a:2:{i:0;s:26:\"/images/blog/1x/docs-1.png\";i:1;s:15:\"empty-image.jpg\";}', `IsPublished`='1', `IsCommentable`='0', `IsVisible`='1', `IsFavourite`='1', `Stamp`='1711383886', `LastModified`='1711906616', `Offset`='14400', `IsDST`='0', `IsIndexed`='0', `IsExternal`='0', `ReadCount`='5', `SourceID`='0', `SourceNoteID`='0', `SourceNoteURL`='', `SourceNoteJSONURL`='', `SourceNoteData`='' WHERE `SubsetID`=1 AND (`ID`=4);

UPDATE `e2BlogNotes` SET `Uploads`='a:5:{i:0;s:26:"/images/blog/1x/docs-1.png";i:1;s:15:"empty-image.jpg";i:2;s:26:"/images/blog/1x/docs-2.png";i:3;s:26:"/images/blog/1x/docs-3.png";i:4;s:26:"/images/blog/1x/docs-4.png";}' WHERE `SubsetID`=1 AND `ID`=4;

UPDATE `e2BlogNotes` SET `SubsetID`='1', `Title`='Documentation', `Text`='DevExpress Documentation — одна из самый объемных документации на рынке. Содержит несколько сотен тысяч статей и АПИ. Внутри для её работы создана целая экосистема, включающая в себя множество отдельных компонентов.\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/docs-1.png\" srcset=\"/images/blog/1x/docs-1.png 1x, /images/blog/2x/docs-1@2x.png 2x\" class=\"img-fluid\">\r\n\r\n# Вводная\r\n\r\nДолгое время единой системы документации не было. Всё состояло из отдельных проектов и отдавалось пользователям в формате довольно простых HTML файлов, либо в CHM формате.\r\n\r\nС развитием продуктовой линейки и увеличение штата технических писателей такой подход стал приносить неудобства как для сотрудников, так и для пользователей.\r\n\r\nУчитывай количество и объем документов, было принято решение сделать собственную систему документации.\r\n\r\n# Задачи\r\n\r\nСистема документации состоит из различных функциональных компонентов. При разработке дизайна нужно было учесть следующие факторы:\r\n\r\n- **Огромное количество написанных топиков.** Разные топики были написаны разными людьми, в разное время. Поэтому, сильно отличались по структуре. Нужно было найти такой подход к стилям, чтобы старые документы не ломали внешний вид страниц.\r\n- **Документацию читают с разных устройств.** Нужно было сделать документацию такой, чтобы её можно было читать на любом экране.\r\n- **Навигация по проекту должна быть удобной.** Структура каждого проекта документации древовидна, один проект может быть вложен в другой и так далее. Нужно сделать так, чтобы пользователь понимал, на каком уровне он находится и мог легко навигироваться между документами.\r\n- **Поиск по документу должен быть удобным.** Документы внутри проекта могут быть большими и сложными. Нужно сделать так, чтобы пользователь мог быстро найти ответ на свой вопрос внутри конкретного документа.\r\n- **Сделать разводящую страницу по проектам.** Новая система документации собирает все проекты в рамках одного сайта. Важно было сделать страницу, где пользователь может выбрать нужный ему проект.\r\n- **Содержимое документа может варьировать от версии продукта и его платформы.**\r\n- **Совместно с техническими писателями подготовить гайдлайны по оформлению топиков.**\r\n- **Учесть оффлайн документацию.** Часть пользователей, в свете специфики бизнеса, используют активно оффлайн версию документации. А именно, CHM. Поэтому, нужно было подготовить стили для оффлайн документации. Учитывая, что CHM поддерживает CSS уровня Internet Explorer 7 (и то не всегда) — это было очень непростой задачей.\r\n- **Поддержать интеграцию с саппорт-центром.** Сегмент пользователей читающих документацию и создающих тикеты в саппорт-центре тесно связан. Важно было найти такое решение, чтобы пользователь имел возможность создать тикет прямо из документации, если ему не понятен какой-то из топиков. И наоборот, если ссылку на топик дал сотрудник саппорт-центра, то нужно иметь возможность дополнительно уточнить у пользователя, помог ли ему этот топик.\r\n- **Сделать документацию доступной.** Сайт документации должен удовлетворять требования A11Y, чтобы им было удобно пользоваться всем пользователям.\r\n\r\n# Результат\r\n\r\nНовая система документации получила положительный фидбек как со стороны пользователей, так и со стороны технических писателей. Основная часть задач была решения в рамках основной работы над проектом, многие дополнительные фичи — в рамках доработок по проекту.\r\n\r\nКроме работы непосредственно над дизайном, я внёс большой вклад во фронденд составляющую сайта:\r\n\r\n- Написал несколько функциональных фич.\r\n- Обновил семантику сайта, для решения проблем связанных с доступностью.\r\n- Активно работал со стилям в коде.\r\n\r\n## Примеры реализации\r\n\r\n### Разводящая страница\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/docs-2.png\" srcset=\"/images/blog/1x/docs-2.png 1x, /images/blog/2x/docs-2@2x.png 2x\" class=\"img-fluid\">\r\n\r\n### Доступность со всех устройств\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/docs-3.png\" srcset=\"/images/blog/1x/docs-3.png 1x, /images/blog/2x/docs-3@2x.png 2x\" class=\"img-fluid\">\r\n\r\n### Доступность\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/docs-4.png\" srcset=\"/images/blog/1x/docs-4.png 1x, /images/blog/2x/docs-4@2x.png 2x\" class=\"img-fluid\">', `Summary`='', `FormatterID`='neasden', `OriginalAlias`='documentation', `Uploads`='a:2:{i:0;s:26:\"/images/blog/1x/docs-1.png\";i:1;s:15:\"empty-image.jpg\";}', `IsPublished`='1', `IsCommentable`='0', `IsVisible`='1', `IsFavourite`='1', `Stamp`='1711383886', `LastModified`='1711906616', `Offset`='14400', `IsDST`='0', `IsIndexed`='1', `IsExternal`='0', `ReadCount`='5', `SourceID`='0', `SourceNoteID`='0', `SourceNoteURL`='', `SourceNoteJSONURL`='', `SourceNoteData`='' WHERE `SubsetID`=1 AND (`ID`=4);

UPDATE `e2BlogNotes` SET `SubsetID`='1', `Title`='Documentation', `Text`='DevExpress Documentation — одна из самый объемных документации на рынке. Содержит несколько сотен тысяч статей и АПИ. Внутри для её работы создана целая экосистема, включающая в себя множество отдельных компонентов.\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/docs-1.png\" srcset=\"/images/blog/1x/docs-1.png 1x, /images/blog/2x/docs-1@2x.png 2x\" class=\"img-fluid\">\r\n\r\n# Вводная\r\n\r\nДолгое время единой системы документации не было. Всё состояло из отдельных проектов и отдавалось пользователям в формате довольно простых HTML файлов, либо в CHM формате.\r\n\r\nС развитием продуктовой линейки и увеличение штата технических писателей такой подход стал приносить неудобства как для сотрудников, так и для пользователей.\r\n\r\nУчитывай количество и объем документов, было принято решение сделать собственную систему документации.\r\n\r\n# Задачи\r\n\r\nСистема документации состоит из различных функциональных компонентов. При разработке дизайна нужно было учесть следующие факторы:\r\n\r\n- **Огромное количество написанных топиков.** Разные топики были написаны разными людьми, в разное время. Поэтому, сильно отличались по структуре. Нужно было найти такой подход к стилям, чтобы старые документы не ломали внешний вид страниц.\r\n- **Документацию читают с разных устройств.** Нужно было сделать документацию такой, чтобы её можно было читать на любом экране.\r\n- **Навигация по проекту должна быть удобной.** Структура каждого проекта документации древовидна, один проект может быть вложен в другой и так далее. Нужно сделать так, чтобы пользователь понимал, на каком уровне он находится и мог легко навигироваться между документами.\r\n- **Поиск по документу должен быть удобным.** Документы внутри проекта могут быть большими и сложными. Нужно сделать так, чтобы пользователь мог быстро найти ответ на свой вопрос внутри конкретного документа.\r\n- **Сделать разводящую страницу по проектам.** Новая система документации собирает все проекты в рамках одного сайта. Важно было сделать страницу, где пользователь может выбрать нужный ему проект.\r\n- **Содержимое документа может варьировать от версии продукта и его платформы.**\r\n- **Совместно с техническими писателями подготовить гайдлайны по оформлению топиков.**\r\n- **Учесть оффлайн документацию.** Часть пользователей, в свете специфики бизнеса, используют активно оффлайн версию документации. А именно, CHM. Поэтому, нужно было подготовить стили для оффлайн документации. Учитывая, что CHM поддерживает CSS уровня Internet Explorer 7 (и то не всегда) — это было очень непростой задачей.\r\n- **Поддержать интеграцию с саппорт-центром.** Сегмент пользователей читающих документацию и создающих тикеты в саппорт-центре тесно связан. Важно было найти такое решение, чтобы пользователь имел возможность создать тикет прямо из документации, если ему не понятен какой-то из топиков. И наоборот, если ссылку на топик дал сотрудник саппорт-центра, то нужно иметь возможность дополнительно уточнить у пользователя, помог ли ему этот топик.\r\n- **Сделать документацию доступной.** Сайт документации должен удовлетворять требования A11Y, чтобы им было удобно пользоваться всем пользователям.\r\n\r\n# Результат\r\n\r\nНовая система документации получила положительный фидбек как со стороны пользователей, так и со стороны технических писателей. Основная часть задач была решения в рамках основной работы над проектом, многие дополнительные фичи — в рамках доработок по проекту.\r\n\r\nКроме работы непосредственно над дизайном, я внёс большой вклад во фронденд составляющую сайта:\r\n\r\n- Написал несколько функциональных фич.\r\n- Обновил семантику сайта, для решения проблем связанных с доступностью.\r\n- Активно работал со стилям в коде.\r\n\r\n## Примеры реализации\r\n\r\n### Разводящая страница\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/docs-2.png\" srcset=\"/images/blog/1x/docs-2.png 1x, /images/blog/2x/docs-2@2x.png 2x\" class=\"img-fluid\">\r\n\r\n### Доступность со всех устройств\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/docs-3.png\" srcset=\"/images/blog/1x/docs-3.png 1x, /images/blog/2x/docs-3@2x.png 2x\" class=\"img-fluid\">\r\n\r\n### Доступность\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/docs-4.png\" srcset=\"/images/blog/1x/docs-4.png 1x, /images/blog/2x/docs-4@2x.png 2x\" class=\"img-fluid\">', `Summary`='', `FormatterID`='neasden', `OriginalAlias`='documentation', `Uploads`='a:5:{i:0;s:26:\"/images/blog/1x/docs-1.png\";i:1;s:15:\"empty-image.jpg\";i:3;s:26:\"/images/blog/1x/docs-2.png\";i:4;s:26:\"/images/blog/1x/docs-3.png\";i:5;s:26:\"/images/blog/1x/docs-4.png\";}', `IsPublished`='1', `IsCommentable`='0', `IsVisible`='1', `IsFavourite`='1', `Stamp`='1711383886', `LastModified`='1711906616', `Offset`='14400', `IsDST`='0', `IsIndexed`='1', `IsExternal`='0', `ReadCount`='5', `SourceID`='0', `SourceNoteID`='0', `SourceNoteURL`='', `SourceNoteJSONURL`='', `SourceNoteData`='' WHERE `SubsetID`=1 AND (`ID`=4);

UPDATE `e2BlogAliases` SET `EntityType`='n', `EntityID`='6', `Alias`='xaf', `Stamp`='1711908083' WHERE `SubsetID`=1 AND (`ID`=5);

UPDATE `e2BlogNotes` SET `SubsetID`='1', `Title`='XAF', `Text`='DevExpress XAF — это фреймворк для создания бизнес-приложений. С его помощью можно делать как десктоп, так веб-приложения. Помогает разработчикам сосредоточится на бизнес-логике, а не на деталях реализации интерфейса или архитектуры приложения.\r\n\r\nСо своей стороны, занимался проектированием, развитием и поддержкой UX/UI приложения в связке с ПМом. Разработкой новых фич, улучшение существующих, работой с обратной связью от пользователей.\r\n\r\n# Нарисован пак иконок\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/xaf-1.png\" srcset=\"/images/blog/1x/xaf-1.png 1x, /images/blog/2x/xaf-1@2x.png 2x\" class=\"img-fluid\">', `Summary`='', `FormatterID`='neasden', `OriginalAlias`='xaf', `Uploads`='a:0:{}', `IsPublished`='1', `IsCommentable`='0', `IsVisible`='1', `IsFavourite`='1', `Stamp`='1711383936', `LastModified`='1711908083', `Offset`='14400', `IsDST`='0', `IsIndexed`='0', `IsExternal`='0', `ReadCount`='4', `SourceID`='0', `SourceNoteID`='0', `SourceNoteURL`='', `SourceNoteJSONURL`='', `SourceNoteData`='' WHERE `SubsetID`=1 AND (`ID`=6);

UPDATE `e2BlogNotes` SET `Uploads`='a:2:{i:0;s:25:"/images/blog/1x/xaf-1.png";i:1;s:15:"empty-image.jpg";}' WHERE `SubsetID`=1 AND `ID`=6;

UPDATE `e2BlogNotes` SET `SubsetID`='1', `Title`='XAF', `Text`='DevExpress XAF — это фреймворк для создания бизнес-приложений. С его помощью можно делать как десктоп, так веб-приложения. Помогает разработчикам сосредоточится на бизнес-логике, а не на деталях реализации интерфейса или архитектуры приложения.\r\n\r\nСо своей стороны, занимался проектированием, развитием и поддержкой UX/UI приложения в связке с ПМом. Разработкой новых фич, улучшение существующих, работой с обратной связью от пользователей.\r\n\r\n# Нарисован пак иконок\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/xaf-1.png\" srcset=\"/images/blog/1x/xaf-1.png 1x, /images/blog/2x/xaf-1@2x.png 2x\" class=\"img-fluid\">', `Summary`='', `FormatterID`='neasden', `OriginalAlias`='xaf', `Uploads`='a:0:{}', `IsPublished`='1', `IsCommentable`='0', `IsVisible`='1', `IsFavourite`='1', `Stamp`='1711383936', `LastModified`='1711908083', `Offset`='14400', `IsDST`='0', `IsIndexed`='1', `IsExternal`='0', `ReadCount`='4', `SourceID`='0', `SourceNoteID`='0', `SourceNoteURL`='', `SourceNoteJSONURL`='', `SourceNoteData`='' WHERE `SubsetID`=1 AND (`ID`=6);

UPDATE `e2BlogNotes` SET `SubsetID`='1', `Title`='XAF', `Text`='DevExpress XAF — это фреймворк для создания бизнес-приложений. С его помощью можно делать как десктоп, так веб-приложения. Помогает разработчикам сосредоточится на бизнес-логике, а не на деталях реализации интерфейса или архитектуры приложения.\r\n\r\nСо своей стороны, занимался проектированием, развитием и поддержкой UX/UI приложения в связке с ПМом. Разработкой новых фич, улучшение существующих, работой с обратной связью от пользователей.\r\n\r\n# Нарисован пак иконок\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/xaf-1.png\" srcset=\"/images/blog/1x/xaf-1.png 1x, /images/blog/2x/xaf-1@2x.png 2x\" class=\"img-fluid\">', `Summary`='', `FormatterID`='neasden', `OriginalAlias`='xaf', `Uploads`='a:2:{i:0;s:25:\"/images/blog/1x/xaf-1.png\";i:1;s:15:\"empty-image.jpg\";}', `IsPublished`='1', `IsCommentable`='0', `IsVisible`='1', `IsFavourite`='1', `Stamp`='1711383936', `LastModified`='1711908083', `Offset`='14400', `IsDST`='0', `IsIndexed`='1', `IsExternal`='0', `ReadCount`='4', `SourceID`='0', `SourceNoteID`='0', `SourceNoteURL`='', `SourceNoteJSONURL`='', `SourceNoteData`='' WHERE `SubsetID`=1 AND (`ID`=6);

UPDATE `e2BlogAliases` SET `EntityType`='n', `EntityID`='6', `Alias`='xaf', `Stamp`='1711908614' WHERE `SubsetID`=1 AND (`ID`=5);

UPDATE `e2BlogNotes` SET `SubsetID`='1', `Title`='XAF', `Text`='DevExpress XAF — это фреймворк для создания бизнес-приложений. С его помощью можно делать как десктоп, так веб-приложения. Помогает разработчикам сосредоточится на бизнес-логике, а не на деталях реализации интерфейса или архитектуры приложения.\r\n\r\nСо своей стороны, занимался проектированием, развитием и поддержкой UX/UI приложения в связке с ПМом. Разработкой новых фич, улучшение существующих, работой с обратной связью от пользователей.\r\n\r\n# Веб-приложение\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/xaf-2.png\" srcset=\"/images/blog/1x/xaf-2.png 1x, /images/blog/2x/xaf-2@2x.png 2x\" class=\"img-fluid\">\r\n\r\n# Нарисован пак иконок\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/xaf-1.png\" srcset=\"/images/blog/1x/xaf-1.png 1x, /images/blog/2x/xaf-1@2x.png 2x\" class=\"img-fluid\">', `Summary`='', `FormatterID`='neasden', `OriginalAlias`='xaf', `Uploads`='a:2:{i:0;s:25:\"/images/blog/1x/xaf-1.png\";i:1;s:15:\"empty-image.jpg\";}', `IsPublished`='1', `IsCommentable`='0', `IsVisible`='1', `IsFavourite`='1', `Stamp`='1711383936', `LastModified`='1711908614', `Offset`='14400', `IsDST`='0', `IsIndexed`='0', `IsExternal`='0', `ReadCount`='4', `SourceID`='0', `SourceNoteID`='0', `SourceNoteURL`='', `SourceNoteJSONURL`='', `SourceNoteData`='' WHERE `SubsetID`=1 AND (`ID`=6);

UPDATE `e2BlogNotes` SET `Uploads`='a:3:{i:0;s:25:"/images/blog/1x/xaf-1.png";i:1;s:15:"empty-image.jpg";i:2;s:25:"/images/blog/1x/xaf-2.png";}' WHERE `SubsetID`=1 AND `ID`=6;

UPDATE `e2BlogNotes` SET `SubsetID`='1', `Title`='XAF', `Text`='DevExpress XAF — это фреймворк для создания бизнес-приложений. С его помощью можно делать как десктоп, так веб-приложения. Помогает разработчикам сосредоточится на бизнес-логике, а не на деталях реализации интерфейса или архитектуры приложения.\r\n\r\nСо своей стороны, занимался проектированием, развитием и поддержкой UX/UI приложения в связке с ПМом. Разработкой новых фич, улучшение существующих, работой с обратной связью от пользователей.\r\n\r\n# Веб-приложение\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/xaf-2.png\" srcset=\"/images/blog/1x/xaf-2.png 1x, /images/blog/2x/xaf-2@2x.png 2x\" class=\"img-fluid\">\r\n\r\n# Нарисован пак иконок\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/xaf-1.png\" srcset=\"/images/blog/1x/xaf-1.png 1x, /images/blog/2x/xaf-1@2x.png 2x\" class=\"img-fluid\">', `Summary`='', `FormatterID`='neasden', `OriginalAlias`='xaf', `Uploads`='a:2:{i:0;s:25:\"/images/blog/1x/xaf-1.png\";i:1;s:15:\"empty-image.jpg\";}', `IsPublished`='1', `IsCommentable`='0', `IsVisible`='1', `IsFavourite`='1', `Stamp`='1711383936', `LastModified`='1711908614', `Offset`='14400', `IsDST`='0', `IsIndexed`='1', `IsExternal`='0', `ReadCount`='4', `SourceID`='0', `SourceNoteID`='0', `SourceNoteURL`='', `SourceNoteJSONURL`='', `SourceNoteData`='' WHERE `SubsetID`=1 AND (`ID`=6);

UPDATE `e2BlogNotes` SET `SubsetID`='1', `Title`='XAF', `Text`='DevExpress XAF — это фреймворк для создания бизнес-приложений. С его помощью можно делать как десктоп, так веб-приложения. Помогает разработчикам сосредоточится на бизнес-логике, а не на деталях реализации интерфейса или архитектуры приложения.\r\n\r\nСо своей стороны, занимался проектированием, развитием и поддержкой UX/UI приложения в связке с ПМом. Разработкой новых фич, улучшение существующих, работой с обратной связью от пользователей.\r\n\r\n# Веб-приложение\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/xaf-2.png\" srcset=\"/images/blog/1x/xaf-2.png 1x, /images/blog/2x/xaf-2@2x.png 2x\" class=\"img-fluid\">\r\n\r\n# Нарисован пак иконок\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/xaf-1.png\" srcset=\"/images/blog/1x/xaf-1.png 1x, /images/blog/2x/xaf-1@2x.png 2x\" class=\"img-fluid\">', `Summary`='', `FormatterID`='neasden', `OriginalAlias`='xaf', `Uploads`='a:3:{i:0;s:25:\"/images/blog/1x/xaf-1.png\";i:1;s:15:\"empty-image.jpg\";i:2;s:25:\"/images/blog/1x/xaf-2.png\";}', `IsPublished`='1', `IsCommentable`='0', `IsVisible`='1', `IsFavourite`='1', `Stamp`='1711383936', `LastModified`='1711908614', `Offset`='14400', `IsDST`='0', `IsIndexed`='1', `IsExternal`='0', `ReadCount`='4', `SourceID`='0', `SourceNoteID`='0', `SourceNoteURL`='', `SourceNoteJSONURL`='', `SourceNoteData`='' WHERE `SubsetID`=1 AND (`ID`=6);

UPDATE `e2BlogAliases` SET `EntityType`='n', `EntityID`='6', `Alias`='xaf', `Stamp`='1711908845' WHERE `SubsetID`=1 AND (`ID`=5);

UPDATE `e2BlogNotes` SET `SubsetID`='1', `Title`='XAF', `Text`='DevExpress XAF — это фреймворк для создания бизнес-приложений. С его помощью можно делать как десктоп, так веб-приложения. Помогает разработчикам сосредоточится на бизнес-логике, а не на деталях реализации интерфейса или архитектуры приложения.\r\n\r\nСо своей стороны, занимался проектированием, развитием и поддержкой UX/UI приложения в связке с ПМом. Разработкой новых фич, улучшение существующих, работой с обратной связью от пользователей.\r\n\r\n# Веб-приложение\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/xaf-2.png\" srcset=\"/images/blog/1x/xaf-2.png 1x, /images/blog/2x/xaf-2@2x.png 2x\" class=\"img-fluid\">\r\n\r\n# Десктопное приложение\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/xaf-2.png\" srcset=\"/images/blog/1x/xaf-2.png 1x, /images/blog/2x/xaf-2@2x.png 2x\" class=\"img-fluid\">\r\n\r\n# Нарисован пак иконок\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/xaf-1.png\" srcset=\"/images/blog/1x/xaf-1.png 1x, /images/blog/2x/xaf-1@2x.png 2x\" class=\"img-fluid\">', `Summary`='', `FormatterID`='neasden', `OriginalAlias`='xaf', `Uploads`='a:3:{i:0;s:25:\"/images/blog/1x/xaf-1.png\";i:1;s:15:\"empty-image.jpg\";i:2;s:25:\"/images/blog/1x/xaf-2.png\";}', `IsPublished`='1', `IsCommentable`='0', `IsVisible`='1', `IsFavourite`='1', `Stamp`='1711383936', `LastModified`='1711908845', `Offset`='14400', `IsDST`='0', `IsIndexed`='0', `IsExternal`='0', `ReadCount`='4', `SourceID`='0', `SourceNoteID`='0', `SourceNoteURL`='', `SourceNoteJSONURL`='', `SourceNoteData`='' WHERE `SubsetID`=1 AND (`ID`=6);

UPDATE `e2BlogNotes` SET `SubsetID`='1', `Title`='XAF', `Text`='DevExpress XAF — это фреймворк для создания бизнес-приложений. С его помощью можно делать как десктоп, так веб-приложения. Помогает разработчикам сосредоточится на бизнес-логике, а не на деталях реализации интерфейса или архитектуры приложения.\r\n\r\nСо своей стороны, занимался проектированием, развитием и поддержкой UX/UI приложения в связке с ПМом. Разработкой новых фич, улучшение существующих, работой с обратной связью от пользователей.\r\n\r\n# Веб-приложение\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/xaf-2.png\" srcset=\"/images/blog/1x/xaf-2.png 1x, /images/blog/2x/xaf-2@2x.png 2x\" class=\"img-fluid\">\r\n\r\n# Десктопное приложение\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/xaf-2.png\" srcset=\"/images/blog/1x/xaf-2.png 1x, /images/blog/2x/xaf-2@2x.png 2x\" class=\"img-fluid\">\r\n\r\n# Нарисован пак иконок\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/xaf-1.png\" srcset=\"/images/blog/1x/xaf-1.png 1x, /images/blog/2x/xaf-1@2x.png 2x\" class=\"img-fluid\">', `Summary`='', `FormatterID`='neasden', `OriginalAlias`='xaf', `Uploads`='a:3:{i:0;s:25:\"/images/blog/1x/xaf-1.png\";i:1;s:15:\"empty-image.jpg\";i:2;s:25:\"/images/blog/1x/xaf-2.png\";}', `IsPublished`='1', `IsCommentable`='0', `IsVisible`='1', `IsFavourite`='1', `Stamp`='1711383936', `LastModified`='1711908845', `Offset`='14400', `IsDST`='0', `IsIndexed`='1', `IsExternal`='0', `ReadCount`='4', `SourceID`='0', `SourceNoteID`='0', `SourceNoteURL`='', `SourceNoteJSONURL`='', `SourceNoteData`='' WHERE `SubsetID`=1 AND (`ID`=6);

UPDATE `e2BlogAliases` SET `EntityType`='n', `EntityID`='6', `Alias`='xaf', `Stamp`='1711910900' WHERE `SubsetID`=1 AND (`ID`=5);

UPDATE `e2BlogNotes` SET `SubsetID`='1', `Title`='XAF', `Text`='DevExpress XAF — это фреймворк для создания бизнес-приложений. С его помощью можно делать как десктоп, так веб-приложения. Помогает разработчикам сосредоточится на бизнес-логике, а не на деталях реализации интерфейса или архитектуры приложения.\r\n\r\nСо своей стороны, занимался проектированием, развитием и поддержкой UX/UI приложения в связке с ПМом. Разработкой новых фич, улучшение существующих, работой с обратной связью от пользователей.\r\n\r\n# Веб-приложение\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/xaf-2.png\" srcset=\"/images/blog/1x/xaf-2.png 1x, /images/blog/2x/xaf-2@2x.png 2x\" class=\"img-fluid\">\r\n\r\n# Десктопное приложение\r\n\r\n## Общий вид\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/xaf-3.png\" srcset=\"/images/blog/1x/xaf-3.png 1x, /images/blog/2x/xaf-3@2x.png 2x\" class=\"img-fluid\">\r\n\r\n## Авторизация\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/xaf-4.png\" srcset=\"/images/blog/1x/xaf-4.png 1x, /images/blog/2x/xaf-4@2x.png 2x\" class=\"img-fluid\">\r\n\r\n# Нарисован пак иконок\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/xaf-1.png\" srcset=\"/images/blog/1x/xaf-1.png 1x, /images/blog/2x/xaf-1@2x.png 2x\" class=\"img-fluid\">', `Summary`='', `FormatterID`='neasden', `OriginalAlias`='xaf', `Uploads`='a:3:{i:0;s:25:\"/images/blog/1x/xaf-1.png\";i:1;s:15:\"empty-image.jpg\";i:2;s:25:\"/images/blog/1x/xaf-2.png\";}', `IsPublished`='1', `IsCommentable`='0', `IsVisible`='1', `IsFavourite`='1', `Stamp`='1711383936', `LastModified`='1711910900', `Offset`='14400', `IsDST`='0', `IsIndexed`='0', `IsExternal`='0', `ReadCount`='4', `SourceID`='0', `SourceNoteID`='0', `SourceNoteURL`='', `SourceNoteJSONURL`='', `SourceNoteData`='' WHERE `SubsetID`=1 AND (`ID`=6);

UPDATE `e2BlogNotes` SET `Uploads`='a:5:{i:0;s:25:"/images/blog/1x/xaf-1.png";i:1;s:15:"empty-image.jpg";i:2;s:25:"/images/blog/1x/xaf-2.png";i:3;s:25:"/images/blog/1x/xaf-3.png";i:4;s:25:"/images/blog/1x/xaf-4.png";}' WHERE `SubsetID`=1 AND `ID`=6;

UPDATE `e2BlogNotes` SET `SubsetID`='1', `Title`='XAF', `Text`='DevExpress XAF — это фреймворк для создания бизнес-приложений. С его помощью можно делать как десктоп, так веб-приложения. Помогает разработчикам сосредоточится на бизнес-логике, а не на деталях реализации интерфейса или архитектуры приложения.\r\n\r\nСо своей стороны, занимался проектированием, развитием и поддержкой UX/UI приложения в связке с ПМом. Разработкой новых фич, улучшение существующих, работой с обратной связью от пользователей.\r\n\r\n# Веб-приложение\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/xaf-2.png\" srcset=\"/images/blog/1x/xaf-2.png 1x, /images/blog/2x/xaf-2@2x.png 2x\" class=\"img-fluid\">\r\n\r\n# Десктопное приложение\r\n\r\n## Общий вид\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/xaf-3.png\" srcset=\"/images/blog/1x/xaf-3.png 1x, /images/blog/2x/xaf-3@2x.png 2x\" class=\"img-fluid\">\r\n\r\n## Авторизация\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/xaf-4.png\" srcset=\"/images/blog/1x/xaf-4.png 1x, /images/blog/2x/xaf-4@2x.png 2x\" class=\"img-fluid\">\r\n\r\n# Нарисован пак иконок\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/xaf-1.png\" srcset=\"/images/blog/1x/xaf-1.png 1x, /images/blog/2x/xaf-1@2x.png 2x\" class=\"img-fluid\">', `Summary`='', `FormatterID`='neasden', `OriginalAlias`='xaf', `Uploads`='a:3:{i:0;s:25:\"/images/blog/1x/xaf-1.png\";i:1;s:15:\"empty-image.jpg\";i:2;s:25:\"/images/blog/1x/xaf-2.png\";}', `IsPublished`='1', `IsCommentable`='0', `IsVisible`='1', `IsFavourite`='1', `Stamp`='1711383936', `LastModified`='1711910900', `Offset`='14400', `IsDST`='0', `IsIndexed`='1', `IsExternal`='0', `ReadCount`='4', `SourceID`='0', `SourceNoteID`='0', `SourceNoteURL`='', `SourceNoteJSONURL`='', `SourceNoteData`='' WHERE `SubsetID`=1 AND (`ID`=6);

UPDATE `e2BlogNotes` SET `SubsetID`='1', `Title`='XAF', `Text`='DevExpress XAF — это фреймворк для создания бизнес-приложений. С его помощью можно делать как десктоп, так веб-приложения. Помогает разработчикам сосредоточится на бизнес-логике, а не на деталях реализации интерфейса или архитектуры приложения.\r\n\r\nСо своей стороны, занимался проектированием, развитием и поддержкой UX/UI приложения в связке с ПМом. Разработкой новых фич, улучшение существующих, работой с обратной связью от пользователей.\r\n\r\n# Веб-приложение\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/xaf-2.png\" srcset=\"/images/blog/1x/xaf-2.png 1x, /images/blog/2x/xaf-2@2x.png 2x\" class=\"img-fluid\">\r\n\r\n# Десктопное приложение\r\n\r\n## Общий вид\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/xaf-3.png\" srcset=\"/images/blog/1x/xaf-3.png 1x, /images/blog/2x/xaf-3@2x.png 2x\" class=\"img-fluid\">\r\n\r\n## Авторизация\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/xaf-4.png\" srcset=\"/images/blog/1x/xaf-4.png 1x, /images/blog/2x/xaf-4@2x.png 2x\" class=\"img-fluid\">\r\n\r\n# Нарисован пак иконок\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/xaf-1.png\" srcset=\"/images/blog/1x/xaf-1.png 1x, /images/blog/2x/xaf-1@2x.png 2x\" class=\"img-fluid\">', `Summary`='', `FormatterID`='neasden', `OriginalAlias`='xaf', `Uploads`='a:5:{i:0;s:25:\"/images/blog/1x/xaf-1.png\";i:1;s:15:\"empty-image.jpg\";i:2;s:25:\"/images/blog/1x/xaf-2.png\";i:4;s:25:\"/images/blog/1x/xaf-3.png\";i:5;s:25:\"/images/blog/1x/xaf-4.png\";}', `IsPublished`='1', `IsCommentable`='0', `IsVisible`='1', `IsFavourite`='1', `Stamp`='1711383936', `LastModified`='1711910900', `Offset`='14400', `IsDST`='0', `IsIndexed`='1', `IsExternal`='0', `ReadCount`='4', `SourceID`='0', `SourceNoteID`='0', `SourceNoteURL`='', `SourceNoteJSONURL`='', `SourceNoteData`='' WHERE `SubsetID`=1 AND (`ID`=6);

UPDATE `e2BlogAliases` SET `EntityType`='n', `EntityID`='6', `Alias`='xaf', `Stamp`='1711911199' WHERE `SubsetID`=1 AND (`ID`=5);

UPDATE `e2BlogNotes` SET `SubsetID`='1', `Title`='XAF', `Text`='DevExpress XAF — это фреймворк для создания бизнес-приложений. С его помощью можно делать как десктоп, так веб-приложения. Помогает разработчикам сосредоточится на бизнес-логике, а не на деталях реализации интерфейса или архитектуры приложения.\r\n\r\nСо своей стороны, занимался проектированием, развитием и поддержкой UX/UI приложения в связке с ПМом. Разработкой новых фич, улучшение существующих, работой с обратной связью от пользователей.\r\n\r\n# Веб-приложение\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/xaf-2.png\" srcset=\"/images/blog/1x/xaf-2.png 1x, /images/blog/2x/xaf-2@2x.png 2x\" class=\"img-fluid\">\r\n\r\n# Десктопное приложение\r\n\r\n## Общий вид\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/xaf-3.png\" srcset=\"/images/blog/1x/xaf-3.png 1x, /images/blog/2x/xaf-3@2x.png 2x\" class=\"img-fluid\">\r\n\r\n## Авторизация\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/xaf-4.png\" srcset=\"/images/blog/1x/xaf-4.png 1x, /images/blog/2x/xaf-4@2x.png 2x\" class=\"img-fluid\">\r\n\r\n# Пак иконок\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/xaf-1.png\" srcset=\"/images/blog/1x/xaf-1.png 1x, /images/blog/2x/xaf-1@2x.png 2x\" class=\"img-fluid\">', `Summary`='', `FormatterID`='neasden', `OriginalAlias`='xaf', `Uploads`='a:5:{i:0;s:25:\"/images/blog/1x/xaf-1.png\";i:1;s:15:\"empty-image.jpg\";i:2;s:25:\"/images/blog/1x/xaf-2.png\";i:4;s:25:\"/images/blog/1x/xaf-3.png\";i:5;s:25:\"/images/blog/1x/xaf-4.png\";}', `IsPublished`='1', `IsCommentable`='0', `IsVisible`='1', `IsFavourite`='1', `Stamp`='1711383936', `LastModified`='1711911199', `Offset`='14400', `IsDST`='0', `IsIndexed`='0', `IsExternal`='0', `ReadCount`='4', `SourceID`='0', `SourceNoteID`='0', `SourceNoteURL`='', `SourceNoteJSONURL`='', `SourceNoteData`='' WHERE `SubsetID`=1 AND (`ID`=6);

UPDATE `e2BlogNotes` SET `SubsetID`='1', `Title`='XAF', `Text`='DevExpress XAF — это фреймворк для создания бизнес-приложений. С его помощью можно делать как десктоп, так веб-приложения. Помогает разработчикам сосредоточится на бизнес-логике, а не на деталях реализации интерфейса или архитектуры приложения.\r\n\r\nСо своей стороны, занимался проектированием, развитием и поддержкой UX/UI приложения в связке с ПМом. Разработкой новых фич, улучшение существующих, работой с обратной связью от пользователей.\r\n\r\n# Веб-приложение\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/xaf-2.png\" srcset=\"/images/blog/1x/xaf-2.png 1x, /images/blog/2x/xaf-2@2x.png 2x\" class=\"img-fluid\">\r\n\r\n# Десктопное приложение\r\n\r\n## Общий вид\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/xaf-3.png\" srcset=\"/images/blog/1x/xaf-3.png 1x, /images/blog/2x/xaf-3@2x.png 2x\" class=\"img-fluid\">\r\n\r\n## Авторизация\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/xaf-4.png\" srcset=\"/images/blog/1x/xaf-4.png 1x, /images/blog/2x/xaf-4@2x.png 2x\" class=\"img-fluid\">\r\n\r\n# Пак иконок\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/xaf-1.png\" srcset=\"/images/blog/1x/xaf-1.png 1x, /images/blog/2x/xaf-1@2x.png 2x\" class=\"img-fluid\">', `Summary`='', `FormatterID`='neasden', `OriginalAlias`='xaf', `Uploads`='a:5:{i:0;s:25:\"/images/blog/1x/xaf-1.png\";i:1;s:15:\"empty-image.jpg\";i:2;s:25:\"/images/blog/1x/xaf-2.png\";i:4;s:25:\"/images/blog/1x/xaf-3.png\";i:5;s:25:\"/images/blog/1x/xaf-4.png\";}', `IsPublished`='1', `IsCommentable`='0', `IsVisible`='1', `IsFavourite`='1', `Stamp`='1711383936', `LastModified`='1711911199', `Offset`='14400', `IsDST`='0', `IsIndexed`='1', `IsExternal`='0', `ReadCount`='4', `SourceID`='0', `SourceNoteID`='0', `SourceNoteURL`='', `SourceNoteJSONURL`='', `SourceNoteData`='' WHERE `SubsetID`=1 AND (`ID`=6);

UPDATE `e2BlogAliases` SET `EntityType`='n', `EntityID`='3', `Alias`='localization', `Stamp`='1711911283' WHERE `SubsetID`=1 AND (`ID`=3);

UPDATE `e2BlogNotes` SET `SubsetID`='1', `Title`='Localization', `Text`='Обновлен устаревший интерфейс. В рамках улучшений было изучено, как пользователи пользуются сервисом. На основе этих данных внесены корректировки в интерфейс. ', `Summary`='', `FormatterID`='neasden', `OriginalAlias`='localization', `Uploads`='a:0:{}', `IsPublished`='1', `IsCommentable`='0', `IsVisible`='1', `IsFavourite`='0', `Stamp`='1711383872', `LastModified`='1711911283', `Offset`='14400', `IsDST`='0', `IsIndexed`='0', `IsExternal`='0', `ReadCount`='4', `SourceID`='0', `SourceNoteID`='0', `SourceNoteURL`='', `SourceNoteJSONURL`='', `SourceNoteData`='' WHERE `SubsetID`=1 AND (`ID`=3);

UPDATE `e2BlogNotes` SET `SubsetID`='1', `Title`='Localization', `Text`='Обновлен устаревший интерфейс. В рамках улучшений было изучено, как пользователи пользуются сервисом. На основе этих данных внесены корректировки в интерфейс. ', `Summary`='', `FormatterID`='neasden', `OriginalAlias`='localization', `Uploads`='a:0:{}', `IsPublished`='1', `IsCommentable`='0', `IsVisible`='1', `IsFavourite`='0', `Stamp`='1711383872', `LastModified`='1711911283', `Offset`='14400', `IsDST`='0', `IsIndexed`='1', `IsExternal`='0', `ReadCount`='4', `SourceID`='0', `SourceNoteID`='0', `SourceNoteURL`='', `SourceNoteJSONURL`='', `SourceNoteData`='' WHERE `SubsetID`=1 AND (`ID`=3);

UPDATE `e2BlogAliases` SET `EntityType`='n', `EntityID`='3', `Alias`='localization', `Stamp`='1711911575' WHERE `SubsetID`=1 AND (`ID`=3);

UPDATE `e2BlogNotes` SET `SubsetID`='1', `Title`='Localization', `Text`='DevExpress Localization предоставляет механизмы и инструменты для локализации своих компонентов. Позволяя разработчикам и переводчикам легко переводить тексты и адаптировать приложения под нужные языковые и культурные требования.\r\n\r\nОбновлен устаревший интерфейс. В рамках улучшений было изучено, как пользователи пользуются сервисом. На основе этих данных внесены корректировки в интерфейс. ', `Summary`='', `FormatterID`='neasden', `OriginalAlias`='localization', `Uploads`='a:0:{}', `IsPublished`='1', `IsCommentable`='0', `IsVisible`='1', `IsFavourite`='0', `Stamp`='1711383872', `LastModified`='1711911575', `Offset`='14400', `IsDST`='0', `IsIndexed`='0', `IsExternal`='0', `ReadCount`='4', `SourceID`='0', `SourceNoteID`='0', `SourceNoteURL`='', `SourceNoteJSONURL`='', `SourceNoteData`='' WHERE `SubsetID`=1 AND (`ID`=3);

UPDATE `e2BlogNotes` SET `SubsetID`='1', `Title`='Localization', `Text`='DevExpress Localization предоставляет механизмы и инструменты для локализации своих компонентов. Позволяя разработчикам и переводчикам легко переводить тексты и адаптировать приложения под нужные языковые и культурные требования.\r\n\r\nОбновлен устаревший интерфейс. В рамках улучшений было изучено, как пользователи пользуются сервисом. На основе этих данных внесены корректировки в интерфейс. ', `Summary`='', `FormatterID`='neasden', `OriginalAlias`='localization', `Uploads`='a:0:{}', `IsPublished`='1', `IsCommentable`='0', `IsVisible`='1', `IsFavourite`='0', `Stamp`='1711383872', `LastModified`='1711911575', `Offset`='14400', `IsDST`='0', `IsIndexed`='1', `IsExternal`='0', `ReadCount`='4', `SourceID`='0', `SourceNoteID`='0', `SourceNoteURL`='', `SourceNoteJSONURL`='', `SourceNoteData`='' WHERE `SubsetID`=1 AND (`ID`=3);

UPDATE `e2BlogAliases` SET `EntityType`='n', `EntityID`='3', `Alias`='localization', `Stamp`='1711911582' WHERE `SubsetID`=1 AND (`ID`=3);

UPDATE `e2BlogNotes` SET `SubsetID`='1', `Title`='Localization', `Text`='DevExpress Localization — механизмы и инструменты для локализации своих компонентов. Позволяя разработчикам и переводчикам легко переводить тексты и адаптировать приложения под нужные языковые и культурные требования.\r\n\r\nОбновлен устаревший интерфейс. В рамках улучшений было изучено, как пользователи пользуются сервисом. На основе этих данных внесены корректировки в интерфейс. ', `Summary`='', `FormatterID`='neasden', `OriginalAlias`='localization', `Uploads`='a:0:{}', `IsPublished`='1', `IsCommentable`='0', `IsVisible`='1', `IsFavourite`='0', `Stamp`='1711383872', `LastModified`='1711911582', `Offset`='14400', `IsDST`='0', `IsIndexed`='0', `IsExternal`='0', `ReadCount`='4', `SourceID`='0', `SourceNoteID`='0', `SourceNoteURL`='', `SourceNoteJSONURL`='', `SourceNoteData`='' WHERE `SubsetID`=1 AND (`ID`=3);

UPDATE `e2BlogNotes` SET `SubsetID`='1', `Title`='Localization', `Text`='DevExpress Localization — механизмы и инструменты для локализации своих компонентов. Позволяя разработчикам и переводчикам легко переводить тексты и адаптировать приложения под нужные языковые и культурные требования.\r\n\r\nОбновлен устаревший интерфейс. В рамках улучшений было изучено, как пользователи пользуются сервисом. На основе этих данных внесены корректировки в интерфейс. ', `Summary`='', `FormatterID`='neasden', `OriginalAlias`='localization', `Uploads`='a:0:{}', `IsPublished`='1', `IsCommentable`='0', `IsVisible`='1', `IsFavourite`='0', `Stamp`='1711383872', `LastModified`='1711911582', `Offset`='14400', `IsDST`='0', `IsIndexed`='1', `IsExternal`='0', `ReadCount`='4', `SourceID`='0', `SourceNoteID`='0', `SourceNoteURL`='', `SourceNoteJSONURL`='', `SourceNoteData`='' WHERE `SubsetID`=1 AND (`ID`=3);

UPDATE `e2BlogAliases` SET `EntityType`='n', `EntityID`='3', `Alias`='localization', `Stamp`='1711911616' WHERE `SubsetID`=1 AND (`ID`=3);

UPDATE `e2BlogNotes` SET `SubsetID`='1', `Title`='Localization', `Text`='DevExpress Localization — механизмы и инструменты для локализации своих компонентов. Даёт возможность разработчикам и переводчикам легко переводить тексты и адаптировать приложения под нужные языковые и культурные требования.\r\n\r\nОбновлен устаревший интерфейс. В рамках улучшений было изучено, как пользователи пользуются сервисом. На основе этих данных внесены корректировки в интерфейс. ', `Summary`='', `FormatterID`='neasden', `OriginalAlias`='localization', `Uploads`='a:0:{}', `IsPublished`='1', `IsCommentable`='0', `IsVisible`='1', `IsFavourite`='0', `Stamp`='1711383872', `LastModified`='1711911616', `Offset`='14400', `IsDST`='0', `IsIndexed`='0', `IsExternal`='0', `ReadCount`='4', `SourceID`='0', `SourceNoteID`='0', `SourceNoteURL`='', `SourceNoteJSONURL`='', `SourceNoteData`='' WHERE `SubsetID`=1 AND (`ID`=3);

UPDATE `e2BlogNotes` SET `SubsetID`='1', `Title`='Localization', `Text`='DevExpress Localization — механизмы и инструменты для локализации своих компонентов. Даёт возможность разработчикам и переводчикам легко переводить тексты и адаптировать приложения под нужные языковые и культурные требования.\r\n\r\nОбновлен устаревший интерфейс. В рамках улучшений было изучено, как пользователи пользуются сервисом. На основе этих данных внесены корректировки в интерфейс. ', `Summary`='', `FormatterID`='neasden', `OriginalAlias`='localization', `Uploads`='a:0:{}', `IsPublished`='1', `IsCommentable`='0', `IsVisible`='1', `IsFavourite`='0', `Stamp`='1711383872', `LastModified`='1711911616', `Offset`='14400', `IsDST`='0', `IsIndexed`='1', `IsExternal`='0', `ReadCount`='4', `SourceID`='0', `SourceNoteID`='0', `SourceNoteURL`='', `SourceNoteJSONURL`='', `SourceNoteData`='' WHERE `SubsetID`=1 AND (`ID`=3);

UPDATE `e2BlogAliases` SET `EntityType`='n', `EntityID`='3', `Alias`='localization', `Stamp`='1711911649' WHERE `SubsetID`=1 AND (`ID`=3);

UPDATE `e2BlogNotes` SET `SubsetID`='1', `Title`='Localization', `Text`='DevExpress Localization — механизмы и инструменты для локализации своих компонентов. Даёт возможность разработчикам и переводчикам легко переводить тексты и адаптировать приложения под нужные языковые и культурные требования.\r\n\r\nЗадача — обновить устаревший интерфейс учитывая бизнес-требования. В рамках улучшений было изучено, как пользователи пользуются сервисом. На основе этих данных внесены корректировки в интерфейс. ', `Summary`='', `FormatterID`='neasden', `OriginalAlias`='localization', `Uploads`='a:0:{}', `IsPublished`='1', `IsCommentable`='0', `IsVisible`='1', `IsFavourite`='0', `Stamp`='1711383872', `LastModified`='1711911649', `Offset`='14400', `IsDST`='0', `IsIndexed`='0', `IsExternal`='0', `ReadCount`='4', `SourceID`='0', `SourceNoteID`='0', `SourceNoteURL`='', `SourceNoteJSONURL`='', `SourceNoteData`='' WHERE `SubsetID`=1 AND (`ID`=3);

UPDATE `e2BlogNotes` SET `SubsetID`='1', `Title`='Localization', `Text`='DevExpress Localization — механизмы и инструменты для локализации своих компонентов. Даёт возможность разработчикам и переводчикам легко переводить тексты и адаптировать приложения под нужные языковые и культурные требования.\r\n\r\nЗадача — обновить устаревший интерфейс учитывая бизнес-требования. В рамках улучшений было изучено, как пользователи пользуются сервисом. На основе этих данных внесены корректировки в интерфейс. ', `Summary`='', `FormatterID`='neasden', `OriginalAlias`='localization', `Uploads`='a:0:{}', `IsPublished`='1', `IsCommentable`='0', `IsVisible`='1', `IsFavourite`='0', `Stamp`='1711383872', `LastModified`='1711911649', `Offset`='14400', `IsDST`='0', `IsIndexed`='1', `IsExternal`='0', `ReadCount`='4', `SourceID`='0', `SourceNoteID`='0', `SourceNoteURL`='', `SourceNoteJSONURL`='', `SourceNoteData`='' WHERE `SubsetID`=1 AND (`ID`=3);

UPDATE `e2BlogAliases` SET `EntityType`='n', `EntityID`='3', `Alias`='localization', `Stamp`='1711911669' WHERE `SubsetID`=1 AND (`ID`=3);

UPDATE `e2BlogNotes` SET `SubsetID`='1', `Title`='Localization', `Text`='DevExpress Localization — механизмы и инструменты для локализации своих компонентов. Даёт возможность разработчикам и переводчикам легко переводить тексты и адаптировать приложения под нужные языковые и культурные требования.\r\n\r\nЗадача — обновить устаревший интерфейс учитывая бизнес-требования.', `Summary`='', `FormatterID`='neasden', `OriginalAlias`='localization', `Uploads`='a:0:{}', `IsPublished`='1', `IsCommentable`='0', `IsVisible`='1', `IsFavourite`='0', `Stamp`='1711383872', `LastModified`='1711911669', `Offset`='14400', `IsDST`='0', `IsIndexed`='0', `IsExternal`='0', `ReadCount`='4', `SourceID`='0', `SourceNoteID`='0', `SourceNoteURL`='', `SourceNoteJSONURL`='', `SourceNoteData`='' WHERE `SubsetID`=1 AND (`ID`=3);

UPDATE `e2BlogNotes` SET `SubsetID`='1', `Title`='Localization', `Text`='DevExpress Localization — механизмы и инструменты для локализации своих компонентов. Даёт возможность разработчикам и переводчикам легко переводить тексты и адаптировать приложения под нужные языковые и культурные требования.\r\n\r\nЗадача — обновить устаревший интерфейс учитывая бизнес-требования.', `Summary`='', `FormatterID`='neasden', `OriginalAlias`='localization', `Uploads`='a:0:{}', `IsPublished`='1', `IsCommentable`='0', `IsVisible`='1', `IsFavourite`='0', `Stamp`='1711383872', `LastModified`='1711911669', `Offset`='14400', `IsDST`='0', `IsIndexed`='1', `IsExternal`='0', `ReadCount`='4', `SourceID`='0', `SourceNoteID`='0', `SourceNoteURL`='', `SourceNoteJSONURL`='', `SourceNoteData`='' WHERE `SubsetID`=1 AND (`ID`=3);

UPDATE `e2BlogAliases` SET `EntityType`='n', `EntityID`='3', `Alias`='localization', `Stamp`='1711912340' WHERE `SubsetID`=1 AND (`ID`=3);

UPDATE `e2BlogNotes` SET `SubsetID`='1', `Title`='Localization', `Text`='DevExpress Localization — механизмы и инструменты для локализации своих компонентов. Даёт возможность разработчикам и переводчикам легко переводить тексты и адаптировать приложения под нужные языковые и культурные требования.\r\n\r\nЗадача — обновить устаревший интерфейс учитывая бизнес-требования.\r\n\r\n# Общий вид\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/localization-1.png\" srcset=\"/images/blog/1x/localization-1.png 1x, /images/blog/2x/localization-1@2x.png 2x\" class=\"img-fluid\">', `Summary`='', `FormatterID`='neasden', `OriginalAlias`='localization', `Uploads`='a:0:{}', `IsPublished`='1', `IsCommentable`='0', `IsVisible`='1', `IsFavourite`='0', `Stamp`='1711383872', `LastModified`='1711912340', `Offset`='14400', `IsDST`='0', `IsIndexed`='0', `IsExternal`='0', `ReadCount`='4', `SourceID`='0', `SourceNoteID`='0', `SourceNoteURL`='', `SourceNoteJSONURL`='', `SourceNoteData`='' WHERE `SubsetID`=1 AND (`ID`=3);

UPDATE `e2BlogNotes` SET `Uploads`='a:2:{i:0;s:34:"/images/blog/1x/localization-1.png";i:1;s:15:"empty-image.jpg";}' WHERE `SubsetID`=1 AND `ID`=3;

UPDATE `e2BlogNotes` SET `SubsetID`='1', `Title`='Localization', `Text`='DevExpress Localization — механизмы и инструменты для локализации своих компонентов. Даёт возможность разработчикам и переводчикам легко переводить тексты и адаптировать приложения под нужные языковые и культурные требования.\r\n\r\nЗадача — обновить устаревший интерфейс учитывая бизнес-требования.\r\n\r\n# Общий вид\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/localization-1.png\" srcset=\"/images/blog/1x/localization-1.png 1x, /images/blog/2x/localization-1@2x.png 2x\" class=\"img-fluid\">', `Summary`='', `FormatterID`='neasden', `OriginalAlias`='localization', `Uploads`='a:0:{}', `IsPublished`='1', `IsCommentable`='0', `IsVisible`='1', `IsFavourite`='0', `Stamp`='1711383872', `LastModified`='1711912340', `Offset`='14400', `IsDST`='0', `IsIndexed`='1', `IsExternal`='0', `ReadCount`='4', `SourceID`='0', `SourceNoteID`='0', `SourceNoteURL`='', `SourceNoteJSONURL`='', `SourceNoteData`='' WHERE `SubsetID`=1 AND (`ID`=3);

UPDATE `e2BlogNotes` SET `SubsetID`='1', `Title`='Localization', `Text`='DevExpress Localization — механизмы и инструменты для локализации своих компонентов. Даёт возможность разработчикам и переводчикам легко переводить тексты и адаптировать приложения под нужные языковые и культурные требования.\r\n\r\nЗадача — обновить устаревший интерфейс учитывая бизнес-требования.\r\n\r\n# Общий вид\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/localization-1.png\" srcset=\"/images/blog/1x/localization-1.png 1x, /images/blog/2x/localization-1@2x.png 2x\" class=\"img-fluid\">', `Summary`='', `FormatterID`='neasden', `OriginalAlias`='localization', `Uploads`='a:2:{i:0;s:34:\"/images/blog/1x/localization-1.png\";i:1;s:15:\"empty-image.jpg\";}', `IsPublished`='1', `IsCommentable`='0', `IsVisible`='1', `IsFavourite`='0', `Stamp`='1711383872', `LastModified`='1711912340', `Offset`='14400', `IsDST`='0', `IsIndexed`='1', `IsExternal`='0', `ReadCount`='4', `SourceID`='0', `SourceNoteID`='0', `SourceNoteURL`='', `SourceNoteJSONURL`='', `SourceNoteData`='' WHERE `SubsetID`=1 AND (`ID`=3);

UPDATE `e2BlogNotes` SET `SubsetID`='1', `Title`='Localization', `Text`='DevExpress Localization — механизмы и инструменты для локализации своих компонентов. Даёт возможность разработчикам и переводчикам легко переводить тексты и адаптировать приложения под нужные языковые и культурные требования.\r\n\r\nЗадача — обновить устаревший интерфейс учитывая бизнес-требования.\r\n\r\n# Общий вид\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/localization-1.png\" srcset=\"/images/blog/1x/localization-1.png 1x, /images/blog/2x/localization-1@2x.png 2x\" class=\"img-fluid\">', `Summary`='', `FormatterID`='neasden', `OriginalAlias`='localization', `Uploads`='a:2:{i:0;s:34:\"/images/blog/1x/localization-1.png\";i:1;s:15:\"empty-image.jpg\";}', `IsPublished`='1', `IsCommentable`='0', `IsVisible`='1', `IsFavourite`='0', `Stamp`='1711383872', `LastModified`='1711912340', `Offset`='14400', `IsDST`='0', `IsIndexed`='1', `IsExternal`='0', `ReadCount`='4', `SourceID`='0', `SourceNoteID`='0', `SourceNoteURL`='', `SourceNoteJSONURL`='', `SourceNoteData`='' WHERE `SubsetID`=1 AND (`ID`=3);

UPDATE `e2BlogAliases` SET `EntityType`='n', `EntityID`='3', `Alias`='localization', `Stamp`='1711913879' WHERE `SubsetID`=1 AND (`ID`=3);

UPDATE `e2BlogNotes` SET `SubsetID`='1', `Title`='Localization', `Text`='DevExpress Localization — механизмы и инструменты для локализации своих компонентов. Даёт возможность разработчикам и переводчикам легко переводить тексты и адаптировать приложения под нужные языковые и культурные требования.\r\n\r\nЗадача — обновить устаревший интерфейс учитывая бизнес-требования.\r\n\r\n# Стартовая страница\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/localization-1.png\" srcset=\"/images/blog/1x/localization-1.png 1x, /images/blog/2x/localization-1@2x.png 2x\" class=\"img-fluid\">\r\n\r\n# Добавление перевода\r\n\r\n## Выбор языка\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/localization-2.png\" srcset=\"/images/blog/1x/localization-2.png 1x, /images/blog/2x/localization-2@2x.png 2x\" class=\"img-fluid\">\r\n\r\n## Перевод слов\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/localization-3.png\" srcset=\"/images/blog/1x/localization-3.png 1x, /images/blog/2x/localization-3@2x.png 2x\" class=\"img-fluid\">\r\n\r\nПользователь может выбрать предложенный машинный перевод слова или ввести свой вариант самостоятельно.', `Summary`='', `FormatterID`='neasden', `OriginalAlias`='localization', `Uploads`='a:2:{i:0;s:34:\"/images/blog/1x/localization-1.png\";i:1;s:15:\"empty-image.jpg\";}', `IsPublished`='1', `IsCommentable`='0', `IsVisible`='1', `IsFavourite`='0', `Stamp`='1711383872', `LastModified`='1711913879', `Offset`='14400', `IsDST`='0', `IsIndexed`='0', `IsExternal`='0', `ReadCount`='4', `SourceID`='0', `SourceNoteID`='0', `SourceNoteURL`='', `SourceNoteJSONURL`='', `SourceNoteData`='' WHERE `SubsetID`=1 AND (`ID`=3);

UPDATE `e2BlogNotes` SET `Uploads`='a:4:{i:0;s:34:"/images/blog/1x/localization-1.png";i:1;s:15:"empty-image.jpg";i:2;s:34:"/images/blog/1x/localization-2.png";i:3;s:34:"/images/blog/1x/localization-3.png";}' WHERE `SubsetID`=1 AND `ID`=3;

UPDATE `e2BlogNotes` SET `SubsetID`='1', `Title`='Localization', `Text`='DevExpress Localization — механизмы и инструменты для локализации своих компонентов. Даёт возможность разработчикам и переводчикам легко переводить тексты и адаптировать приложения под нужные языковые и культурные требования.\r\n\r\nЗадача — обновить устаревший интерфейс учитывая бизнес-требования.\r\n\r\n# Стартовая страница\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/localization-1.png\" srcset=\"/images/blog/1x/localization-1.png 1x, /images/blog/2x/localization-1@2x.png 2x\" class=\"img-fluid\">\r\n\r\n# Добавление перевода\r\n\r\n## Выбор языка\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/localization-2.png\" srcset=\"/images/blog/1x/localization-2.png 1x, /images/blog/2x/localization-2@2x.png 2x\" class=\"img-fluid\">\r\n\r\n## Перевод слов\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/localization-3.png\" srcset=\"/images/blog/1x/localization-3.png 1x, /images/blog/2x/localization-3@2x.png 2x\" class=\"img-fluid\">\r\n\r\nПользователь может выбрать предложенный машинный перевод слова или ввести свой вариант самостоятельно.', `Summary`='', `FormatterID`='neasden', `OriginalAlias`='localization', `Uploads`='a:2:{i:0;s:34:\"/images/blog/1x/localization-1.png\";i:1;s:15:\"empty-image.jpg\";}', `IsPublished`='1', `IsCommentable`='0', `IsVisible`='1', `IsFavourite`='0', `Stamp`='1711383872', `LastModified`='1711913879', `Offset`='14400', `IsDST`='0', `IsIndexed`='1', `IsExternal`='0', `ReadCount`='4', `SourceID`='0', `SourceNoteID`='0', `SourceNoteURL`='', `SourceNoteJSONURL`='', `SourceNoteData`='' WHERE `SubsetID`=1 AND (`ID`=3);

UPDATE `e2BlogNotes` SET `SubsetID`='1', `Title`='Localization', `Text`='DevExpress Localization — механизмы и инструменты для локализации своих компонентов. Даёт возможность разработчикам и переводчикам легко переводить тексты и адаптировать приложения под нужные языковые и культурные требования.\r\n\r\nЗадача — обновить устаревший интерфейс учитывая бизнес-требования.\r\n\r\n# Стартовая страница\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/localization-1.png\" srcset=\"/images/blog/1x/localization-1.png 1x, /images/blog/2x/localization-1@2x.png 2x\" class=\"img-fluid\">\r\n\r\n# Добавление перевода\r\n\r\n## Выбор языка\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/localization-2.png\" srcset=\"/images/blog/1x/localization-2.png 1x, /images/blog/2x/localization-2@2x.png 2x\" class=\"img-fluid\">\r\n\r\n## Перевод слов\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/localization-3.png\" srcset=\"/images/blog/1x/localization-3.png 1x, /images/blog/2x/localization-3@2x.png 2x\" class=\"img-fluid\">\r\n\r\nПользователь может выбрать предложенный машинный перевод слова или ввести свой вариант самостоятельно.', `Summary`='', `FormatterID`='neasden', `OriginalAlias`='localization', `Uploads`='a:4:{i:0;s:34:\"/images/blog/1x/localization-1.png\";i:1;s:15:\"empty-image.jpg\";i:3;s:34:\"/images/blog/1x/localization-2.png\";i:4;s:34:\"/images/blog/1x/localization-3.png\";}', `IsPublished`='1', `IsCommentable`='0', `IsVisible`='1', `IsFavourite`='0', `Stamp`='1711383872', `LastModified`='1711913879', `Offset`='14400', `IsDST`='0', `IsIndexed`='1', `IsExternal`='0', `ReadCount`='4', `SourceID`='0', `SourceNoteID`='0', `SourceNoteURL`='', `SourceNoteJSONURL`='', `SourceNoteData`='' WHERE `SubsetID`=1 AND (`ID`=3);

UPDATE `e2BlogAliases` SET `EntityType`='n', `EntityID`='3', `Alias`='localization', `Stamp`='1711913939' WHERE `SubsetID`=1 AND (`ID`=3);

UPDATE `e2BlogNotes` SET `SubsetID`='1', `Title`='Localization', `Text`='DevExpress Localization — механизмы и инструменты для локализации своих компонентов. Даёт возможность разработчикам и переводчикам легко переводить тексты и адаптировать приложения под нужные языковые и культурные требования.\r\n\r\nЗадача — обновить устаревший интерфейс учитывая бизнес-требования.\r\n\r\n# Стартовая страница\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/localization-1.png\" srcset=\"/images/blog/1x/localization-1.png 1x, /images/blog/2x/localization-1@2x.png 2x\" class=\"img-fluid\">\r\n\r\n# Добавление перевода\r\n\r\n## Выбор языка\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/localization-2.png\" srcset=\"/images/blog/1x/localization-2.png 1x, /images/blog/2x/localization-2@2x.png 2x\" class=\"img-fluid\">\r\n\r\n## Перевод слов\r\n\r\nПользователь может выбрать предложенный машинный перевод слова или ввести свой вариант самостоятельно.\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/localization-3.png\" srcset=\"/images/blog/1x/localization-3.png 1x, /images/blog/2x/localization-3@2x.png 2x\" class=\"img-fluid\">', `Summary`='', `FormatterID`='neasden', `OriginalAlias`='localization', `Uploads`='a:4:{i:0;s:34:\"/images/blog/1x/localization-1.png\";i:1;s:15:\"empty-image.jpg\";i:3;s:34:\"/images/blog/1x/localization-2.png\";i:4;s:34:\"/images/blog/1x/localization-3.png\";}', `IsPublished`='1', `IsCommentable`='0', `IsVisible`='1', `IsFavourite`='0', `Stamp`='1711383872', `LastModified`='1711913939', `Offset`='14400', `IsDST`='0', `IsIndexed`='0', `IsExternal`='0', `ReadCount`='4', `SourceID`='0', `SourceNoteID`='0', `SourceNoteURL`='', `SourceNoteJSONURL`='', `SourceNoteData`='' WHERE `SubsetID`=1 AND (`ID`=3);

UPDATE `e2BlogNotes` SET `SubsetID`='1', `Title`='Localization', `Text`='DevExpress Localization — механизмы и инструменты для локализации своих компонентов. Даёт возможность разработчикам и переводчикам легко переводить тексты и адаптировать приложения под нужные языковые и культурные требования.\r\n\r\nЗадача — обновить устаревший интерфейс учитывая бизнес-требования.\r\n\r\n# Стартовая страница\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/localization-1.png\" srcset=\"/images/blog/1x/localization-1.png 1x, /images/blog/2x/localization-1@2x.png 2x\" class=\"img-fluid\">\r\n\r\n# Добавление перевода\r\n\r\n## Выбор языка\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/localization-2.png\" srcset=\"/images/blog/1x/localization-2.png 1x, /images/blog/2x/localization-2@2x.png 2x\" class=\"img-fluid\">\r\n\r\n## Перевод слов\r\n\r\nПользователь может выбрать предложенный машинный перевод слова или ввести свой вариант самостоятельно.\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/localization-3.png\" srcset=\"/images/blog/1x/localization-3.png 1x, /images/blog/2x/localization-3@2x.png 2x\" class=\"img-fluid\">', `Summary`='', `FormatterID`='neasden', `OriginalAlias`='localization', `Uploads`='a:4:{i:0;s:34:\"/images/blog/1x/localization-1.png\";i:1;s:15:\"empty-image.jpg\";i:3;s:34:\"/images/blog/1x/localization-2.png\";i:4;s:34:\"/images/blog/1x/localization-3.png\";}', `IsPublished`='1', `IsCommentable`='0', `IsVisible`='1', `IsFavourite`='0', `Stamp`='1711383872', `LastModified`='1711913939', `Offset`='14400', `IsDST`='0', `IsIndexed`='1', `IsExternal`='0', `ReadCount`='4', `SourceID`='0', `SourceNoteID`='0', `SourceNoteURL`='', `SourceNoteJSONURL`='', `SourceNoteData`='' WHERE `SubsetID`=1 AND (`ID`=3);

UPDATE `e2BlogNotes` SET `SubsetID`='1', `Title`='Localization', `Text`='DevExpress Localization — механизмы и инструменты для локализации своих компонентов. Даёт возможность разработчикам и переводчикам легко переводить тексты и адаптировать приложения под нужные языковые и культурные требования.\r\n\r\nЗадача — обновить устаревший интерфейс учитывая бизнес-требования.\r\n\r\n# Стартовая страница\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/localization-1.png\" srcset=\"/images/blog/1x/localization-1.png 1x, /images/blog/2x/localization-1@2x.png 2x\" class=\"img-fluid\">\r\n\r\n# Добавление перевода\r\n\r\n## Выбор языка\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/localization-2.png\" srcset=\"/images/blog/1x/localization-2.png 1x, /images/blog/2x/localization-2@2x.png 2x\" class=\"img-fluid\">\r\n\r\n## Перевод слов\r\n\r\nПользователь может выбрать предложенный машинный перевод слова или ввести свой вариант самостоятельно.\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/localization-3.png\" srcset=\"/images/blog/1x/localization-3.png 1x, /images/blog/2x/localization-3@2x.png 2x\" class=\"img-fluid\">', `Summary`='', `FormatterID`='neasden', `OriginalAlias`='localization', `Uploads`='a:4:{i:0;s:34:\"/images/blog/1x/localization-1.png\";i:1;s:15:\"empty-image.jpg\";i:2;s:34:\"/images/blog/1x/localization-2.png\";i:3;s:34:\"/images/blog/1x/localization-3.png\";}', `IsPublished`='1', `IsCommentable`='0', `IsVisible`='1', `IsFavourite`='0', `Stamp`='1711383872', `LastModified`='1711913939', `Offset`='14400', `IsDST`='0', `IsIndexed`='1', `IsExternal`='0', `ReadCount`='4', `SourceID`='0', `SourceNoteID`='0', `SourceNoteURL`='', `SourceNoteJSONURL`='', `SourceNoteData`='' WHERE `SubsetID`=1 AND (`ID`=3);

UPDATE `e2BlogAliases` SET `EntityType`='n', `EntityID`='3', `Alias`='localization', `Stamp`='1711915332' WHERE `SubsetID`=1 AND (`ID`=3);

UPDATE `e2BlogNotes` SET `SubsetID`='1', `Title`='Localization', `Text`='DevExpress Localization — механизмы и инструменты для локализации своих компонентов. Даёт возможность разработчикам и переводчикам легко переводить тексты и адаптировать приложения под нужные языковые и культурные требования.\r\n\r\nЗадача — обновить устаревший интерфейс учитывая бизнес-требования.\r\n\r\n# Стартовая страница\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/localization-1.png\" srcset=\"/images/blog/1x/localization-1.png 1x, /images/blog/2x/localization-1@2x.png 2x\" class=\"img-fluid\">\r\n\r\n# Добавление перевода\r\n\r\n## Выбор языка\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/localization-2.png\" srcset=\"/images/blog/1x/localization-2.png 1x, /images/blog/2x/localization-2@2x.png 2x\" class=\"img-fluid\">\r\n\r\n## Перевод слов\r\n\r\nПользователь может выбрать предложенный машинный перевод слова или ввести свой вариант самостоятельно.\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/localization-3.png\" srcset=\"/images/blog/1x/localization-3.png 1x, /images/blog/2x/localization-3@2x.png 2x\" class=\"img-fluid\">\r\n\r\n# Статус всех переводов\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/localization-4.png\" srcset=\"/images/blog/1x/localization-4.png 1x, /images/blog/2x/localization-4@2x.png 2x\" class=\"img-fluid\">', `Summary`='', `FormatterID`='neasden', `OriginalAlias`='localization', `Uploads`='a:4:{i:0;s:34:\"/images/blog/1x/localization-1.png\";i:1;s:15:\"empty-image.jpg\";i:2;s:34:\"/images/blog/1x/localization-2.png\";i:3;s:34:\"/images/blog/1x/localization-3.png\";}', `IsPublished`='1', `IsCommentable`='0', `IsVisible`='1', `IsFavourite`='0', `Stamp`='1711383872', `LastModified`='1711915332', `Offset`='14400', `IsDST`='0', `IsIndexed`='0', `IsExternal`='0', `ReadCount`='4', `SourceID`='0', `SourceNoteID`='0', `SourceNoteURL`='', `SourceNoteJSONURL`='', `SourceNoteData`='' WHERE `SubsetID`=1 AND (`ID`=3);

UPDATE `e2BlogNotes` SET `Uploads`='a:5:{i:0;s:34:"/images/blog/1x/localization-1.png";i:1;s:15:"empty-image.jpg";i:2;s:34:"/images/blog/1x/localization-2.png";i:3;s:34:"/images/blog/1x/localization-3.png";i:4;s:34:"/images/blog/1x/localization-4.png";}' WHERE `SubsetID`=1 AND `ID`=3;

UPDATE `e2BlogNotes` SET `SubsetID`='1', `Title`='Localization', `Text`='DevExpress Localization — механизмы и инструменты для локализации своих компонентов. Даёт возможность разработчикам и переводчикам легко переводить тексты и адаптировать приложения под нужные языковые и культурные требования.\r\n\r\nЗадача — обновить устаревший интерфейс учитывая бизнес-требования.\r\n\r\n# Стартовая страница\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/localization-1.png\" srcset=\"/images/blog/1x/localization-1.png 1x, /images/blog/2x/localization-1@2x.png 2x\" class=\"img-fluid\">\r\n\r\n# Добавление перевода\r\n\r\n## Выбор языка\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/localization-2.png\" srcset=\"/images/blog/1x/localization-2.png 1x, /images/blog/2x/localization-2@2x.png 2x\" class=\"img-fluid\">\r\n\r\n## Перевод слов\r\n\r\nПользователь может выбрать предложенный машинный перевод слова или ввести свой вариант самостоятельно.\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/localization-3.png\" srcset=\"/images/blog/1x/localization-3.png 1x, /images/blog/2x/localization-3@2x.png 2x\" class=\"img-fluid\">\r\n\r\n# Статус всех переводов\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/localization-4.png\" srcset=\"/images/blog/1x/localization-4.png 1x, /images/blog/2x/localization-4@2x.png 2x\" class=\"img-fluid\">', `Summary`='', `FormatterID`='neasden', `OriginalAlias`='localization', `Uploads`='a:4:{i:0;s:34:\"/images/blog/1x/localization-1.png\";i:1;s:15:\"empty-image.jpg\";i:2;s:34:\"/images/blog/1x/localization-2.png\";i:3;s:34:\"/images/blog/1x/localization-3.png\";}', `IsPublished`='1', `IsCommentable`='0', `IsVisible`='1', `IsFavourite`='0', `Stamp`='1711383872', `LastModified`='1711915332', `Offset`='14400', `IsDST`='0', `IsIndexed`='1', `IsExternal`='0', `ReadCount`='4', `SourceID`='0', `SourceNoteID`='0', `SourceNoteURL`='', `SourceNoteJSONURL`='', `SourceNoteData`='' WHERE `SubsetID`=1 AND (`ID`=3);

UPDATE `e2BlogAliases` SET `EntityType`='n', `EntityID`='2', `Alias`='cloud4rpi', `Stamp`='1711916126' WHERE `SubsetID`=1 AND (`ID`=2);

UPDATE `e2BlogNotes` SET `SubsetID`='1', `Title`='Cloud4RPi', `Text`='Cloud4RPi — это платформа для интернета вещей (IoT), предлагает разработчикам инструменты для быстрого создания и управления IoT устройствами. Поддерживает множество аппаратных платформ, включая Arduino, Raspberry Pi, ESP8266, ESP32 и другие.\r\n\r\nВ рамках работы на проект был разработан интерфейс и сценарии работы с панелью управления IoT девайсами. \r\n\r\n# Лендинг страница\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/cloud4rpi-1.png\" srcset=\"/images/blog/1x/cloud4rpi-1.png 1x, /images/blog/2x/cloud4rpi-1@2x.png 2x\" class=\"img-fluid\">', `Summary`='', `FormatterID`='neasden', `OriginalAlias`='cloud4rpi', `Uploads`='a:0:{}', `IsPublished`='1', `IsCommentable`='0', `IsVisible`='1', `IsFavourite`='0', `Stamp`='1711383857', `LastModified`='1711916126', `Offset`='14400', `IsDST`='0', `IsIndexed`='0', `IsExternal`='0', `ReadCount`='4', `SourceID`='0', `SourceNoteID`='0', `SourceNoteURL`='', `SourceNoteJSONURL`='', `SourceNoteData`='' WHERE `SubsetID`=1 AND (`ID`=2);

UPDATE `e2BlogNotes` SET `Uploads`='a:2:{i:0;s:31:"/images/blog/1x/cloud4rpi-1.png";i:1;s:15:"empty-image.jpg";}' WHERE `SubsetID`=1 AND `ID`=2;

UPDATE `e2BlogNotes` SET `SubsetID`='1', `Title`='Cloud4RPi', `Text`='Cloud4RPi — это платформа для интернета вещей (IoT), предлагает разработчикам инструменты для быстрого создания и управления IoT устройствами. Поддерживает множество аппаратных платформ, включая Arduino, Raspberry Pi, ESP8266, ESP32 и другие.\r\n\r\nВ рамках работы на проект был разработан интерфейс и сценарии работы с панелью управления IoT девайсами. \r\n\r\n# Лендинг страница\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/cloud4rpi-1.png\" srcset=\"/images/blog/1x/cloud4rpi-1.png 1x, /images/blog/2x/cloud4rpi-1@2x.png 2x\" class=\"img-fluid\">', `Summary`='', `FormatterID`='neasden', `OriginalAlias`='cloud4rpi', `Uploads`='a:0:{}', `IsPublished`='1', `IsCommentable`='0', `IsVisible`='1', `IsFavourite`='0', `Stamp`='1711383857', `LastModified`='1711916126', `Offset`='14400', `IsDST`='0', `IsIndexed`='1', `IsExternal`='0', `ReadCount`='4', `SourceID`='0', `SourceNoteID`='0', `SourceNoteURL`='', `SourceNoteJSONURL`='', `SourceNoteData`='' WHERE `SubsetID`=1 AND (`ID`=2);

UPDATE `e2BlogNotes` SET `SubsetID`='1', `Title`='Cloud4RPi', `Text`='Cloud4RPi — это платформа для интернета вещей (IoT), предлагает разработчикам инструменты для быстрого создания и управления IoT устройствами. Поддерживает множество аппаратных платформ, включая Arduino, Raspberry Pi, ESP8266, ESP32 и другие.\r\n\r\nВ рамках работы на проект был разработан интерфейс и сценарии работы с панелью управления IoT девайсами. \r\n\r\n# Лендинг страница\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/cloud4rpi-1.png\" srcset=\"/images/blog/1x/cloud4rpi-1.png 1x, /images/blog/2x/cloud4rpi-1@2x.png 2x\" class=\"img-fluid\">', `Summary`='', `FormatterID`='neasden', `OriginalAlias`='cloud4rpi', `Uploads`='a:2:{i:0;s:31:\"/images/blog/1x/cloud4rpi-1.png\";i:1;s:15:\"empty-image.jpg\";}', `IsPublished`='1', `IsCommentable`='0', `IsVisible`='1', `IsFavourite`='0', `Stamp`='1711383857', `LastModified`='1711916126', `Offset`='14400', `IsDST`='0', `IsIndexed`='1', `IsExternal`='0', `ReadCount`='4', `SourceID`='0', `SourceNoteID`='0', `SourceNoteURL`='', `SourceNoteJSONURL`='', `SourceNoteData`='' WHERE `SubsetID`=1 AND (`ID`=2);

UPDATE `e2BlogAliases` SET `EntityType`='n', `EntityID`='2', `Alias`='cloud4rpi', `Stamp`='1711916772' WHERE `SubsetID`=1 AND (`ID`=2);

UPDATE `e2BlogNotes` SET `SubsetID`='1', `Title`='Cloud4RPi', `Text`='Cloud4RPi — это платформа для интернета вещей (IoT), предлагает разработчикам инструменты для быстрого создания и управления IoT устройствами. Поддерживает множество аппаратных платформ, включая Arduino, Raspberry Pi, ESP8266, ESP32 и другие.\r\n\r\nВ рамках работы на проект был разработан интерфейс и сценарии работы с панелью управления IoT девайсами. \r\n\r\n# Лендинг страница\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/cloud4rpi-1.png\" srcset=\"/images/blog/1x/cloud4rpi-1.png 1x, /images/blog/2x/cloud4rpi-1@2x.png 2x\" class=\"img-fluid\">\r\n\r\n# Панель управления\r\n\r\n## Стартовый экран\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/cloud4rpi-2.png\" srcset=\"/images/blog/1x/cloud4rpi-2.png 1x, /images/blog/2x/cloud4rpi-2@2x.png 2x\" class=\"img-fluid\">', `Summary`='', `FormatterID`='neasden', `OriginalAlias`='cloud4rpi', `Uploads`='a:2:{i:0;s:31:\"/images/blog/1x/cloud4rpi-1.png\";i:1;s:15:\"empty-image.jpg\";}', `IsPublished`='1', `IsCommentable`='0', `IsVisible`='1', `IsFavourite`='0', `Stamp`='1711383857', `LastModified`='1711916772', `Offset`='14400', `IsDST`='0', `IsIndexed`='0', `IsExternal`='0', `ReadCount`='4', `SourceID`='0', `SourceNoteID`='0', `SourceNoteURL`='', `SourceNoteJSONURL`='', `SourceNoteData`='' WHERE `SubsetID`=1 AND (`ID`=2);

UPDATE `e2BlogNotes` SET `Uploads`='a:3:{i:0;s:31:"/images/blog/1x/cloud4rpi-1.png";i:1;s:15:"empty-image.jpg";i:2;s:31:"/images/blog/1x/cloud4rpi-2.png";}' WHERE `SubsetID`=1 AND `ID`=2;

UPDATE `e2BlogNotes` SET `SubsetID`='1', `Title`='Cloud4RPi', `Text`='Cloud4RPi — это платформа для интернета вещей (IoT), предлагает разработчикам инструменты для быстрого создания и управления IoT устройствами. Поддерживает множество аппаратных платформ, включая Arduino, Raspberry Pi, ESP8266, ESP32 и другие.\r\n\r\nВ рамках работы на проект был разработан интерфейс и сценарии работы с панелью управления IoT девайсами. \r\n\r\n# Лендинг страница\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/cloud4rpi-1.png\" srcset=\"/images/blog/1x/cloud4rpi-1.png 1x, /images/blog/2x/cloud4rpi-1@2x.png 2x\" class=\"img-fluid\">\r\n\r\n# Панель управления\r\n\r\n## Стартовый экран\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/cloud4rpi-2.png\" srcset=\"/images/blog/1x/cloud4rpi-2.png 1x, /images/blog/2x/cloud4rpi-2@2x.png 2x\" class=\"img-fluid\">', `Summary`='', `FormatterID`='neasden', `OriginalAlias`='cloud4rpi', `Uploads`='a:2:{i:0;s:31:\"/images/blog/1x/cloud4rpi-1.png\";i:1;s:15:\"empty-image.jpg\";}', `IsPublished`='1', `IsCommentable`='0', `IsVisible`='1', `IsFavourite`='0', `Stamp`='1711383857', `LastModified`='1711916772', `Offset`='14400', `IsDST`='0', `IsIndexed`='1', `IsExternal`='0', `ReadCount`='4', `SourceID`='0', `SourceNoteID`='0', `SourceNoteURL`='', `SourceNoteJSONURL`='', `SourceNoteData`='' WHERE `SubsetID`=1 AND (`ID`=2);

UPDATE `e2BlogNotes` SET `SubsetID`='1', `Title`='Cloud4RPi', `Text`='Cloud4RPi — это платформа для интернета вещей (IoT), предлагает разработчикам инструменты для быстрого создания и управления IoT устройствами. Поддерживает множество аппаратных платформ, включая Arduino, Raspberry Pi, ESP8266, ESP32 и другие.\r\n\r\nВ рамках работы на проект был разработан интерфейс и сценарии работы с панелью управления IoT девайсами. \r\n\r\n# Лендинг страница\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/cloud4rpi-1.png\" srcset=\"/images/blog/1x/cloud4rpi-1.png 1x, /images/blog/2x/cloud4rpi-1@2x.png 2x\" class=\"img-fluid\">\r\n\r\n# Панель управления\r\n\r\n## Стартовый экран\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/cloud4rpi-2.png\" srcset=\"/images/blog/1x/cloud4rpi-2.png 1x, /images/blog/2x/cloud4rpi-2@2x.png 2x\" class=\"img-fluid\">', `Summary`='', `FormatterID`='neasden', `OriginalAlias`='cloud4rpi', `Uploads`='a:3:{i:0;s:31:\"/images/blog/1x/cloud4rpi-1.png\";i:1;s:15:\"empty-image.jpg\";i:3;s:31:\"/images/blog/1x/cloud4rpi-2.png\";}', `IsPublished`='1', `IsCommentable`='0', `IsVisible`='1', `IsFavourite`='0', `Stamp`='1711383857', `LastModified`='1711916772', `Offset`='14400', `IsDST`='0', `IsIndexed`='1', `IsExternal`='0', `ReadCount`='4', `SourceID`='0', `SourceNoteID`='0', `SourceNoteURL`='', `SourceNoteJSONURL`='', `SourceNoteData`='' WHERE `SubsetID`=1 AND (`ID`=2);

UPDATE `e2BlogAliases` SET `EntityType`='n', `EntityID`='2', `Alias`='cloud4rpi', `Stamp`='1711918099' WHERE `SubsetID`=1 AND (`ID`=2);

UPDATE `e2BlogNotes` SET `SubsetID`='1', `Title`='Cloud4RPi', `Text`='Cloud4RPi — это платформа для интернета вещей (IoT), предлагает разработчикам инструменты для быстрого создания и управления IoT устройствами. Поддерживает множество аппаратных платформ, включая Arduino, Raspberry Pi, ESP8266, ESP32 и другие.\r\n\r\nВ рамках работы на проект был разработан интерфейс и сценарии работы с панелью управления IoT девайсами. \r\n\r\n# Лендинг страница\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/cloud4rpi-1.png\" srcset=\"/images/blog/1x/cloud4rpi-1.png 1x, /images/blog/2x/cloud4rpi-1@2x.png 2x\" class=\"img-fluid\">\r\n\r\n# Панель управления\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/cloud4rpi-2.png\" srcset=\"/images/blog/1x/cloud4rpi-2.png 1x, /images/blog/2x/cloud4rpi-2@2x.png 2x\" class=\"img-fluid\">\r\n\r\n# Визард добавления девайса\r\n\r\n## Выбор модели\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/cloud4rpi-3.png\" srcset=\"/images/blog/1x/cloud4rpi-3.png 1x, /images/blog/2x/cloud4rpi-3@2x.png 2x\" class=\"img-fluid\">\r\n\r\n## Инструкции\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/cloud4rpi-4.png\" srcset=\"/images/blog/1x/cloud4rpi-4.png 1x, /images/blog/2x/cloud4rpi-4@2x.png 2x\" class=\"img-fluid\">\r\n\r\n## Устройство добавлено\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/cloud4rpi-5.png\" srcset=\"/images/blog/1x/cloud4rpi-5.png 1x, /images/blog/2x/cloud4rpi-5@2x.png 2x\" class=\"img-fluid\">\r\n\r\n# Управление подпиской\r\n\r\n## Настройка пакетов\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/cloud4rpi-6.png\" srcset=\"/images/blog/1x/cloud4rpi-6.png 1x, /images/blog/2x/cloud4rpi-6@2x.png 2x\" class=\"img-fluid\">\r\n\r\n## Покупка дополнительных пакетов\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/cloud4rpi-7.png\" srcset=\"/images/blog/1x/cloud4rpi-7.png 1x, /images/blog/2x/cloud4rpi-7@2x.png 2x\" class=\"img-fluid\">', `Summary`='', `FormatterID`='neasden', `OriginalAlias`='cloud4rpi', `Uploads`='a:3:{i:0;s:31:\"/images/blog/1x/cloud4rpi-1.png\";i:1;s:15:\"empty-image.jpg\";i:3;s:31:\"/images/blog/1x/cloud4rpi-2.png\";}', `IsPublished`='1', `IsCommentable`='0', `IsVisible`='1', `IsFavourite`='0', `Stamp`='1711383857', `LastModified`='1711918099', `Offset`='14400', `IsDST`='0', `IsIndexed`='0', `IsExternal`='0', `ReadCount`='4', `SourceID`='0', `SourceNoteID`='0', `SourceNoteURL`='', `SourceNoteJSONURL`='', `SourceNoteData`='' WHERE `SubsetID`=1 AND (`ID`=2);

UPDATE `e2BlogNotes` SET `Uploads`='a:8:{i:0;s:31:"/images/blog/1x/cloud4rpi-1.png";i:1;s:15:"empty-image.jpg";i:2;s:31:"/images/blog/1x/cloud4rpi-2.png";i:3;s:31:"/images/blog/1x/cloud4rpi-3.png";i:4;s:31:"/images/blog/1x/cloud4rpi-4.png";i:5;s:31:"/images/blog/1x/cloud4rpi-5.png";i:6;s:31:"/images/blog/1x/cloud4rpi-6.png";i:7;s:31:"/images/blog/1x/cloud4rpi-7.png";}' WHERE `SubsetID`=1 AND `ID`=2;

UPDATE `e2BlogNotes` SET `SubsetID`='1', `Title`='Cloud4RPi', `Text`='Cloud4RPi — это платформа для интернета вещей (IoT), предлагает разработчикам инструменты для быстрого создания и управления IoT устройствами. Поддерживает множество аппаратных платформ, включая Arduino, Raspberry Pi, ESP8266, ESP32 и другие.\r\n\r\nВ рамках работы на проект был разработан интерфейс и сценарии работы с панелью управления IoT девайсами. \r\n\r\n# Лендинг страница\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/cloud4rpi-1.png\" srcset=\"/images/blog/1x/cloud4rpi-1.png 1x, /images/blog/2x/cloud4rpi-1@2x.png 2x\" class=\"img-fluid\">\r\n\r\n# Панель управления\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/cloud4rpi-2.png\" srcset=\"/images/blog/1x/cloud4rpi-2.png 1x, /images/blog/2x/cloud4rpi-2@2x.png 2x\" class=\"img-fluid\">\r\n\r\n# Визард добавления девайса\r\n\r\n## Выбор модели\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/cloud4rpi-3.png\" srcset=\"/images/blog/1x/cloud4rpi-3.png 1x, /images/blog/2x/cloud4rpi-3@2x.png 2x\" class=\"img-fluid\">\r\n\r\n## Инструкции\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/cloud4rpi-4.png\" srcset=\"/images/blog/1x/cloud4rpi-4.png 1x, /images/blog/2x/cloud4rpi-4@2x.png 2x\" class=\"img-fluid\">\r\n\r\n## Устройство добавлено\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/cloud4rpi-5.png\" srcset=\"/images/blog/1x/cloud4rpi-5.png 1x, /images/blog/2x/cloud4rpi-5@2x.png 2x\" class=\"img-fluid\">\r\n\r\n# Управление подпиской\r\n\r\n## Настройка пакетов\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/cloud4rpi-6.png\" srcset=\"/images/blog/1x/cloud4rpi-6.png 1x, /images/blog/2x/cloud4rpi-6@2x.png 2x\" class=\"img-fluid\">\r\n\r\n## Покупка дополнительных пакетов\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/cloud4rpi-7.png\" srcset=\"/images/blog/1x/cloud4rpi-7.png 1x, /images/blog/2x/cloud4rpi-7@2x.png 2x\" class=\"img-fluid\">', `Summary`='', `FormatterID`='neasden', `OriginalAlias`='cloud4rpi', `Uploads`='a:3:{i:0;s:31:\"/images/blog/1x/cloud4rpi-1.png\";i:1;s:15:\"empty-image.jpg\";i:3;s:31:\"/images/blog/1x/cloud4rpi-2.png\";}', `IsPublished`='1', `IsCommentable`='0', `IsVisible`='1', `IsFavourite`='0', `Stamp`='1711383857', `LastModified`='1711918099', `Offset`='14400', `IsDST`='0', `IsIndexed`='1', `IsExternal`='0', `ReadCount`='4', `SourceID`='0', `SourceNoteID`='0', `SourceNoteURL`='', `SourceNoteJSONURL`='', `SourceNoteData`='' WHERE `SubsetID`=1 AND (`ID`=2);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1712001600', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1709411698);

UPDATE `e2BlogNotes` SET `SubsetID`='1', `Title`='Support Center', `Text`='Система поддержки пользователей. Включает различные информационные ресурсы: вопросы от пользователей, статьи в базе знаний и истории версий.\r\n\r\nЕжедневно в Support Center создаются сотни новых вопросов и на них отвечают десятки саппорт-инженеров. За годы работы старый интерфейс устарел как внешне, так и с точки зрения удобства и функциональности. Пришла задача полностью переработать платформу, с учётом всех бизнес-требований.\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/sc-1.png\" srcset=\"/images/blog/1x/sc-1.png 1x, /images/blog/2x/sc-1@2x.png 2x\" class=\"img-fluid\">\r\n\r\n# Вводная\r\n\r\nСистема состоит из трёх основных порталов:\r\n\r\n- Клиентский портал\r\n- Внутренний портал для сотрудников\r\n- Админ-панель\r\n\r\nКаждым порталом пользуется свой сегмент пользователей. Клиенты компании ожидают простой и понятный интерфейс . В то время как саппорт-инженеры привыкли к определенным сценариям, которые тоже нужно было сохранить.\r\n\r\n# Клиентский портал\r\n\r\nНа этот ресурс были задействованы основные силы. Клиентский портал даёт возможность клиентам задавать вопросы технического характера и получать на них ответы. \r\n\r\nПеред редизайном ставились следующие задачи:\r\n\r\n- **Снизить нагрузку на саппорт-инженеров.** Помочь пользователям находить ответы самостоятельно, если на вопрос уже отвечали ранее или решение описано в документации.\r\n- **Улучшить UX.** Накопился список проблем, которые нужно было решать:\r\n    - **Пользователи выбирают неверный продукт при создании вопроса.** DevExpress разрабатывает и поддерживает десятки продуктов. У каждого продукта могут быть разные платформы и версии. Иногда важно знать, какая ОС установлена у пользователя, каким IDE он пользуется. Нужно было сделать так, чтобы у пользователя не возникали проблемы при выборе нужных значений. Помочь ему на этом пути.\r\n    - **Возникают проблемы при форматировании текста.** Пользователи приходят в поддержку с техническими проблемами. Описание проблемы содержит куски кода или целые архивы с проектами. В старой версии сайта пользователи путались в текстовом редакторе и отправляли не отформатированные куски куда, которые сливались с обычным текстом. Также, пользователи не всегда понимали как аттачить файлы. Всё это приводило к дополнительной нагрузке на саппорт-инженеров.\r\n    - **Пользователи не замечают уведомления об ответах в их тикете.** Проблема касалась как веб-интерфейса, так и уведомлений приходящих пользователю на почту. Пользователи либо не замечали уведомления, либо не понимали к чему они относятся, либо ранее отключали уведомления и забывали об этом. В связи с этим, среднее время на решение таких тикетов значительно увеличивалось.\r\n    - **Клиенты из одной и той же компании не видят вопросы друг друга.** Большинство клиентов предпочитает оставлять свои вопросы приватно. Чтобы их могли видеть только саппорт-инженеры. Из-за этого возникала проблема, что вопросы становились приватными полностью и их не могли видеть даже сотрудники одной и той же компании с разных аккаунтов.\r\n    - **Неудобные фильтры.** Пользователи, что на странице со списком публичных тикетов невозможно ничего найти. Фильтров мало, а то, что есть не всегда работает очевидным образом.\r\n- **Переосмыслить встроенный инструмент “Version History”.**\r\n- **Улучшить аналитику.**\r\n- **Освежить внешний вид.**\r\n\r\n## Подготовка к работе\r\n\r\nПеред началом работы над редизайном была проведена подготовительная работы. Подготовлен общий план работы и проведены встречи со всеми заинтересованными лицами. Был подготовлен итоговый бриф проекта. \r\n\r\nЧасть работ, которые были проведены на этом этапе:\r\n\r\n- **Анализ текущего дизайна.** UX-тестирование текущего сайта, поиск проблем.\r\n- **Ресёрч конкурентов.** Изучение как прямых конкурентов, так и решений крупных платформ. Например, Zendesk, Freshdesk, Zoho Desk.\r\n- **Сбор и анализ существующего фидбека.** За годы работы, накопилось большое количество тикетов, комментарием и другой обратной связи касаемо работы портала. Была проведена большая работу по сбору всей это информации в один документ, её анализу и приоритизации.\r\n- **Сбор информации от саппорт-инженеров.** Инженеры поддержки активнее всего общаются с пользователями и знают детали и проблемы, которые могут быть неизвестны и неочевидны другим членам команды.\r\n- **Изучение текущих данных аналитики и список того, что хотим собирать ещё в новом дизайне.** Для работы с данными использовались:  Google Analytics (+Google Tag Manager), Matomo, внутренние инструменты.\r\n- **Сбор требований от заказчиков и всех заинтересованных лиц.**\r\n- **Подготовка брифа.** Описание проблем, целей и задач. Развёрнутый ответ на вопрос, что мы будем считать успешным редизайном.\r\n\r\n## Процесс\r\n\r\nРабота над сайтом строилась 2-4 недельными спринтами. В конце каждого спринта проводились синхронизационные встречи с заказчиками. \r\n\r\nВ начале работы над дизайном была согласована общая концепция. Отрисованы низко детализированные прототипы с решением основных UX проблем. Найден общий подход к внешнему виду.  \r\n\r\nЧтобы работа над новым дизайном была эффективной и обратная связь поступала как можно быстрее был принят рад мер:\r\n\r\n- Продукт менеджер продукта показывал прототипы и просто картинки небольшой выборке самых активных и заинтересованных пользователей саппорт-центра. Благодаря этому получалось очень быстро собрать много полезной информации, которая помогала намного быстрее замечать точки роста.\r\n- Тесное общение с разработчиками. Так дизайн значительно обгонял разработку, нужно было сразу учитывать технические ограничения. Для этого проводились постоянные встречи между разработчикам, заказчиками и дизайнером. Так мы оценивали техническую сложность каждой фичи и на основе этого принимали решение, будем мы брать её в работу или нет.\r\n- На этапе, когда появилась первая работающая версия сайта, его стали тестировать сотрудники. В первую очередь, к тестированию подключались саппорт-инженеры. На этом этапе было собрано большое количество фидбека как по техническим багам, визуальным багам, так и просто по неудачным UX-решениям.\r\n- На следующем этапе снова к фидбеку снова были подключены активные клиенты. Которые были готовы дать развёрнутый фидбек.\r\n- На одном из финальных этапов сайт стал доступен для всех пользователей, но в виде бета-версии. При этом, каждый пользователь мог вернуться к старой версии сайта. Со временем, пользователей вернувшихся на старый сайт становилось меньше. Также, мы старались собирать фидбек от таких пользователей. Чтобы понять, почему они вернулись на старую версию сайта.\r\n- К новой версии сайта была прикручена продвинутая аналитика.\r\n\r\n## Примеры реализации\r\n\r\n### Релевантные подсказки при создании тикета\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/sc-2.png\" srcset=\"/images/blog/1x/sc-2.png 1x, /images/blog/2x/sc-2@2x.png 2x\" class=\"img-fluid\">\r\n\r\n### Упрощена навигация по дискуссии с ветвистой иерархией\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/sc-3.png\" srcset=\"/images/blog/1x/sc-3.png 1x, /images/blog/2x/sc-3@2x.png 2x\" class=\"img-fluid\">\r\n\r\n### Обновлены инструменты фильтра на странице со списком тикетов\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/sc-4.png\" srcset=\"/images/blog/1x/sc-4.png 1x, /images/blog/2x/sc-4@2x.png 2x\" class=\"img-fluid\">\r\n\r\n### Сделана мобильная версия под разные размеры\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/sc-5.png\" srcset=\"/images/blog/1x/sc-5.png 1x, /images/blog/2x/sc-5@2x.png 2x\" class=\"img-fluid\">\r\n\r\n# Внутренний портал и админ-панель\r\n\r\nОтдельной крупной задачей была необходимость сделать внутренний портал для сотрудников. Главным вызовом было задача учесть флоу саппорт-инженеров из разных команд. Ингода оно сильно отличалось и нужно было найти решения, которые устроят всех.\r\n\r\nДля этого проводилось множество сложных встреч с саппорт-инженерами из разных команд и топ-саппортом. По каким-то сценариям приходилось идти на компромиссы, по каким-то — выбирать один вариант и убеждать в правильности этого варианта остальных.\r\n\r\nВ результате, судя по опросам и личным разговорам, большая часть сотрудников осталась довольна новой системой.\r\n\r\nТакже, для более гибкой работы и настройки системы под текущие нужды бизнеса была спроектирована админ-панель, где можно точечно настроить различные параметры системы.\r\n\r\nТак как решения внутренние, вдаваться в подробности и показывать скриншоты я не могу.  \r\n\r\n# Результаты\r\n\r\nВ итоге, полный переход на новую версию получился безболезненным. На каждой итерации выявлялись проблемные места и не учтённые сценарий. Большая часть из них решалась, от небольшой части осознанно отказывались.\r\n\r\nСтарая версия сайта постепенно была отключена, когда количество её пользователей стало совсем небольшим.\r\n\r\nОбщая оценка редизайна была оценена как успешная. Как со стороны клиентов, так и со стороны сотрудников. Поставленные перед редизайном цели были достигнуты:\r\n\r\n- **Уменьшилась нагрузка на саппорт-инженеров.**\r\n    - Пользователи стали чаще находить решения самостоятельно: улучшен движок поиска, предлагаются релевантные ссылки при создании тикета, улучшена фильтрация.\r\n    - Пользователи стали реже ошибаться с выбором платформы/продукта и других деталей при создании тикета.\r\n    - Во внутреннем портале появились инструменты, помогающие саппорт-инженерам быстрее отвечать на тикеты, ответ на которые уже давался ранее.\r\n- **Не отформатированные тикеты появляются гораздо реже.** Решилась проблема с тем, что пользователи не понимали, как отправлять аттачи.\r\n- **Уменьшилось количество проблем, когда пользователи не получают уведомления вовремя.**\r\n    - В настройках уведомлений появился отдельный чекбокс, для получения уведомлений от саппорт-центра (раньше был единый чекбокс, для всех почтовых рассылок).\r\n    - Даже если пользователь отключил уведомления от таких рассылок, то саппорт-инженер будет об этом знать. И, если у пользователя возникают с этим проблемы, подсказать варианты решения.\r\n    - Сами почтовые уведомления стали понятнее, появилась возможность подключить браузерные уведомления.\r\n    - Появилась возможность подписать на рассылку на любой тикет со страницы этого тикета.\r\n- **Более точечно настроена аналитика.**\r\n    - Саппорт-инженер теперь может видеть карточку пользователя с историей посещений тикетов и документов в документации. Так инженер поддержки сразу может понять, какие ссылки есть смысл советовать, а какие — нет, так как пользователь их уже посещал.\r\n    - Добавлены ивенты на целевые действия.\r\n    - Созданный внутренние дашборды с анализом различных данных, необходимых для оценки поступаемого  количества тикетов и оценки эффективности саппорта.\r\n- **Поиск по тикетам стал гибче и проще.**\r\n    - Были докручены мета-теги, чтобы тикеты лучше искались поисковиками.\r\n    - Переосмыслены фильтры, добавлены готовые пресеты и возможность подписаться на созданный фильтр.\r\n    - Оптимизирована внутренняя страница поиска.\r\n- **Сделана мобильная версия клиентского портала.**', `Summary`='', `FormatterID`='neasden', `OriginalAlias`='support-center', `Uploads`='a:6:{i:0;s:24:\"/images/blog/1x/sc-1.png\";i:1;s:15:\"empty-image.jpg\";i:2;s:24:\"/images/blog/1x/sc-2.png\";i:3;s:24:\"/images/blog/1x/sc-3.png\";i:4;s:24:\"/images/blog/1x/sc-4.png\";i:5;s:24:\"/images/blog/1x/sc-5.png\";}', `IsPublished`='1', `IsCommentable`='0', `IsVisible`='1', `IsFavourite`='1', `Stamp`='1711383800', `LastModified`='1711831845', `Offset`='14400', `IsDST`='0', `IsIndexed`='1', `IsExternal`='0', `ReadCount`='4', `SourceID`='0', `SourceNoteID`='0', `SourceNoteURL`='', `SourceNoteJSONURL`='', `SourceNoteData`='' WHERE `SubsetID`=1 AND (`ID`=1);

UPDATE `e2BlogAliases` SET `EntityType`='n', `EntityID`='1', `Alias`='support-center', `Stamp`='1712003930' WHERE `SubsetID`=1 AND (`ID`=1);

UPDATE `e2BlogNotes` SET `SubsetID`='1', `Title`='Support Center', `Text`='Система поддержки пользователей. Включает различные информационные ресурсы: вопросы от пользователей, статьи в базе знаний и истории версий.\r\n\r\nЕжедневно в Support Center создаются сотни новых вопросов и на них отвечают десятки саппорт-инженеров. За годы работы старый интерфейс устарел как внешне, так и с точки зрения удобства и функциональности. Пришла задача полностью переработать платформу, с учётом всех бизнес-требований.\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/sc-1.png\" srcset=\"/images/blog/1x/sc-1.png 1x, /images/blog/2x/sc-1@2x.png 2x\" class=\"img-fluid\">\r\n\r\n# Вводная\r\n\r\nСистема состоит из трёх основных порталов:\r\n\r\n- Клиентский портал\r\n- Внутренний портал для сотрудников\r\n- Админ-панель\r\n\r\nКаждым порталом пользуется свой сегмент пользователей. Клиенты компании ожидают простой и понятный интерфейс. В то время как саппорт-инженеры привыкли к определенным сценариям, которые тоже нужно было сохранить.\r\n\r\n# Клиентский портал\r\n\r\nНа этот ресурс были задействованы основные силы. Клиентский портал даёт возможность клиентам задавать вопросы технического характера и получать на них ответы. \r\n\r\nПеред редизайном ставились следующие задачи:\r\n\r\n- **Снизить нагрузку на саппорт-инженеров.** Помочь пользователям находить ответы самостоятельно, если на вопрос уже отвечали ранее или решение описано в документации.\r\n- **Улучшить UX.** Накопился список проблем, которые нужно было решать:\r\n    - **Пользователи выбирают неверный продукт при создании вопроса.** DevExpress разрабатывает и поддерживает десятки продуктов. У каждого продукта могут быть разные платформы и версии. Иногда важно знать, какая ОС установлена у пользователя, каким IDE он пользуется. Нужно было сделать так, чтобы у пользователя не возникали проблемы при выборе нужных значений. Помочь ему на этом пути.\r\n    - **Возникают проблемы при форматировании текста.** Пользователи приходят в поддержку с техническими проблемами. Описание проблемы содержит куски кода или целые архивы с проектами. В старой версии сайта пользователи путались в текстовом редакторе и отправляли не отформатированные куски куда, которые сливались с обычным текстом. Также, пользователи не всегда понимали как аттачить файлы. Всё это приводило к дополнительной нагрузке на саппорт-инженеров.\r\n    - **Пользователи не замечают уведомления об ответах в их тикете.** Проблема касалась как веб-интерфейса, так и уведомлений приходящих пользователю на почту. Пользователи либо не замечали уведомления, либо не понимали к чему они относятся, либо ранее отключали уведомления и забывали об этом. В связи с этим, среднее время на решение таких тикетов значительно увеличивалось.\r\n    - **Клиенты из одной и той же компании не видят вопросы друг друга.** Большинство клиентов предпочитает оставлять свои вопросы приватно. Чтобы их могли видеть только саппорт-инженеры. Из-за этого возникала проблема, что вопросы становились приватными полностью и их не могли видеть даже сотрудники одной и той же компании с разных аккаунтов.\r\n    - **Неудобные фильтры.** Пользователи, что на странице со списком публичных тикетов невозможно ничего найти. Фильтров мало, а то, что есть не всегда работает очевидным образом.\r\n- **Переосмыслить встроенный инструмент “Version History”.**\r\n- **Улучшить аналитику.**\r\n- **Освежить внешний вид.**\r\n\r\n## Подготовка к работе\r\n\r\nПеред началом работы над редизайном была проведена подготовительная работы. Подготовлен общий план работы и проведены встречи со всеми заинтересованными лицами. Был подготовлен итоговый бриф проекта. \r\n\r\nЧасть работ, которые были проведены на этом этапе:\r\n\r\n- **Анализ текущего дизайна.** UX-тестирование текущего сайта, поиск проблем.\r\n- **Ресёрч конкурентов.** Изучение как прямых конкурентов, так и решений крупных платформ. Например, Zendesk, Freshdesk, Zoho Desk.\r\n- **Сбор и анализ существующего фидбека.** За годы работы, накопилось большое количество тикетов, комментарием и другой обратной связи касаемо работы портала. Была проведена большая работу по сбору всей это информации в один документ, её анализу и приоритизации.\r\n- **Сбор информации от саппорт-инженеров.** Инженеры поддержки активнее всего общаются с пользователями и знают детали и проблемы, которые могут быть неизвестны и неочевидны другим членам команды.\r\n- **Изучение текущих данных аналитики и список того, что хотим собирать ещё в новом дизайне.** Для работы с данными использовались:  Google Analytics (+Google Tag Manager), Matomo, внутренние инструменты.\r\n- **Сбор требований от заказчиков и всех заинтересованных лиц.**\r\n- **Подготовка брифа.** Описание проблем, целей и задач. Развёрнутый ответ на вопрос, что мы будем считать успешным редизайном.\r\n\r\n## Процесс\r\n\r\nРабота над сайтом строилась 2-4 недельными спринтами. В конце каждого спринта проводились синхронизационные встречи с заказчиками. \r\n\r\nВ начале работы над дизайном была согласована общая концепция. Отрисованы низко детализированные прототипы с решением основных UX проблем. Найден общий подход к внешнему виду.  \r\n\r\nЧтобы работа над новым дизайном была эффективной и обратная связь поступала как можно быстрее был принят рад мер:\r\n\r\n- Продукт менеджер продукта показывал прототипы и просто картинки небольшой выборке самых активных и заинтересованных пользователей саппорт-центра. Благодаря этому получалось очень быстро собрать много полезной информации, которая помогала намного быстрее замечать точки роста.\r\n- Тесное общение с разработчиками. Так дизайн значительно обгонял разработку, нужно было сразу учитывать технические ограничения. Для этого проводились постоянные встречи между разработчикам, заказчиками и дизайнером. Так мы оценивали техническую сложность каждой фичи и на основе этого принимали решение, будем мы брать её в работу или нет.\r\n- На этапе, когда появилась первая работающая версия сайта, его стали тестировать сотрудники. В первую очередь, к тестированию подключались саппорт-инженеры. На этом этапе было собрано большое количество фидбека как по техническим багам, визуальным багам, так и просто по неудачным UX-решениям.\r\n- На следующем этапе снова к фидбеку снова были подключены активные клиенты. Которые были готовы дать развёрнутый фидбек.\r\n- На одном из финальных этапов сайт стал доступен для всех пользователей, но в виде бета-версии. При этом, каждый пользователь мог вернуться к старой версии сайта. Со временем, пользователей вернувшихся на старый сайт становилось меньше. Также, мы старались собирать фидбек от таких пользователей. Чтобы понять, почему они вернулись на старую версию сайта.\r\n- К новой версии сайта была прикручена продвинутая аналитика.\r\n\r\n## Примеры реализации\r\n\r\n### Релевантные подсказки при создании тикета\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/sc-2.png\" srcset=\"/images/blog/1x/sc-2.png 1x, /images/blog/2x/sc-2@2x.png 2x\" class=\"img-fluid\">\r\n\r\n### Упрощена навигация по дискуссии с ветвистой иерархией\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/sc-3.png\" srcset=\"/images/blog/1x/sc-3.png 1x, /images/blog/2x/sc-3@2x.png 2x\" class=\"img-fluid\">\r\n\r\n### Обновлены инструменты фильтра на странице со списком тикетов\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/sc-4.png\" srcset=\"/images/blog/1x/sc-4.png 1x, /images/blog/2x/sc-4@2x.png 2x\" class=\"img-fluid\">\r\n\r\n### Сделана мобильная версия под разные размеры\r\n\r\n# Внутренний портал и админ-панель\r\n\r\nОтдельной крупной задачей была необходимость сделать внутренний портал для сотрудников. Главным вызовом было задача учесть флоу саппорт-инженеров из разных команд. Ингода оно сильно отличалось и нужно было найти решения, которые устроят всех.\r\n\r\nДля этого проводилось множество сложных встреч с саппорт-инженерами из разных команд и топ-саппортом. По каким-то сценариям приходилось идти на компромиссы, по каким-то — выбирать один вариант и убеждать в правильности этого варианта остальных.\r\n\r\nВ результате, судя по опросам и личным разговорам, большая часть сотрудников осталась довольна новой системой.\r\n\r\nТакже, для более гибкой работы и настройки системы под текущие нужды бизнеса была спроектирована админ-панель, где можно точечно настроить различные параметры системы.\r\n\r\nТак как решения внутренние, вдаваться в подробности и показывать скриншоты я не могу.  \r\n\r\n# Результаты\r\n\r\nВ итоге, полный переход на новую версию получился безболезненным. На каждой итерации выявлялись проблемные места и не учтённые сценарий. Большая часть из них решалась, от небольшой части осознанно отказывались.\r\n\r\nСтарая версия сайта постепенно была отключена, когда количество её пользователей стало совсем небольшим.\r\n\r\nОбщая оценка редизайна была оценена как успешная. Как со стороны клиентов, так и со стороны сотрудников. Поставленные перед редизайном цели были достигнуты:\r\n\r\n- **Уменьшилась нагрузка на саппорт-инженеров.**\r\n    - Пользователи стали чаще находить решения самостоятельно: улучшен движок поиска, предлагаются релевантные ссылки при создании тикета, улучшена фильтрация.\r\n    - Пользователи стали реже ошибаться с выбором платформы/продукта и других деталей при создании тикета.\r\n    - Во внутреннем портале появились инструменты, помогающие саппорт-инженерам быстрее отвечать на тикеты, ответ на которые уже давался ранее.\r\n- **Не отформатированные тикеты появляются гораздо реже.** Решилась проблема с тем, что пользователи не понимали, как отправлять аттачи.\r\n- **Уменьшилось количество проблем, когда пользователи не получают уведомления вовремя.**\r\n    - В настройках уведомлений появился отдельный чекбокс, для получения уведомлений от саппорт-центра (раньше был единый чекбокс, для всех почтовых рассылок).\r\n    - Даже если пользователь отключил уведомления от таких рассылок, то саппорт-инженер будет об этом знать. И, если у пользователя возникают с этим проблемы, подсказать варианты решения.\r\n    - Сами почтовые уведомления стали понятнее, появилась возможность подключить браузерные уведомления.\r\n    - Появилась возможность подписать на рассылку на любой тикет со страницы этого тикета.\r\n- **Более точечно настроена аналитика.**\r\n    - Саппорт-инженер теперь может видеть карточку пользователя с историей посещений тикетов и документов в документации. Так инженер поддержки сразу может понять, какие ссылки есть смысл советовать, а какие — нет, так как пользователь их уже посещал.\r\n    - Добавлены ивенты на целевые действия.\r\n    - Созданный внутренние дашборды с анализом различных данных, необходимых для оценки поступаемого  количества тикетов и оценки эффективности саппорта.\r\n- **Поиск по тикетам стал гибче и проще.**\r\n    - Были докручены мета-теги, чтобы тикеты лучше искались поисковиками.\r\n    - Переосмыслены фильтры, добавлены готовые пресеты и возможность подписаться на созданный фильтр.\r\n    - Оптимизирована внутренняя страница поиска.\r\n- **Сделана мобильная версия клиентского портала.**', `Summary`='', `FormatterID`='neasden', `OriginalAlias`='support-center', `Uploads`='a:6:{i:0;s:24:\"/images/blog/1x/sc-1.png\";i:1;s:15:\"empty-image.jpg\";i:2;s:24:\"/images/blog/1x/sc-2.png\";i:3;s:24:\"/images/blog/1x/sc-3.png\";i:4;s:24:\"/images/blog/1x/sc-4.png\";i:5;s:24:\"/images/blog/1x/sc-5.png\";}', `IsPublished`='1', `IsCommentable`='0', `IsVisible`='1', `IsFavourite`='1', `Stamp`='1711383800', `LastModified`='1712003930', `Offset`='14400', `IsDST`='0', `IsIndexed`='0', `IsExternal`='0', `ReadCount`='4', `SourceID`='0', `SourceNoteID`='0', `SourceNoteURL`='', `SourceNoteJSONURL`='', `SourceNoteData`='' WHERE `SubsetID`=1 AND (`ID`=1);

UPDATE `e2BlogNotes` SET `SubsetID`='1', `Title`='Support Center', `Text`='Система поддержки пользователей. Включает различные информационные ресурсы: вопросы от пользователей, статьи в базе знаний и истории версий.\r\n\r\nЕжедневно в Support Center создаются сотни новых вопросов и на них отвечают десятки саппорт-инженеров. За годы работы старый интерфейс устарел как внешне, так и с точки зрения удобства и функциональности. Пришла задача полностью переработать платформу, с учётом всех бизнес-требований.\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/sc-1.png\" srcset=\"/images/blog/1x/sc-1.png 1x, /images/blog/2x/sc-1@2x.png 2x\" class=\"img-fluid\">\r\n\r\n# Вводная\r\n\r\nСистема состоит из трёх основных порталов:\r\n\r\n- Клиентский портал\r\n- Внутренний портал для сотрудников\r\n- Админ-панель\r\n\r\nКаждым порталом пользуется свой сегмент пользователей. Клиенты компании ожидают простой и понятный интерфейс. В то время как саппорт-инженеры привыкли к определенным сценариям, которые тоже нужно было сохранить.\r\n\r\n# Клиентский портал\r\n\r\nНа этот ресурс были задействованы основные силы. Клиентский портал даёт возможность клиентам задавать вопросы технического характера и получать на них ответы. \r\n\r\nПеред редизайном ставились следующие задачи:\r\n\r\n- **Снизить нагрузку на саппорт-инженеров.** Помочь пользователям находить ответы самостоятельно, если на вопрос уже отвечали ранее или решение описано в документации.\r\n- **Улучшить UX.** Накопился список проблем, которые нужно было решать:\r\n    - **Пользователи выбирают неверный продукт при создании вопроса.** DevExpress разрабатывает и поддерживает десятки продуктов. У каждого продукта могут быть разные платформы и версии. Иногда важно знать, какая ОС установлена у пользователя, каким IDE он пользуется. Нужно было сделать так, чтобы у пользователя не возникали проблемы при выборе нужных значений. Помочь ему на этом пути.\r\n    - **Возникают проблемы при форматировании текста.** Пользователи приходят в поддержку с техническими проблемами. Описание проблемы содержит куски кода или целые архивы с проектами. В старой версии сайта пользователи путались в текстовом редакторе и отправляли не отформатированные куски куда, которые сливались с обычным текстом. Также, пользователи не всегда понимали как аттачить файлы. Всё это приводило к дополнительной нагрузке на саппорт-инженеров.\r\n    - **Пользователи не замечают уведомления об ответах в их тикете.** Проблема касалась как веб-интерфейса, так и уведомлений приходящих пользователю на почту. Пользователи либо не замечали уведомления, либо не понимали к чему они относятся, либо ранее отключали уведомления и забывали об этом. В связи с этим, среднее время на решение таких тикетов значительно увеличивалось.\r\n    - **Клиенты из одной и той же компании не видят вопросы друг друга.** Большинство клиентов предпочитает оставлять свои вопросы приватно. Чтобы их могли видеть только саппорт-инженеры. Из-за этого возникала проблема, что вопросы становились приватными полностью и их не могли видеть даже сотрудники одной и той же компании с разных аккаунтов.\r\n    - **Неудобные фильтры.** Пользователи, что на странице со списком публичных тикетов невозможно ничего найти. Фильтров мало, а то, что есть не всегда работает очевидным образом.\r\n- **Переосмыслить встроенный инструмент “Version History”.**\r\n- **Улучшить аналитику.**\r\n- **Освежить внешний вид.**\r\n\r\n## Подготовка к работе\r\n\r\nПеред началом работы над редизайном была проведена подготовительная работы. Подготовлен общий план работы и проведены встречи со всеми заинтересованными лицами. Был подготовлен итоговый бриф проекта. \r\n\r\nЧасть работ, которые были проведены на этом этапе:\r\n\r\n- **Анализ текущего дизайна.** UX-тестирование текущего сайта, поиск проблем.\r\n- **Ресёрч конкурентов.** Изучение как прямых конкурентов, так и решений крупных платформ. Например, Zendesk, Freshdesk, Zoho Desk.\r\n- **Сбор и анализ существующего фидбека.** За годы работы, накопилось большое количество тикетов, комментарием и другой обратной связи касаемо работы портала. Была проведена большая работу по сбору всей это информации в один документ, её анализу и приоритизации.\r\n- **Сбор информации от саппорт-инженеров.** Инженеры поддержки активнее всего общаются с пользователями и знают детали и проблемы, которые могут быть неизвестны и неочевидны другим членам команды.\r\n- **Изучение текущих данных аналитики и список того, что хотим собирать ещё в новом дизайне.** Для работы с данными использовались:  Google Analytics (+Google Tag Manager), Matomo, внутренние инструменты.\r\n- **Сбор требований от заказчиков и всех заинтересованных лиц.**\r\n- **Подготовка брифа.** Описание проблем, целей и задач. Развёрнутый ответ на вопрос, что мы будем считать успешным редизайном.\r\n\r\n## Процесс\r\n\r\nРабота над сайтом строилась 2-4 недельными спринтами. В конце каждого спринта проводились синхронизационные встречи с заказчиками. \r\n\r\nВ начале работы над дизайном была согласована общая концепция. Отрисованы низко детализированные прототипы с решением основных UX проблем. Найден общий подход к внешнему виду.  \r\n\r\nЧтобы работа над новым дизайном была эффективной и обратная связь поступала как можно быстрее был принят рад мер:\r\n\r\n- Продукт менеджер продукта показывал прототипы и просто картинки небольшой выборке самых активных и заинтересованных пользователей саппорт-центра. Благодаря этому получалось очень быстро собрать много полезной информации, которая помогала намного быстрее замечать точки роста.\r\n- Тесное общение с разработчиками. Так дизайн значительно обгонял разработку, нужно было сразу учитывать технические ограничения. Для этого проводились постоянные встречи между разработчикам, заказчиками и дизайнером. Так мы оценивали техническую сложность каждой фичи и на основе этого принимали решение, будем мы брать её в работу или нет.\r\n- На этапе, когда появилась первая работающая версия сайта, его стали тестировать сотрудники. В первую очередь, к тестированию подключались саппорт-инженеры. На этом этапе было собрано большое количество фидбека как по техническим багам, визуальным багам, так и просто по неудачным UX-решениям.\r\n- На следующем этапе снова к фидбеку снова были подключены активные клиенты. Которые были готовы дать развёрнутый фидбек.\r\n- На одном из финальных этапов сайт стал доступен для всех пользователей, но в виде бета-версии. При этом, каждый пользователь мог вернуться к старой версии сайта. Со временем, пользователей вернувшихся на старый сайт становилось меньше. Также, мы старались собирать фидбек от таких пользователей. Чтобы понять, почему они вернулись на старую версию сайта.\r\n- К новой версии сайта была прикручена продвинутая аналитика.\r\n\r\n## Примеры реализации\r\n\r\n### Релевантные подсказки при создании тикета\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/sc-2.png\" srcset=\"/images/blog/1x/sc-2.png 1x, /images/blog/2x/sc-2@2x.png 2x\" class=\"img-fluid\">\r\n\r\n### Упрощена навигация по дискуссии с ветвистой иерархией\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/sc-3.png\" srcset=\"/images/blog/1x/sc-3.png 1x, /images/blog/2x/sc-3@2x.png 2x\" class=\"img-fluid\">\r\n\r\n### Обновлены инструменты фильтра на странице со списком тикетов\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/sc-4.png\" srcset=\"/images/blog/1x/sc-4.png 1x, /images/blog/2x/sc-4@2x.png 2x\" class=\"img-fluid\">\r\n\r\n### Сделана мобильная версия под разные размеры\r\n\r\n# Внутренний портал и админ-панель\r\n\r\nОтдельной крупной задачей была необходимость сделать внутренний портал для сотрудников. Главным вызовом было задача учесть флоу саппорт-инженеров из разных команд. Ингода оно сильно отличалось и нужно было найти решения, которые устроят всех.\r\n\r\nДля этого проводилось множество сложных встреч с саппорт-инженерами из разных команд и топ-саппортом. По каким-то сценариям приходилось идти на компромиссы, по каким-то — выбирать один вариант и убеждать в правильности этого варианта остальных.\r\n\r\nВ результате, судя по опросам и личным разговорам, большая часть сотрудников осталась довольна новой системой.\r\n\r\nТакже, для более гибкой работы и настройки системы под текущие нужды бизнеса была спроектирована админ-панель, где можно точечно настроить различные параметры системы.\r\n\r\nТак как решения внутренние, вдаваться в подробности и показывать скриншоты я не могу.  \r\n\r\n# Результаты\r\n\r\nВ итоге, полный переход на новую версию получился безболезненным. На каждой итерации выявлялись проблемные места и не учтённые сценарий. Большая часть из них решалась, от небольшой части осознанно отказывались.\r\n\r\nСтарая версия сайта постепенно была отключена, когда количество её пользователей стало совсем небольшим.\r\n\r\nОбщая оценка редизайна была оценена как успешная. Как со стороны клиентов, так и со стороны сотрудников. Поставленные перед редизайном цели были достигнуты:\r\n\r\n- **Уменьшилась нагрузка на саппорт-инженеров.**\r\n    - Пользователи стали чаще находить решения самостоятельно: улучшен движок поиска, предлагаются релевантные ссылки при создании тикета, улучшена фильтрация.\r\n    - Пользователи стали реже ошибаться с выбором платформы/продукта и других деталей при создании тикета.\r\n    - Во внутреннем портале появились инструменты, помогающие саппорт-инженерам быстрее отвечать на тикеты, ответ на которые уже давался ранее.\r\n- **Не отформатированные тикеты появляются гораздо реже.** Решилась проблема с тем, что пользователи не понимали, как отправлять аттачи.\r\n- **Уменьшилось количество проблем, когда пользователи не получают уведомления вовремя.**\r\n    - В настройках уведомлений появился отдельный чекбокс, для получения уведомлений от саппорт-центра (раньше был единый чекбокс, для всех почтовых рассылок).\r\n    - Даже если пользователь отключил уведомления от таких рассылок, то саппорт-инженер будет об этом знать. И, если у пользователя возникают с этим проблемы, подсказать варианты решения.\r\n    - Сами почтовые уведомления стали понятнее, появилась возможность подключить браузерные уведомления.\r\n    - Появилась возможность подписать на рассылку на любой тикет со страницы этого тикета.\r\n- **Более точечно настроена аналитика.**\r\n    - Саппорт-инженер теперь может видеть карточку пользователя с историей посещений тикетов и документов в документации. Так инженер поддержки сразу может понять, какие ссылки есть смысл советовать, а какие — нет, так как пользователь их уже посещал.\r\n    - Добавлены ивенты на целевые действия.\r\n    - Созданный внутренние дашборды с анализом различных данных, необходимых для оценки поступаемого  количества тикетов и оценки эффективности саппорта.\r\n- **Поиск по тикетам стал гибче и проще.**\r\n    - Были докручены мета-теги, чтобы тикеты лучше искались поисковиками.\r\n    - Переосмыслены фильтры, добавлены готовые пресеты и возможность подписаться на созданный фильтр.\r\n    - Оптимизирована внутренняя страница поиска.\r\n- **Сделана мобильная версия клиентского портала.**', `Summary`='', `FormatterID`='neasden', `OriginalAlias`='support-center', `Uploads`='a:6:{i:0;s:24:\"/images/blog/1x/sc-1.png\";i:1;s:15:\"empty-image.jpg\";i:2;s:24:\"/images/blog/1x/sc-2.png\";i:3;s:24:\"/images/blog/1x/sc-3.png\";i:4;s:24:\"/images/blog/1x/sc-4.png\";i:5;s:24:\"/images/blog/1x/sc-5.png\";}', `IsPublished`='1', `IsCommentable`='0', `IsVisible`='1', `IsFavourite`='1', `Stamp`='1711383800', `LastModified`='1712003930', `Offset`='14400', `IsDST`='0', `IsIndexed`='1', `IsExternal`='0', `ReadCount`='4', `SourceID`='0', `SourceNoteID`='0', `SourceNoteURL`='', `SourceNoteJSONURL`='', `SourceNoteData`='' WHERE `SubsetID`=1 AND (`ID`=1);

UPDATE `e2BlogNotes` SET `SubsetID`='1', `Title`='Cloud4RPi', `Text`='Cloud4RPi — это платформа для интернета вещей (IoT), предлагает разработчикам инструменты для быстрого создания и управления IoT устройствами. Поддерживает множество аппаратных платформ, включая Arduino, Raspberry Pi, ESP8266, ESP32 и другие.\r\n\r\nВ рамках работы на проект был разработан интерфейс и сценарии работы с панелью управления IoT девайсами. \r\n\r\n# Лендинг страница\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/cloud4rpi-1.png\" srcset=\"/images/blog/1x/cloud4rpi-1.png 1x, /images/blog/2x/cloud4rpi-1@2x.png 2x\" class=\"img-fluid\">\r\n\r\n# Панель управления\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/cloud4rpi-2.png\" srcset=\"/images/blog/1x/cloud4rpi-2.png 1x, /images/blog/2x/cloud4rpi-2@2x.png 2x\" class=\"img-fluid\">\r\n\r\n# Визард добавления девайса\r\n\r\n## Выбор модели\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/cloud4rpi-3.png\" srcset=\"/images/blog/1x/cloud4rpi-3.png 1x, /images/blog/2x/cloud4rpi-3@2x.png 2x\" class=\"img-fluid\">\r\n\r\n## Инструкции\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/cloud4rpi-4.png\" srcset=\"/images/blog/1x/cloud4rpi-4.png 1x, /images/blog/2x/cloud4rpi-4@2x.png 2x\" class=\"img-fluid\">\r\n\r\n## Устройство добавлено\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/cloud4rpi-5.png\" srcset=\"/images/blog/1x/cloud4rpi-5.png 1x, /images/blog/2x/cloud4rpi-5@2x.png 2x\" class=\"img-fluid\">\r\n\r\n# Управление подпиской\r\n\r\n## Настройка пакетов\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/cloud4rpi-6.png\" srcset=\"/images/blog/1x/cloud4rpi-6.png 1x, /images/blog/2x/cloud4rpi-6@2x.png 2x\" class=\"img-fluid\">\r\n\r\n## Покупка дополнительных пакетов\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/cloud4rpi-7.png\" srcset=\"/images/blog/1x/cloud4rpi-7.png 1x, /images/blog/2x/cloud4rpi-7@2x.png 2x\" class=\"img-fluid\">', `Summary`='', `FormatterID`='neasden', `OriginalAlias`='cloud4rpi', `Uploads`='a:8:{i:0;s:31:\"/images/blog/1x/cloud4rpi-1.png\";i:1;s:15:\"empty-image.jpg\";i:2;s:31:\"/images/blog/1x/cloud4rpi-2.png\";i:5;s:31:\"/images/blog/1x/cloud4rpi-3.png\";i:6;s:31:\"/images/blog/1x/cloud4rpi-4.png\";i:7;s:31:\"/images/blog/1x/cloud4rpi-5.png\";i:8;s:31:\"/images/blog/1x/cloud4rpi-6.png\";i:9;s:31:\"/images/blog/1x/cloud4rpi-7.png\";}', `IsPublished`='1', `IsCommentable`='0', `IsVisible`='1', `IsFavourite`='0', `Stamp`='1711383857', `LastModified`='1711918099', `Offset`='14400', `IsDST`='0', `IsIndexed`='1', `IsExternal`='0', `ReadCount`='4', `SourceID`='0', `SourceNoteID`='0', `SourceNoteURL`='', `SourceNoteJSONURL`='', `SourceNoteData`='' WHERE `SubsetID`=1 AND (`ID`=2);

UPDATE `e2BlogAliases` SET `EntityType`='n', `EntityID`='2', `Alias`='cloud4rpi', `Stamp`='1712004035' WHERE `SubsetID`=1 AND (`ID`=2);

UPDATE `e2BlogNotes` SET `SubsetID`='1', `Title`='Cloud4RPi', `Text`='Cloud4RPi — это платформа для интернета вещей (IoT), предлагает разработчикам инструменты для быстрого создания и управления IoT устройствами. Поддерживает множество аппаратных платформ, включая Arduino, Raspberry Pi, ESP8266, ESP32 и другие.\r\n\r\nВ рамках работы над проектом был разработан интерфейс и сценарии работы с панелью управления IoT девайсами. \r\n\r\n# Лендинг страница\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/cloud4rpi-1.png\" srcset=\"/images/blog/1x/cloud4rpi-1.png 1x, /images/blog/2x/cloud4rpi-1@2x.png 2x\" class=\"img-fluid\">\r\n\r\n# Панель управления\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/cloud4rpi-2.png\" srcset=\"/images/blog/1x/cloud4rpi-2.png 1x, /images/blog/2x/cloud4rpi-2@2x.png 2x\" class=\"img-fluid\">\r\n\r\n# Визард добавления девайса\r\n\r\n## Выбор модели\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/cloud4rpi-3.png\" srcset=\"/images/blog/1x/cloud4rpi-3.png 1x, /images/blog/2x/cloud4rpi-3@2x.png 2x\" class=\"img-fluid\">\r\n\r\n## Инструкции\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/cloud4rpi-4.png\" srcset=\"/images/blog/1x/cloud4rpi-4.png 1x, /images/blog/2x/cloud4rpi-4@2x.png 2x\" class=\"img-fluid\">\r\n\r\n## Устройство добавлено\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/cloud4rpi-5.png\" srcset=\"/images/blog/1x/cloud4rpi-5.png 1x, /images/blog/2x/cloud4rpi-5@2x.png 2x\" class=\"img-fluid\">\r\n\r\n# Управление подпиской\r\n\r\n## Настройка пакетов\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/cloud4rpi-6.png\" srcset=\"/images/blog/1x/cloud4rpi-6.png 1x, /images/blog/2x/cloud4rpi-6@2x.png 2x\" class=\"img-fluid\">\r\n\r\n## Покупка дополнительных пакетов\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/cloud4rpi-7.png\" srcset=\"/images/blog/1x/cloud4rpi-7.png 1x, /images/blog/2x/cloud4rpi-7@2x.png 2x\" class=\"img-fluid\">', `Summary`='', `FormatterID`='neasden', `OriginalAlias`='cloud4rpi', `Uploads`='a:8:{i:0;s:31:\"/images/blog/1x/cloud4rpi-1.png\";i:1;s:15:\"empty-image.jpg\";i:2;s:31:\"/images/blog/1x/cloud4rpi-2.png\";i:5;s:31:\"/images/blog/1x/cloud4rpi-3.png\";i:6;s:31:\"/images/blog/1x/cloud4rpi-4.png\";i:7;s:31:\"/images/blog/1x/cloud4rpi-5.png\";i:8;s:31:\"/images/blog/1x/cloud4rpi-6.png\";i:9;s:31:\"/images/blog/1x/cloud4rpi-7.png\";}', `IsPublished`='1', `IsCommentable`='0', `IsVisible`='1', `IsFavourite`='0', `Stamp`='1711383857', `LastModified`='1712004035', `Offset`='14400', `IsDST`='0', `IsIndexed`='0', `IsExternal`='0', `ReadCount`='4', `SourceID`='0', `SourceNoteID`='0', `SourceNoteURL`='', `SourceNoteJSONURL`='', `SourceNoteData`='' WHERE `SubsetID`=1 AND (`ID`=2);

UPDATE `e2BlogNotes` SET `SubsetID`='1', `Title`='Cloud4RPi', `Text`='Cloud4RPi — это платформа для интернета вещей (IoT), предлагает разработчикам инструменты для быстрого создания и управления IoT устройствами. Поддерживает множество аппаратных платформ, включая Arduino, Raspberry Pi, ESP8266, ESP32 и другие.\r\n\r\nВ рамках работы над проектом был разработан интерфейс и сценарии работы с панелью управления IoT девайсами. \r\n\r\n# Лендинг страница\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/cloud4rpi-1.png\" srcset=\"/images/blog/1x/cloud4rpi-1.png 1x, /images/blog/2x/cloud4rpi-1@2x.png 2x\" class=\"img-fluid\">\r\n\r\n# Панель управления\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/cloud4rpi-2.png\" srcset=\"/images/blog/1x/cloud4rpi-2.png 1x, /images/blog/2x/cloud4rpi-2@2x.png 2x\" class=\"img-fluid\">\r\n\r\n# Визард добавления девайса\r\n\r\n## Выбор модели\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/cloud4rpi-3.png\" srcset=\"/images/blog/1x/cloud4rpi-3.png 1x, /images/blog/2x/cloud4rpi-3@2x.png 2x\" class=\"img-fluid\">\r\n\r\n## Инструкции\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/cloud4rpi-4.png\" srcset=\"/images/blog/1x/cloud4rpi-4.png 1x, /images/blog/2x/cloud4rpi-4@2x.png 2x\" class=\"img-fluid\">\r\n\r\n## Устройство добавлено\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/cloud4rpi-5.png\" srcset=\"/images/blog/1x/cloud4rpi-5.png 1x, /images/blog/2x/cloud4rpi-5@2x.png 2x\" class=\"img-fluid\">\r\n\r\n# Управление подпиской\r\n\r\n## Настройка пакетов\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/cloud4rpi-6.png\" srcset=\"/images/blog/1x/cloud4rpi-6.png 1x, /images/blog/2x/cloud4rpi-6@2x.png 2x\" class=\"img-fluid\">\r\n\r\n## Покупка дополнительных пакетов\r\n\r\nempty-image.jpg\r\n<img src=\"/images/blog/1x/cloud4rpi-7.png\" srcset=\"/images/blog/1x/cloud4rpi-7.png 1x, /images/blog/2x/cloud4rpi-7@2x.png 2x\" class=\"img-fluid\">', `Summary`='', `FormatterID`='neasden', `OriginalAlias`='cloud4rpi', `Uploads`='a:8:{i:0;s:31:\"/images/blog/1x/cloud4rpi-1.png\";i:1;s:15:\"empty-image.jpg\";i:2;s:31:\"/images/blog/1x/cloud4rpi-2.png\";i:5;s:31:\"/images/blog/1x/cloud4rpi-3.png\";i:6;s:31:\"/images/blog/1x/cloud4rpi-4.png\";i:7;s:31:\"/images/blog/1x/cloud4rpi-5.png\";i:8;s:31:\"/images/blog/1x/cloud4rpi-6.png\";i:9;s:31:\"/images/blog/1x/cloud4rpi-7.png\";}', `IsPublished`='1', `IsCommentable`='0', `IsVisible`='1', `IsFavourite`='0', `Stamp`='1711383857', `LastModified`='1712004035', `Offset`='14400', `IsDST`='0', `IsIndexed`='1', `IsExternal`='0', `ReadCount`='4', `SourceID`='0', `SourceNoteID`='0', `SourceNoteURL`='', `SourceNoteJSONURL`='', `SourceNoteData`='' WHERE `SubsetID`=1 AND (`ID`=2);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1712041200', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1709450845);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 2;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '2', '1712041200', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1709451740);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1712041200', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1709451742);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 1;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '1', '1712048400', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1709456555);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 6;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '6', '1712048400', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1709456567);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1712062800', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1709471082);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 1;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '1', '1712062800', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1709471088);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 4;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '4', '1712062800', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1709471093);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 6;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '6', '1712062800', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1709471115);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 3;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '3', '1712062800', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1709471127);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1712131200', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1709539203);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 1;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '1', '1712224800', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1709633545);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1712224800', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1709633617);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 4;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '4', '1712224800', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1709633755);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 2;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '2', '1712224800', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1709633779);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 1;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '1', '1712610000', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1710020474);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1712653200', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1710062840);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 3;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '3', '1712653200', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1710064407);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 4;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '4', '1712653200', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1710064438);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 6;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '6', '1712653200', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1710064454);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1712653200', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1710064474);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 2;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '2', '1712674800', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1710083437);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 1;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '1', '1712732400', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1710141481);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 6;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '6', '1712757600', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1710168806);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 2;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '2', '1712757600', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1710168820);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 3;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '3', '1712757600', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1710168839);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 1;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '1', '1712757600', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1710168839);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 4;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '4', '1712757600', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1710168847);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 1;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '1', '1712757600', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1710168861);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1712757600', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1710168872);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1712782800', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1710194209);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 1;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '1', '1712786400', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1710194433);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 4;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '4', '1712786400', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1710194434);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 2;

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 6;

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 3;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '2', '1712786400', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '6', '1712786400', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '3', '1712786400', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1710194435);

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1710194435);

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1710194435);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1712815200', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1710226544);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1712815200', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1710226562);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 1;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '1', '1712833200', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1710241322);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1712898000', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1710307235);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 1;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '1', '1712898000', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1710307244);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1712919600', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1710329473);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 1;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '1', '1712919600', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1710329485);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1712962800', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1710374271);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 1;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '1', '1712970000', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1710379545);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1713009600', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1710419714);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1713160800', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1710570843);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 1;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '1', '1713160800', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1710570943);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 1;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '1', '1713348000', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1710756019);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1713348000', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1710756034);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1713351600', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1710760508);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 1;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '1', '1713351600', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1710760522);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 4;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '4', '1713351600', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1710760542);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 6;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '6', '1713351600', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1710760550);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 3;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '3', '1713351600', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1710760659);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 2;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '2', '1713351600', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1710760670);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 1;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '1', '1713380400', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1710789413);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 6;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '6', '1713380400', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1710789438);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1713452400', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1710862991);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 6;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '6', '1713531600', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1710940503);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 1;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '1', '1713531600', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1710940812);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1713531600', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1710940819);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 2;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '2', '1713816000', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1711226163);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 1;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '1', '1713816000', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1711226407);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1713816000', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1711226420);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 4;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '4', '1713981600', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1711391891);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 4;

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 1;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '1', '1714028400', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '4', '1714028400', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1711439329);

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1711439329);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 6;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '6', '1714028400', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1711439332);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 3;

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 2;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '2', '1714028400', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '3', '1714028400', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1711439333);

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1711439333);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1714064400', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1711472981);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1714384800', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1711794013);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 1;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '1', '1715166000', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1712577171);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 6;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '6', '1715166000', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1712577286);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 2;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '2', '1715166000', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1712577302);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 3;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '3', '1715166000', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1712577315);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1715166000', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1712577323);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1716688800', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1714100278);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1716714000', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1714122391);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 4;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '4', '1717282800', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1714694016);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 1;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '1', '1717282800', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1714694072);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1717675200', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1715085509);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 1;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '1', '1717675200', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1715085772);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 4;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '4', '1717675200', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1715086199);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 2;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '2', '1717675200', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1715086335);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 3;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '3', '1717934400', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1715345294);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 6;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '6', '1718035200', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1715446040);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 3;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '3', '1718085600', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1715496765);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1718146800', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1715558101);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 1;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '1', '1718175600', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1715585015);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1718190000', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1715598316);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 4;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '4', '1718283600', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1715693482);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 1;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '1', '1718283600', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1715693516);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 2;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '2', '1718283600', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1715693567);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 1;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '1', '1718370000', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1715779752);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 1;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '1', '1718478000', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1715887013);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 1;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '1', '1718542800', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1715954387);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 6;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '6', '1718568000', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1715979172);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 3;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '3', '1718650800', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1716061837);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 1;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '1', '1718758800', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1716169738);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1718798400', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1716207234);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 1;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '1', '1719586800', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1716996738);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 1;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '1', '1719687600', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1717097683);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 1;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '1', '1719802800', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1717213391);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 3;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '3', '1719928800', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1717338701);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1719954000', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1717364832);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 3;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '3', '1719954000', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1717365018);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 1;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '1', '1719954000', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1717365032);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 6;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '6', '1719954000', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1717365317);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 1;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '1', '1719982800', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1717392330);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 1;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '1', '1720108800', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1717518175);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1720720800', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1718131415);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 2;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '2', '1720792800', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1718204303);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 4;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '4', '1720792800', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1718204365);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 6;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '6', '1720983600', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1718391639);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 6;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '6', '1721127600', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1718537871);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 4;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '4', '1721275200', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1718685021);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 6;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '6', '1721275200', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1718685041);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 2;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '2', '1721275200', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1718685058);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 1;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '1', '1721350800', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1718762280);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1721397600', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1718807200);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1721656800', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1719068125);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 3;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '3', '1721797200', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1719208295);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 1;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '1', '1722114000', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1719523311);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 3;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '3', '1722308400', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1719718986);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1722326400', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1719735568);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 4;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '4', '1722330000', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1719740555);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 6;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '6', '1722330000', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1719740605);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 3;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '3', '1722330000', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1719740675);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1722330000', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1719740691);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 1;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '1', '1722330000', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1719740886);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 4;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '4', '1722434400', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1719845036);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 4;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '4', '1722466800', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1719878061);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 6;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '6', '1722470400', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1719879813);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 6;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '6', '1722477600', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1719888053);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 1;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '1', '1722614400', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1720024000);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 1;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '1', '1722643200', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1720052131);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 1;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '1', '1722830400', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1720239257);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 1;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '1', '1722902400', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1720312615);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1722902400', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1720312766);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 1;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '1', '1722999600', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1720411094);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1723082400', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1720492641);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 2;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '2', '1723341600', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1720752467);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1723474800', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1720882900);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 4;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '4', '1723485600', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1720893829);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1723604400', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1721015497);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 1;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '1', '1723618800', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1721027539);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 1;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '1', '1723791600', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1721202082);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1723791600', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1721202150);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 1;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '1', '1724086800', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1721497497);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 1;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '1', '1724248800', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1721658918);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1724266800', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1721677484);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1724335200', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1721746488);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 1;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '1', '1724414400', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1721824811);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 1;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '1', '1724511600', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1721920941);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1725354000', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1722762726);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1725562800', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1722973180);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1725588000', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1722998555);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 3;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '3', '1725696000', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1723104745);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1725753600', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1723164778);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1725868800', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1723277271);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1726171200', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1723580718);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1726390800', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1723801135);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 1;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '1', '1726534800', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1723943678);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 1;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '1', '1726653600', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1724063839);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 3;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '3', '1726696800', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1724106282);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 2;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '2', '1726862400', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1724273640);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 6;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '6', '1726891200', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1724300126);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 1;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '1', '1726912800', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1724320985);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 6;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '6', '1726912800', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1724323331);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1726977600', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1724387573);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 6;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '6', '1727002800', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1724412514);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 4;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '4', '1727002800', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1724413490);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 4;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '4', '1727053200', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1724461473);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 4;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '4', '1727136000', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1724546960);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 6;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '6', '1727175600', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1724586443);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1727193600', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1724601630);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 4;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '4', '1727254800', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1724665993);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1727283600', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1724694530);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 1;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '1', '1727398800', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1724808062);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 4;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '4', '1727442000', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1724850917);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 6;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '6', '1727521200', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1724930021);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1727625600', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1725035973);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 6;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '6', '1727784000', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1725194923);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 4;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '4', '1727884800', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1725294369);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 3;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '3', '1727884800', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1725294392);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1727884800', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1725294405);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 6;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '6', '1727884800', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1725294410);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 2;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '2', '1727884800', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1725294417);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 1;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '1', '1727884800', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1725294437);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1727884800', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1725294872);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 3;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '3', '1727884800', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1725294874);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 2;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '2', '1727884800', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1725294875);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 6;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '6', '1727884800', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1725294876);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 4;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '4', '1727884800', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1725294877);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 1;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '1', '1727884800', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1725294878);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1728180000', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1725589095);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1728295200', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1725705588);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1728345600', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1725756775);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 6;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '6', '1728374400', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1725785551);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1728421200', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1725830462);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1728525600', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1725935949);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 4;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '4', '1728550800', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1725959822);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1728565200', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1725975962);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 4;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '4', '1728651600', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1726060113);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1728766800', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1726176827);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 4;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '4', '1728824400', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1726233139);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1729076400', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1726487466);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 4;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '4', '1729087200', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1726497530);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1729706400', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1727116992);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 4;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '4', '1729713600', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1727124451);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1729782000', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1727191739);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 3;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '3', '1729951200', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1727361374);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1729976400', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1727385192);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 6;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '6', '1730041200', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1727450214);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 6;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '6', '1730044800', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1727454675);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1730127600', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1727536389);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1730235600', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1727646719);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 1;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '1', '1730329200', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1727738164);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 3;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '3', '1730379600', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1727788636);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 6;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '6', '1730444400', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1727855670);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1730473200', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1727882182);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 4;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '4', '1730530800', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1727940561);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1730588400', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1727998870);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 6;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '6', '1730700000', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1728108156);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1730826000', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1728234436);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1730829600', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1728238546);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1730908800', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1728320109);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 6;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '6', '1730944800', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1728354368);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 6;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '6', '1730944800', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1728354441);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 6;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '6', '1731031200', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1728439410);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1731092400', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1728503331);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 4;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '4', '1731092400', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1728503332);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 1;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '1', '1731092400', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1728503333);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 6;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '6', '1731265200', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1728676287);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 2;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '2', '1731477600', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1728888283);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 1;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '1', '1731477600', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1728888971);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 4;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '4', '1731524400', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1728935796);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 4;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '4', '1731524400', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1728935826);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1731542400', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1728953672);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 4;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '4', '1731693600', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1729101853);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 1;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '1', '1731776400', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1729187423);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 1;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '1', '1731826800', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1729235586);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 4;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '4', '1731841200', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1729250878);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 3;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '3', '1731852000', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1729262079);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1731866400', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1729276953);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1731988800', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1729398204);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 1;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '1', '1732028400', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1729437545);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 1;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '1', '1732028400', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1729437735);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 6;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '6', '1732215600', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1729624703);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 1;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '1', '1732230000', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1729639812);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 6;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '6', '1732323600', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1729732840);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1732323600', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1729732886);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 6;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '6', '1732453200', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1729863549);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1732510800', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1729921867);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 6;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '6', '1732568400', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1729976717);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1732626000', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1730037368);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1732690800', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1730099307);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1732694400', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1730102861);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1732694400', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1730102876);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 6;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '6', '1732748400', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1730159792);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1732813200', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1730223457);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1732957200', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1730366638);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1733068800', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1730479455);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1733468400', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1730878799);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 4;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '4', '1733472000', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1730883360);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 4;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '4', '1733472000', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1730883405);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1733576400', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1730984889);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1733720400', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1731130794);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1733918400', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1731328140);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 6;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '6', '1733976000', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1731385337);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 1;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '1', '1734001200', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1731409808);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 6;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '6', '1734022800', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1731434310);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1734026400', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1731435643);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 4;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '4', '1734087600', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1731495869);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 1;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '1', '1734094800', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1731502996);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1734116400', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1731525945);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 6;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '6', '1734116400', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1731526123);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 1;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '1', '1734300000', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1731709591);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 6;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '6', '1734321600', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1731729893);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1734372000', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1731781229);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 1;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '1', '1734393600', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1731802885);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 6;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '6', '1734483600', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1731891891);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 6;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '6', '1734483600', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1731892075);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 6;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '6', '1734483600', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1731892104);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 3;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '3', '1734494400', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1731904011);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1734584400', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1731994429);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 6;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '6', '1734649200', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1732059657);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 1;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '1', '1734717600', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1732129060);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1734717600', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1732129078);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 1;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '1', '1734872400', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1732281214);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 6;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '6', '1734901200', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1732310735);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1734937200', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1732347804);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 6;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '6', '1734944400', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1732354119);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1734944400', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1732354127);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 1;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '1', '1734944400', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1732354170);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1734958800', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1732368063);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 4;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '4', '1734958800', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1732368080);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 1;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '1', '1734962400', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1732370822);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 4;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '4', '1734962400', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1732370836);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1734962400', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1732370987);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 6;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '6', '1734984000', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1732395320);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 4;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '4', '1735052400', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1732460418);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 1;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '1', '1735070400', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1732481605);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1735110000', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1732518239);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 6;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '6', '1735135200', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1732544246);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 4;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '4', '1735153200', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1732561801);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1735196400', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1732606648);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 1;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '1', '1735246800', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1732656779);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 6;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '6', '1735351200', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1732762064);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1735351200', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1732762064);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 2;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '2', '1735351200', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1732762064);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 3;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '3', '1735351200', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1732762064);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1735351200', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1732762253);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 6;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '6', '1735354800', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1732765328);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 3;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '3', '1735354800', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1732765702);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1735369200', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1732778569);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1735383600', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1732794631);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 6;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '6', '1735480800', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1732890108);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 2;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '2', '1735682400', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1733091176);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1735858800', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1733267006);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1736035200', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1733443409);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 1;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '1', '1736128800', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1733540082);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 6;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '6', '1736132400', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1733540877);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 3;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '3', '1736132400', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1733540877);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 2;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '2', '1736132400', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1733540877);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1736132400', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1733540880);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1736175600', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1733585033);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 1;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '1', '1736258400', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1733669501);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1736287200', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1733698299);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1736355600', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1733766335);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1736362800', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1733772798);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 1;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '1', '1736398800', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1733807685);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1736431200', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1733839256);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 1;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '1', '1736431200', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1733839268);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 4;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '4', '1736431200', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1733839275);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1736485200', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1733894502);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1736506800', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1733917253);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 1;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '1', '1736510400', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1733921925);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 1;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '1', '1736625600', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1734035592);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1736640000', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1734049688);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 1;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '1', '1736647200', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1734055241);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 4;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '4', '1736665200', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1734074445);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1736665200', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1734074446);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 6;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '6', '1736665200', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1734074452);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 4;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '4', '1736737200', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1734147852);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1736762400', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1734172632);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 4;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '4', '1736762400', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1734172675);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1736776800', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1734185737);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1736838000', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1734248388);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 6;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '6', '1736838000', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1734249188);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 3;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '3', '1736838000', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1734249192);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 4;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '4', '1736838000', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1734249289);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1736874000', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1734283528);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 1;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '1', '1736874000', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1734283660);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 4;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '4', '1736874000', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1734283674);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1736920800', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1734329356);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1736985600', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1734396798);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1737039600', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1734449341);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1737057600', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1734466247);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1737172800', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1734582848);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1737324000', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1734732602);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1737450000', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1734858403);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1737500400', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1734911540);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 1;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '1', '1737558000', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1734969009);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 4;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '4', '1737576000', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1734987567);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 4;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '4', '1737630000', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1735040740);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1737723600', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1735134258);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 1;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '1', '1737748800', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1735157299);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1737889200', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1735298764);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 1;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '1', '1737957600', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1735367252);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1737972000', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1735380858);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1738033200', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1735441280);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 6;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '6', '1738058400', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1735467681);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 1;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '1', '1738130400', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1735541499);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 6;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '6', '1738173600', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1735585018);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1738198800', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1735609538);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 1;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '1', '1738238400', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1735649674);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 4;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '4', '1738238400', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1735649681);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 2;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '2', '1738238400', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1735649686);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 3;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '3', '1738238400', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1735649698);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1738242000', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1735650036);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 2;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '2', '1738242000', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1735650438);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1738321200', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1735730235);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1738828800', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1736239083);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1738836000', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1736244786);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1739052000', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1736460878);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1739138400', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1736549505);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 3;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '3', '1739235600', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1736647066);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1739275200', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1736684831);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 4;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '4', '1739340000', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1736748352);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 3;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '3', '1739401200', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1736812508);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1739458800', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1736869727);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1739656800', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1737067551);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1739714400', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1737122417);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 1;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '1', '1739750400', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1737158719);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1739757600', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1737167857);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 1;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '1', '1739804400', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1737215711);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 1;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '1', '1739829600', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1737239713);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 2;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '2', '1739858400', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1737268031);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 2;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '2', '1739858400', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1737268247);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1739858400', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1737268280);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 2;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '2', '1739862000', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1737270973);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1739941200', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1737350164);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 1;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '1', '1740045600', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1737453849);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1740175200', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1737584727);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 1;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '1', '1740186000', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1737596072);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1740211200', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1737621919);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1740315600', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1737725394);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 1;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '1', '1740344400', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1737752830);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 1;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '1', '1740344400', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1737752842);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1740481200', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1737891795);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 2;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '2', '1740510000', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1737918729);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1740585600', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1737994016);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 1;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '1', '1740585600', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1737994027);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 1;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '1', '1740664800', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1738073479);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1740679200', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1738089234);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1740765600', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1738174840);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1740837600', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1738247220);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 1;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '1', '1740841200', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1738250517);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 2;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '2', '1740841200', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1738251022);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 1;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '1', '1740870000', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1738281301);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1740985200', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1738396737);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 1;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '1', '1740988800', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1738398128);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 3;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '3', '1740988800', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1738398161);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 2;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '2', '1740988800', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1738398165);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 6;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '6', '1740988800', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1738398235);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1741006800', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1738416613);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 1;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '1', '1741071600', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1738481877);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1741086000', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1738494533);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1741111200', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1738522284);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 6;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '6', '1741165200', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1738574018);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 6;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '6', '1741165200', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1738574018);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 1;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '1', '1741165200', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1738574257);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 1;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '1', '1741276800', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1738687213);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1741323600', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1738734585);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1741532400', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1738943419);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1741593600', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1739004475);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1741780800', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1739191543);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1741834800', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1739245420);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1742050800', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1739460511);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 1;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '1', '1742176800', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1739587563);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1742234400', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1739644355);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 6;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '6', '1742241600', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1739653171);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1742245200', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1739653250);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 1;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '1', '1742245200', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1739653984);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1742306400', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1739715920);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1742306400', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1739715920);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 1;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '1', '1742306400', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1739715921);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 1;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '1', '1742306400', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1739715921);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 1;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '1', '1742461200', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1739872403);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 4;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '4', '1742526000', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1739936926);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 6;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '6', '1742554800', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1739963906);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 6;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '6', '1742583600', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1739992606);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1742583600', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1739992644);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1742662800', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1740072045);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 3;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '3', '1742853600', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1740263299);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1742853600', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1740263318);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1742889600', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1740297611);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1743004800', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1740414387);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1743120000', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1740530621);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1743426000', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1740835929);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 6;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '6', '1743426000', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1740835974);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 1;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '1', '1743426000', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1740836086);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 4;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '4', '1743426000', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1740836091);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1743465600', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1740874049);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1743526800', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1740935703);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 6;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '6', '1743526800', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1740935718);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 4;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '4', '1743595200', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1741005141);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1743685200', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1741094242);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1743685200', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1741094243);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 1;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '1', '1743685200', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1741094244);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 1;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '1', '1743685200', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1741094245);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1743706800', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1741116403);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1743843600', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1741253090);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1743904800', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1741313691);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 3;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '3', '1743948000', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1741356488);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1743948000', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1741356543);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1744063200', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1741474565);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1744092000', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1741501209);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1744092000', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1741501211);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 3;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '3', '1744203600', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1741613087);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 4;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '4', '1744254000', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1741664824);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1744257600', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1741666514);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1744354800', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1741763676);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 1;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '1', '1744383600', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1741794902);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1744383600', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1741794918);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 1;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '1', '1744628400', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1742039579);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 3;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '3', '1744750800', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1742161198);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 1;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '1', '1744765200', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1742176001);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 1;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '1', '1744812000', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1742220138);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 1;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '1', '1744938000', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1742348512);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1744963200', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1742372595);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 3;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '3', '1744970400', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1742381016);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1744999200', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1742407487);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 3;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '3', '1745046000', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1742457236);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 3;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '3', '1745107200', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1742517986);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1745211600', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1742623036);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1745211600', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1742623151);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1745370000', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1742778218);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 4;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '4', '1745391600', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1742800342);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1745542800', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1742952523);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 1;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '1', '1745568000', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1742976330);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1745568000', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1742977889);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1745758800', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1743166919);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 1;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '1', '1745899200', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1743307863);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 1;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '1', '1745992800', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1743403986);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1746025200', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1743435508);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1746129600', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1743540722);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 1;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '1', '1746140400', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1743548790);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1746324000', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1743734273);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 2;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '2', '1746331200', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1743739776);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 3;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '3', '1746363600', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1743772984);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 1;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '1', '1746378000', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1743787771);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1746547200', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1743955451);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 4;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '4', '1746547200', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1743955462);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1747022400', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1744431570);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1747065600', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1744474878);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 6;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '6', '1747188000', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1744597069);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 4;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '4', '1747188000', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1744599478);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 1;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '1', '1747191600', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1744599964);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 1;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '1', '1747245600', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1744655705);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1747245600', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1744655785);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1747371600', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1744779749);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1747371600', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1744779797);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1747425600', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1744836447);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 2;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '2', '1747425600', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1744836481);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 3;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '3', '1747425600', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1744836482);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 1;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '1', '1747486800', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1744896170);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 1;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '1', '1747508400', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1744917917);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1747591200', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1745002439);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 6;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '6', '1747630800', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1745040226);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 6;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '6', '1747720800', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1745130782);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 6;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '6', '1747749600', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1745158574);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1747922400', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1745332878);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 4;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '4', '1747994400', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1745404525);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 3;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '3', '1747998000', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1745408689);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 2;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '2', '1748034000', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1745444886);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 1;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '1', '1748106000', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1745516913);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1748134800', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1745544847);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1748235600', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1745643643);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 4;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '4', '1748271600', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1745681503);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 1;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '1', '1748354400', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1745764950);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1748426400', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1745835927);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 6;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '6', '1748440800', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1745851451);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 3;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '3', '1748444400', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1745853101);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1748444400', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1745853449);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 4;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '4', '1748444400', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1745854206);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 1;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '1', '1748444400', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1745854768);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 2;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '2', '1748476800', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1745885734);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 1;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '1', '1748516400', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1745926692);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 4;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '4', '1748635200', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1746043765);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1748638800', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1746049177);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 6;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '6', '1748689200', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1746097407);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 4;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '4', '1748689200', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1746100321);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 1;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '1', '1748779200', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1746189671);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 1;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '1', '1748800800', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1746210216);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 3;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '3', '1748800800', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1746211270);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1748804400', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1746212819);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1748952000', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1746363380);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 6;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '6', '1748973600', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1746383947);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1748973600', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1746383983);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 6;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '6', '1748973600', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1746384034);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 4;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '4', '1748973600', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1746384039);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 1;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '1', '1748973600', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1746384082);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 1;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '1', '1748991600', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1746402068);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 3;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '3', '1751558400', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1748966938);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 2;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '2', '1751641200', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1749051093);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 3;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '3', '1751896800', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1749307745);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 1;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '1', '1751911200', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1749320455);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 3;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '3', '1751929200', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1749340561);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 3;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '3', '1751961600', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1749370556);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 1;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '1', '1751961600', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1749372187);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1752001200', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1749412008);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 4;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '4', '1752022800', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1749433530);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 2;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '2', '1752026400', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1749437855);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 6;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '6', '1752030000', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1749438396);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 4;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '4', '1752030000', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1749438964);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 3;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '3', '1752055200', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1749465297);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 6;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '6', '1752073200', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1749483054);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 3;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '3', '1752382800', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1749792526);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 2;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '2', '1752433200', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1749843470);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 6;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '6', '1752591600', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1750002442);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 3;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '3', '1752624000', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1750033647);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1752782400', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1750193844);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 4;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '4', '1752786000', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1750194488);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 3;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '3', '1752832800', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1750242082);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 2;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '2', '1752879600', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1750287688);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 3;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '3', '1753005600', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1750415834);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 3;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '3', '1753084800', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1750493512);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1753210800', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1750620976);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1753261200', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1750671207);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1753261200', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1750671388);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1753297200', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1750708241);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 6;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '6', '1753300800', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1750710056);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 1;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '1', '1753318800', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1750728809);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 2;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '2', '1753322400', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1750732442);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 1;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '1', '1753322400', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1750732936);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 4;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '4', '1753322400', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1750733568);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1753455600', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1750866580);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 4;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '4', '1753484400', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1750893786);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1753657200', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1751067671);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 3;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '3', '1753660800', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1751069676);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 3;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '3', '1754082000', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1751492884);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1754085600', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1751494638);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 2;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '2', '1754182800', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1751591228);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 2;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '2', '1754190000', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1751600857);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 1;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '1', '1754193600', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1751603833);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 4;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '4', '1754197200', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1751605872);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1754262000', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1751673085);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 3;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '3', '1754316000', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1751727382);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 4;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '4', '1754488800', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1751897223);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 3;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '3', '1754499600', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1751907826);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1754517600', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1751927088);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 1;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '1', '1754611200', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1752020370);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 6;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '6', '1754614800', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1752024963);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 2;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '2', '1754614800', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1752026141);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 4;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '4', '1754632800', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1752043076);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 3;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '3', '1754632800', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1752043589);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1754650800', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1752061076);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 3;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '3', '1754784000', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1752192493);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 3;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '3', '1754820000', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1752231082);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 1;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '1', '1754935200', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1752345686);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 3;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '3', '1755108000', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1752518397);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 4;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '4', '1755219600', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1752627655);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 4;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '4', '1755237600', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1752648289);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 3;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '3', '1755252000', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1752662963);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 3;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '3', '1755295200', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1752705155);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1755367200', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1752775422);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 1;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '1', '1755475200', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1752883555);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1755475200', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1752884575);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 4;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '4', '1755475200', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1752885358);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 4;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '4', '1755496800', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1752906829);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 3;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '3', '1755529200', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1752940321);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1755615600', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1753023651);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 4;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '4', '1755615600', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1753024401);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 4;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '4', '1755633600', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1753043565);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1755633600', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1753043572);

UPDATE LOW_PRIORITY `e2BlogNotes` SET `ReadCount` = `ReadCount` + 1 WHERE `ID` = 5;

INSERT LOW_PRIORITY INTO `e2BlogActions` (`SubsetID`, `EntityID`, `Stamp`, `ReadCount`) VALUES (1, '5', '1755705600', '1') ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1;

DELETE LOW_PRIORITY FROM `e2BlogActions` WHERE (`Stamp` < 1753115115);

